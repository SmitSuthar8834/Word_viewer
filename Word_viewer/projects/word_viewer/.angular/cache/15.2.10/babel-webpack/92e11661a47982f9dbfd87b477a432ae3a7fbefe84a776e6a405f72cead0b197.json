{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug) {\n  var util = require(\"./util\");\n  var TypeError = require(\"./errors\").TypeError;\n  var inherits = require(\"./util\").inherits;\n  var errorObj = util.errorObj;\n  var tryCatch = util.tryCatch;\n  var NULL = {};\n  function thrower(e) {\n    setTimeout(function () {\n      throw e;\n    }, 0);\n  }\n  function castPreservingDisposable(thenable) {\n    var maybePromise = tryConvertToPromise(thenable);\n    if (maybePromise !== thenable && typeof thenable._isDisposable === \"function\" && typeof thenable._getDisposer === \"function\" && thenable._isDisposable()) {\n      maybePromise._setDisposable(thenable._getDisposer());\n    }\n    return maybePromise;\n  }\n  function dispose(resources, inspection) {\n    var i = 0;\n    var len = resources.length;\n    var ret = new Promise(INTERNAL);\n    function iterator() {\n      if (i >= len) return ret._fulfill();\n      var maybePromise = castPreservingDisposable(resources[i++]);\n      if (maybePromise instanceof Promise && maybePromise._isDisposable()) {\n        try {\n          maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise);\n        } catch (e) {\n          return thrower(e);\n        }\n        if (maybePromise instanceof Promise) {\n          return maybePromise._then(iterator, thrower, null, null, null);\n        }\n      }\n      iterator();\n    }\n    iterator();\n    return ret;\n  }\n  function Disposer(data, promise, context) {\n    this._data = data;\n    this._promise = promise;\n    this._context = context;\n  }\n  Disposer.prototype.data = function () {\n    return this._data;\n  };\n  Disposer.prototype.promise = function () {\n    return this._promise;\n  };\n  Disposer.prototype.resource = function () {\n    if (this.promise().isFulfilled()) {\n      return this.promise().value();\n    }\n    return NULL;\n  };\n  Disposer.prototype.tryDispose = function (inspection) {\n    var resource = this.resource();\n    var context = this._context;\n    if (context !== undefined) context._pushContext();\n    var ret = resource !== NULL ? this.doDispose(resource, inspection) : null;\n    if (context !== undefined) context._popContext();\n    this._promise._unsetDisposable();\n    this._data = null;\n    return ret;\n  };\n  Disposer.isDisposer = function (d) {\n    return d != null && typeof d.resource === \"function\" && typeof d.tryDispose === \"function\";\n  };\n  function FunctionDisposer(fn, promise, context) {\n    this.constructor$(fn, promise, context);\n  }\n  inherits(FunctionDisposer, Disposer);\n  FunctionDisposer.prototype.doDispose = function (resource, inspection) {\n    var fn = this.data();\n    return fn.call(resource, resource, inspection);\n  };\n  function maybeUnwrapDisposer(value) {\n    if (Disposer.isDisposer(value)) {\n      this.resources[this.index]._setDisposable(value);\n      return value.promise();\n    }\n    return value;\n  }\n  function ResourceList(length) {\n    this.length = length;\n    this.promise = null;\n    this[length - 1] = null;\n  }\n  ResourceList.prototype._resultCancelled = function () {\n    var len = this.length;\n    for (var i = 0; i < len; ++i) {\n      var item = this[i];\n      if (item instanceof Promise) {\n        item.cancel();\n      }\n    }\n  };\n  Promise.using = function () {\n    var len = arguments.length;\n    if (len < 2) return apiRejection(\"you must pass at least 2 arguments to Promise.using\");\n    var fn = arguments[len - 1];\n    if (typeof fn !== \"function\") {\n      return apiRejection(\"expecting a function but got \" + util.classString(fn));\n    }\n    var input;\n    var spreadArgs = true;\n    if (len === 2 && Array.isArray(arguments[0])) {\n      input = arguments[0];\n      len = input.length;\n      spreadArgs = false;\n    } else {\n      input = arguments;\n      len--;\n    }\n    var resources = new ResourceList(len);\n    for (var i = 0; i < len; ++i) {\n      var resource = input[i];\n      if (Disposer.isDisposer(resource)) {\n        var disposer = resource;\n        resource = resource.promise();\n        resource._setDisposable(disposer);\n      } else {\n        var maybePromise = tryConvertToPromise(resource);\n        if (maybePromise instanceof Promise) {\n          resource = maybePromise._then(maybeUnwrapDisposer, null, null, {\n            resources: resources,\n            index: i\n          }, undefined);\n        }\n      }\n      resources[i] = resource;\n    }\n    var reflectedResources = new Array(resources.length);\n    for (var i = 0; i < reflectedResources.length; ++i) {\n      reflectedResources[i] = Promise.resolve(resources[i]).reflect();\n    }\n    var resultPromise = Promise.all(reflectedResources).then(function (inspections) {\n      for (var i = 0; i < inspections.length; ++i) {\n        var inspection = inspections[i];\n        if (inspection.isRejected()) {\n          errorObj.e = inspection.error();\n          return errorObj;\n        } else if (!inspection.isFulfilled()) {\n          resultPromise.cancel();\n          return;\n        }\n        inspections[i] = inspection.value();\n      }\n      promise._pushContext();\n      fn = tryCatch(fn);\n      var ret = spreadArgs ? fn.apply(undefined, inspections) : fn(inspections);\n      var promiseCreated = promise._popContext();\n      debug.checkForgottenReturns(ret, promiseCreated, \"Promise.using\", promise);\n      return ret;\n    });\n    var promise = resultPromise.lastly(function () {\n      var inspection = new Promise.PromiseInspection(resultPromise);\n      return dispose(resources, inspection);\n    });\n    resources.promise = promise;\n    promise._setOnCancel(resources);\n    return promise;\n  };\n  Promise.prototype._setDisposable = function (disposer) {\n    this._bitField = this._bitField | 131072;\n    this._disposer = disposer;\n  };\n  Promise.prototype._isDisposable = function () {\n    return (this._bitField & 131072) > 0;\n  };\n  Promise.prototype._getDisposer = function () {\n    return this._disposer;\n  };\n  Promise.prototype._unsetDisposable = function () {\n    this._bitField = this._bitField & ~131072;\n    this._disposer = undefined;\n  };\n  Promise.prototype.disposer = function (fn) {\n    if (typeof fn === \"function\") {\n      return new FunctionDisposer(fn, this, createContext());\n    }\n    throw new TypeError();\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}