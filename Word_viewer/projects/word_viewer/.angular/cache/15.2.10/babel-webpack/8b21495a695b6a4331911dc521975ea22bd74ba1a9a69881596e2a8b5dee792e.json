{"ast":null,"code":"exports.paragraph = paragraph;\nexports.run = run;\nexports.table = table;\nexports.bold = new Matcher(\"bold\");\nexports.italic = new Matcher(\"italic\");\nexports.underline = new Matcher(\"underline\");\nexports.strikethrough = new Matcher(\"strikethrough\");\nexports.allCaps = new Matcher(\"allCaps\");\nexports.smallCaps = new Matcher(\"smallCaps\");\nexports.highlight = highlight;\nexports.commentReference = new Matcher(\"commentReference\");\nexports.lineBreak = new BreakMatcher({\n  breakType: \"line\"\n});\nexports.pageBreak = new BreakMatcher({\n  breakType: \"page\"\n});\nexports.columnBreak = new BreakMatcher({\n  breakType: \"column\"\n});\nexports.equalTo = equalTo;\nexports.startsWith = startsWith;\nfunction paragraph(options) {\n  return new Matcher(\"paragraph\", options);\n}\nfunction run(options) {\n  return new Matcher(\"run\", options);\n}\nfunction table(options) {\n  return new Matcher(\"table\", options);\n}\nfunction highlight(options) {\n  return new HighlightMatcher(options);\n}\nfunction Matcher(elementType, options) {\n  options = options || {};\n  this._elementType = elementType;\n  this._styleId = options.styleId;\n  this._styleName = options.styleName;\n  if (options.list) {\n    this._listIndex = options.list.levelIndex;\n    this._listIsOrdered = options.list.isOrdered;\n  }\n}\nMatcher.prototype.matches = function (element) {\n  return element.type === this._elementType && (this._styleId === undefined || element.styleId === this._styleId) && (this._styleName === undefined || element.styleName && this._styleName.operator(this._styleName.operand, element.styleName)) && (this._listIndex === undefined || isList(element, this._listIndex, this._listIsOrdered)) && (this._breakType === undefined || this._breakType === element.breakType);\n};\nfunction HighlightMatcher(options) {\n  options = options || {};\n  this._color = options.color;\n}\nHighlightMatcher.prototype.matches = function (element) {\n  return element.type === \"highlight\" && (this._color === undefined || element.color === this._color);\n};\nfunction BreakMatcher(options) {\n  options = options || {};\n  this._breakType = options.breakType;\n}\nBreakMatcher.prototype.matches = function (element) {\n  return element.type === \"break\" && (this._breakType === undefined || element.breakType === this._breakType);\n};\nfunction isList(element, levelIndex, isOrdered) {\n  return element.numbering && element.numbering.level == levelIndex && element.numbering.isOrdered == isOrdered;\n}\nfunction equalTo(value) {\n  return {\n    operator: operatorEqualTo,\n    operand: value\n  };\n}\nfunction startsWith(value) {\n  return {\n    operator: operatorStartsWith,\n    operand: value\n  };\n}\nfunction operatorEqualTo(first, second) {\n  return first.toUpperCase() === second.toUpperCase();\n}\nfunction operatorStartsWith(first, second) {\n  return second.toUpperCase().indexOf(first.toUpperCase()) === 0;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}