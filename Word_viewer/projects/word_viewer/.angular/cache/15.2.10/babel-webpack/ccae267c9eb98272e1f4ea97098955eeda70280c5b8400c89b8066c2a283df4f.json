{"ast":null,"code":"var StringSource = module.exports = function (string, description) {\n  var self = {\n    asString: function () {\n      return string;\n    },\n    range: function (startIndex, endIndex) {\n      return new StringSourceRange(string, description, startIndex, endIndex);\n    }\n  };\n  return self;\n};\nvar StringSourceRange = function (string, description, startIndex, endIndex) {\n  this._string = string;\n  this._description = description;\n  this._startIndex = startIndex;\n  this._endIndex = endIndex;\n};\nStringSourceRange.prototype.to = function (otherRange) {\n  // TODO: Assert that tokens are the same across both iterators\n  return new StringSourceRange(this._string, this._description, this._startIndex, otherRange._endIndex);\n};\nStringSourceRange.prototype.describe = function () {\n  var position = this._position();\n  var description = this._description ? this._description + \"\\n\" : \"\";\n  return description + \"Line number: \" + position.lineNumber + \"\\nCharacter number: \" + position.characterNumber;\n};\nStringSourceRange.prototype.lineNumber = function () {\n  return this._position().lineNumber;\n};\nStringSourceRange.prototype.characterNumber = function () {\n  return this._position().characterNumber;\n};\nStringSourceRange.prototype._position = function () {\n  var self = this;\n  var index = 0;\n  var nextNewLine = function () {\n    return self._string.indexOf(\"\\n\", index);\n  };\n  var lineNumber = 1;\n  while (nextNewLine() !== -1 && nextNewLine() < this._startIndex) {\n    index = nextNewLine() + 1;\n    lineNumber += 1;\n  }\n  var characterNumber = this._startIndex - index + 1;\n  return {\n    lineNumber: lineNumber,\n    characterNumber: characterNumber\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}