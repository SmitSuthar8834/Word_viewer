{"ast":null,"code":"\"use strict\";\n\nfunction arrayMove(src, srcIndex, dst, dstIndex, len) {\n  for (var j = 0; j < len; ++j) {\n    dst[j + dstIndex] = src[j + srcIndex];\n    src[j + srcIndex] = void 0;\n  }\n}\nfunction Queue(capacity) {\n  this._capacity = capacity;\n  this._length = 0;\n  this._front = 0;\n}\nQueue.prototype._willBeOverCapacity = function (size) {\n  return this._capacity < size;\n};\nQueue.prototype._pushOne = function (arg) {\n  var length = this.length();\n  this._checkCapacity(length + 1);\n  var i = this._front + length & this._capacity - 1;\n  this[i] = arg;\n  this._length = length + 1;\n};\nQueue.prototype.push = function (fn, receiver, arg) {\n  var length = this.length() + 3;\n  if (this._willBeOverCapacity(length)) {\n    this._pushOne(fn);\n    this._pushOne(receiver);\n    this._pushOne(arg);\n    return;\n  }\n  var j = this._front + length - 3;\n  this._checkCapacity(length);\n  var wrapMask = this._capacity - 1;\n  this[j + 0 & wrapMask] = fn;\n  this[j + 1 & wrapMask] = receiver;\n  this[j + 2 & wrapMask] = arg;\n  this._length = length;\n};\nQueue.prototype.shift = function () {\n  var front = this._front,\n    ret = this[front];\n  this[front] = undefined;\n  this._front = front + 1 & this._capacity - 1;\n  this._length--;\n  return ret;\n};\nQueue.prototype.length = function () {\n  return this._length;\n};\nQueue.prototype._checkCapacity = function (size) {\n  if (this._capacity < size) {\n    this._resizeTo(this._capacity << 1);\n  }\n};\nQueue.prototype._resizeTo = function (capacity) {\n  var oldCapacity = this._capacity;\n  this._capacity = capacity;\n  var front = this._front;\n  var length = this._length;\n  var moveItemsCount = front + length & oldCapacity - 1;\n  arrayMove(this, 0, this, oldCapacity, moveItemsCount);\n};\nmodule.exports = Queue;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}