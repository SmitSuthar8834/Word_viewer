{"ast":null,"code":"var base64js = require(\"base64-js\");\nvar JSZip = require(\"jszip\");\nexports.openArrayBuffer = openArrayBuffer;\nexports.splitPath = splitPath;\nexports.joinPath = joinPath;\nfunction openArrayBuffer(arrayBuffer) {\n  return JSZip.loadAsync(arrayBuffer).then(function (zipFile) {\n    function exists(name) {\n      return zipFile.file(name) !== null;\n    }\n    function read(name, encoding) {\n      return zipFile.file(name).async(\"uint8array\").then(function (array) {\n        if (encoding === \"base64\") {\n          return base64js.fromByteArray(array);\n        } else if (encoding) {\n          var decoder = new TextDecoder(encoding);\n          return decoder.decode(array);\n        } else {\n          return array;\n        }\n      });\n    }\n    function write(name, contents) {\n      zipFile.file(name, contents);\n    }\n    function toArrayBuffer() {\n      return zipFile.generateAsync({\n        type: \"arraybuffer\"\n      });\n    }\n    return {\n      exists: exists,\n      read: read,\n      write: write,\n      toArrayBuffer: toArrayBuffer\n    };\n  });\n}\nfunction splitPath(path) {\n  var lastIndex = path.lastIndexOf(\"/\");\n  if (lastIndex === -1) {\n    return {\n      dirname: \"\",\n      basename: path\n    };\n  } else {\n    return {\n      dirname: path.substring(0, lastIndex),\n      basename: path.substring(lastIndex + 1)\n    };\n  }\n}\nfunction joinPath() {\n  var nonEmptyPaths = Array.prototype.filter.call(arguments, function (path) {\n    return path;\n  });\n  var relevantPaths = [];\n  nonEmptyPaths.forEach(function (path) {\n    if (/^\\//.test(path)) {\n      relevantPaths = [path];\n    } else {\n      relevantPaths.push(path);\n    }\n  });\n  return relevantPaths.join(\"/\");\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}