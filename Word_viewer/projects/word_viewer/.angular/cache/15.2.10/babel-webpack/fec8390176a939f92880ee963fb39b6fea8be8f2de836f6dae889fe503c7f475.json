{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (Promise, PromiseArray, debug) {\n  var PromiseInspection = Promise.PromiseInspection;\n  var util = require(\"./util\");\n  function SettledPromiseArray(values) {\n    this.constructor$(values);\n  }\n  util.inherits(SettledPromiseArray, PromiseArray);\n  SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {\n    this._values[index] = inspection;\n    var totalResolved = ++this._totalResolved;\n    if (totalResolved >= this._length) {\n      this._resolve(this._values);\n      return true;\n    }\n    return false;\n  };\n  SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {\n    var ret = new PromiseInspection();\n    ret._bitField = 33554432;\n    ret._settledValueField = value;\n    return this._promiseResolved(index, ret);\n  };\n  SettledPromiseArray.prototype._promiseRejected = function (reason, index) {\n    var ret = new PromiseInspection();\n    ret._bitField = 16777216;\n    ret._settledValueField = reason;\n    return this._promiseResolved(index, ret);\n  };\n  Promise.settle = function (promises) {\n    debug.deprecated(\".settle()\", \".reflect()\");\n    return new SettledPromiseArray(promises).promise();\n  };\n  Promise.prototype.settle = function () {\n    return Promise.settle(this);\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}