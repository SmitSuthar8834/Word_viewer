{"ast":null,"code":"var _ = require(\"underscore\");\nvar promises = require(\"../promises\");\nvar xml = require(\"../xml\");\nexports.read = read;\nexports.readXmlFromZipFile = readXmlFromZipFile;\nvar xmlNamespaceMap = {\n  // Transitional format\n  \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\": \"w\",\n  \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\": \"r\",\n  \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\": \"wp\",\n  \"http://schemas.openxmlformats.org/drawingml/2006/main\": \"a\",\n  \"http://schemas.openxmlformats.org/drawingml/2006/picture\": \"pic\",\n  // Strict format\n  \"http://purl.oclc.org/ooxml/wordprocessingml/main\": \"w\",\n  \"http://purl.oclc.org/ooxml/officeDocument/relationships\": \"r\",\n  \"http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing\": \"wp\",\n  \"http://purl.oclc.org/ooxml/drawingml/main\": \"a\",\n  \"http://purl.oclc.org/ooxml/drawingml/picture\": \"pic\",\n  // Common\n  \"http://schemas.openxmlformats.org/package/2006/content-types\": \"content-types\",\n  \"http://schemas.openxmlformats.org/package/2006/relationships\": \"relationships\",\n  \"http://schemas.openxmlformats.org/markup-compatibility/2006\": \"mc\",\n  \"urn:schemas-microsoft-com:vml\": \"v\",\n  \"urn:schemas-microsoft-com:office:word\": \"office-word\",\n  // [MS-DOCX]: Word Extensions to the Office Open XML (.docx) File Format\n  // https://learn.microsoft.com/en-us/openspecs/office_standards/ms-docx/b839fe1f-e1ca-4fa6-8c26-5954d0abbccd\n  \"http://schemas.microsoft.com/office/word/2010/wordml\": \"wordml\"\n};\nfunction read(xmlString) {\n  return xml.readString(xmlString, xmlNamespaceMap).then(function (document) {\n    return collapseAlternateContent(document)[0];\n  });\n}\nfunction readXmlFromZipFile(docxFile, path) {\n  if (docxFile.exists(path)) {\n    return docxFile.read(path, \"utf-8\").then(stripUtf8Bom).then(read);\n  } else {\n    return promises.resolve(null);\n  }\n}\nfunction stripUtf8Bom(xmlString) {\n  return xmlString.replace(/^\\uFEFF/g, '');\n}\nfunction collapseAlternateContent(node) {\n  if (node.type === \"element\") {\n    if (node.name === \"mc:AlternateContent\") {\n      return node.first(\"mc:Fallback\").children;\n    } else {\n      node.children = _.flatten(node.children.map(collapseAlternateContent, true));\n      return [node];\n    }\n  } else {\n    return [node];\n  }\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}