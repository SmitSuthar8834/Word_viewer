{"ast":null,"code":"var _ = require(\"underscore\");\nvar types = exports.types = {\n  document: \"document\",\n  paragraph: \"paragraph\",\n  run: \"run\",\n  text: \"text\",\n  tab: \"tab\",\n  checkbox: \"checkbox\",\n  hyperlink: \"hyperlink\",\n  noteReference: \"noteReference\",\n  image: \"image\",\n  note: \"note\",\n  commentReference: \"commentReference\",\n  comment: \"comment\",\n  table: \"table\",\n  tableRow: \"tableRow\",\n  tableCell: \"tableCell\",\n  \"break\": \"break\",\n  bookmarkStart: \"bookmarkStart\"\n};\nfunction Document(children, options) {\n  options = options || {};\n  return {\n    type: types.document,\n    children: children,\n    notes: options.notes || new Notes({}),\n    comments: options.comments || []\n  };\n}\nfunction Paragraph(children, properties) {\n  properties = properties || {};\n  var indent = properties.indent || {};\n  return {\n    type: types.paragraph,\n    children: children,\n    styleId: properties.styleId || null,\n    styleName: properties.styleName || null,\n    numbering: properties.numbering || null,\n    alignment: properties.alignment || null,\n    indent: {\n      start: indent.start || null,\n      end: indent.end || null,\n      firstLine: indent.firstLine || null,\n      hanging: indent.hanging || null\n    }\n  };\n}\nfunction Run(children, properties) {\n  properties = properties || {};\n  return {\n    type: types.run,\n    children: children,\n    styleId: properties.styleId || null,\n    styleName: properties.styleName || null,\n    isBold: !!properties.isBold,\n    isUnderline: !!properties.isUnderline,\n    isItalic: !!properties.isItalic,\n    isStrikethrough: !!properties.isStrikethrough,\n    isAllCaps: !!properties.isAllCaps,\n    isSmallCaps: !!properties.isSmallCaps,\n    verticalAlignment: properties.verticalAlignment || verticalAlignment.baseline,\n    font: properties.font || null,\n    fontSize: properties.fontSize || null,\n    highlight: properties.highlight || null\n  };\n}\nvar verticalAlignment = {\n  baseline: \"baseline\",\n  superscript: \"superscript\",\n  subscript: \"subscript\"\n};\nfunction Text(value) {\n  return {\n    type: types.text,\n    value: value\n  };\n}\nfunction Tab() {\n  return {\n    type: types.tab\n  };\n}\nfunction Checkbox(options) {\n  return {\n    type: types.checkbox,\n    checked: options.checked\n  };\n}\nfunction Hyperlink(children, options) {\n  return {\n    type: types.hyperlink,\n    children: children,\n    href: options.href,\n    anchor: options.anchor,\n    targetFrame: options.targetFrame\n  };\n}\nfunction NoteReference(options) {\n  return {\n    type: types.noteReference,\n    noteType: options.noteType,\n    noteId: options.noteId\n  };\n}\nfunction Notes(notes) {\n  this._notes = _.indexBy(notes, function (note) {\n    return noteKey(note.noteType, note.noteId);\n  });\n}\nNotes.prototype.resolve = function (reference) {\n  return this.findNoteByKey(noteKey(reference.noteType, reference.noteId));\n};\nNotes.prototype.findNoteByKey = function (key) {\n  return this._notes[key] || null;\n};\nfunction Note(options) {\n  return {\n    type: types.note,\n    noteType: options.noteType,\n    noteId: options.noteId,\n    body: options.body\n  };\n}\nfunction commentReference(options) {\n  return {\n    type: types.commentReference,\n    commentId: options.commentId\n  };\n}\nfunction comment(options) {\n  return {\n    type: types.comment,\n    commentId: options.commentId,\n    body: options.body,\n    authorName: options.authorName,\n    authorInitials: options.authorInitials\n  };\n}\nfunction noteKey(noteType, id) {\n  return noteType + \"-\" + id;\n}\nfunction Image(options) {\n  return {\n    type: types.image,\n    // `read` is retained for backwards compatibility, but other read\n    // methods should be preferred.\n    read: function (encoding) {\n      if (encoding) {\n        return options.readImage(encoding);\n      } else {\n        return options.readImage().then(function (arrayBuffer) {\n          return Buffer.from(arrayBuffer);\n        });\n      }\n    },\n    readAsArrayBuffer: function () {\n      return options.readImage();\n    },\n    readAsBase64String: function () {\n      return options.readImage(\"base64\");\n    },\n    readAsBuffer: function () {\n      return options.readImage().then(function (arrayBuffer) {\n        return Buffer.from(arrayBuffer);\n      });\n    },\n    altText: options.altText,\n    contentType: options.contentType\n  };\n}\nfunction Table(children, properties) {\n  properties = properties || {};\n  return {\n    type: types.table,\n    children: children,\n    styleId: properties.styleId || null,\n    styleName: properties.styleName || null\n  };\n}\nfunction TableRow(children, options) {\n  options = options || {};\n  return {\n    type: types.tableRow,\n    children: children,\n    isHeader: options.isHeader || false\n  };\n}\nfunction TableCell(children, options) {\n  options = options || {};\n  return {\n    type: types.tableCell,\n    children: children,\n    colSpan: options.colSpan == null ? 1 : options.colSpan,\n    rowSpan: options.rowSpan == null ? 1 : options.rowSpan\n  };\n}\nfunction Break(breakType) {\n  return {\n    type: types[\"break\"],\n    breakType: breakType\n  };\n}\nfunction BookmarkStart(options) {\n  return {\n    type: types.bookmarkStart,\n    name: options.name\n  };\n}\nexports.document = exports.Document = Document;\nexports.paragraph = exports.Paragraph = Paragraph;\nexports.run = exports.Run = Run;\nexports.text = exports.Text = Text;\nexports.tab = exports.Tab = Tab;\nexports.checkbox = exports.Checkbox = Checkbox;\nexports.Hyperlink = Hyperlink;\nexports.noteReference = exports.NoteReference = NoteReference;\nexports.Notes = Notes;\nexports.Note = Note;\nexports.commentReference = commentReference;\nexports.comment = comment;\nexports.Image = Image;\nexports.Table = Table;\nexports.TableRow = TableRow;\nexports.TableCell = TableCell;\nexports.lineBreak = Break(\"line\");\nexports.pageBreak = Break(\"page\");\nexports.columnBreak = Break(\"column\");\nexports.BookmarkStart = BookmarkStart;\nexports.verticalAlignment = verticalAlignment;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}