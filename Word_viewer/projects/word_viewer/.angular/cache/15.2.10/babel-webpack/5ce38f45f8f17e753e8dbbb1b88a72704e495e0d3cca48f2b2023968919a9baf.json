{"ast":null,"code":"var fromArray = exports.fromArray = function (array) {\n  var index = 0;\n  var hasNext = function () {\n    return index < array.length;\n  };\n  return new LazyIterator({\n    hasNext: hasNext,\n    next: function () {\n      if (!hasNext()) {\n        throw new Error(\"No more elements\");\n      } else {\n        return array[index++];\n      }\n    }\n  });\n};\nvar LazyIterator = function (iterator) {\n  this._iterator = iterator;\n};\nLazyIterator.prototype.map = function (func) {\n  var iterator = this._iterator;\n  return new LazyIterator({\n    hasNext: function () {\n      return iterator.hasNext();\n    },\n    next: function () {\n      return func(iterator.next());\n    }\n  });\n};\nLazyIterator.prototype.filter = function (condition) {\n  var iterator = this._iterator;\n  var moved = false;\n  var hasNext = false;\n  var next;\n  var moveIfNecessary = function () {\n    if (moved) {\n      return;\n    }\n    moved = true;\n    hasNext = false;\n    while (iterator.hasNext() && !hasNext) {\n      next = iterator.next();\n      hasNext = condition(next);\n    }\n  };\n  return new LazyIterator({\n    hasNext: function () {\n      moveIfNecessary();\n      return hasNext;\n    },\n    next: function () {\n      moveIfNecessary();\n      var toReturn = next;\n      moved = false;\n      return toReturn;\n    }\n  });\n};\nLazyIterator.prototype.first = function () {\n  var iterator = this._iterator;\n  if (this._iterator.hasNext()) {\n    return iterator.next();\n  } else {\n    return null;\n  }\n};\nLazyIterator.prototype.toArray = function () {\n  var result = [];\n  while (this._iterator.hasNext()) {\n    result.push(this._iterator.next());\n  }\n  return result;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}