{"ast":null,"code":"var _ = require(\"underscore\");\nfunction symmetricMarkdownElement(end) {\n  return markdownElement(end, end);\n}\nfunction markdownElement(start, end) {\n  return function () {\n    return {\n      start: start,\n      end: end\n    };\n  };\n}\nfunction markdownLink(attributes) {\n  var href = attributes.href || \"\";\n  if (href) {\n    return {\n      start: \"[\",\n      end: \"](\" + href + \")\",\n      anchorPosition: \"before\"\n    };\n  } else {\n    return {};\n  }\n}\nfunction markdownImage(attributes) {\n  var src = attributes.src || \"\";\n  var altText = attributes.alt || \"\";\n  if (src || altText) {\n    return {\n      start: \"![\" + altText + \"](\" + src + \")\"\n    };\n  } else {\n    return {};\n  }\n}\nfunction markdownList(options) {\n  return function (attributes, list) {\n    return {\n      start: list ? \"\\n\" : \"\",\n      end: list ? \"\" : \"\\n\",\n      list: {\n        isOrdered: options.isOrdered,\n        indent: list ? list.indent + 1 : 0,\n        count: 0\n      }\n    };\n  };\n}\nfunction markdownListItem(attributes, list, listItem) {\n  list = list || {\n    indent: 0,\n    isOrdered: false,\n    count: 0\n  };\n  list.count++;\n  listItem.hasClosed = false;\n  var bullet = list.isOrdered ? list.count + \".\" : \"-\";\n  var start = repeatString(\"\\t\", list.indent) + bullet + \" \";\n  return {\n    start: start,\n    end: function () {\n      if (!listItem.hasClosed) {\n        listItem.hasClosed = true;\n        return \"\\n\";\n      }\n    }\n  };\n}\nvar htmlToMarkdown = {\n  \"p\": markdownElement(\"\", \"\\n\\n\"),\n  \"br\": markdownElement(\"\", \"  \\n\"),\n  \"ul\": markdownList({\n    isOrdered: false\n  }),\n  \"ol\": markdownList({\n    isOrdered: true\n  }),\n  \"li\": markdownListItem,\n  \"strong\": symmetricMarkdownElement(\"__\"),\n  \"em\": symmetricMarkdownElement(\"*\"),\n  \"a\": markdownLink,\n  \"img\": markdownImage\n};\n(function () {\n  for (var i = 1; i <= 6; i++) {\n    htmlToMarkdown[\"h\" + i] = markdownElement(repeatString(\"#\", i) + \" \", \"\\n\\n\");\n  }\n})();\nfunction repeatString(value, count) {\n  return new Array(count + 1).join(value);\n}\nfunction markdownWriter() {\n  var fragments = [];\n  var elementStack = [];\n  var list = null;\n  var listItem = {};\n  function open(tagName, attributes) {\n    attributes = attributes || {};\n    var createElement = htmlToMarkdown[tagName] || function () {\n      return {};\n    };\n    var element = createElement(attributes, list, listItem);\n    elementStack.push({\n      end: element.end,\n      list: list\n    });\n    if (element.list) {\n      list = element.list;\n    }\n    var anchorBeforeStart = element.anchorPosition === \"before\";\n    if (anchorBeforeStart) {\n      writeAnchor(attributes);\n    }\n    fragments.push(element.start || \"\");\n    if (!anchorBeforeStart) {\n      writeAnchor(attributes);\n    }\n  }\n  function writeAnchor(attributes) {\n    if (attributes.id) {\n      fragments.push('<a id=\"' + attributes.id + '\"></a>');\n    }\n  }\n  function close(tagName) {\n    var element = elementStack.pop();\n    list = element.list;\n    var end = _.isFunction(element.end) ? element.end() : element.end;\n    fragments.push(end || \"\");\n  }\n  function selfClosing(tagName, attributes) {\n    open(tagName, attributes);\n    close(tagName);\n  }\n  function text(value) {\n    fragments.push(escapeMarkdown(value));\n  }\n  function asString() {\n    return fragments.join(\"\");\n  }\n  return {\n    asString: asString,\n    open: open,\n    close: close,\n    text: text,\n    selfClosing: selfClosing\n  };\n}\nexports.writer = markdownWriter;\nfunction escapeMarkdown(value) {\n  return value.replace(/\\\\/g, '\\\\\\\\').replace(/([\\`\\*_\\{\\}\\[\\]\\(\\)\\#\\+\\-\\.\\!])/g, '\\\\$1');\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}