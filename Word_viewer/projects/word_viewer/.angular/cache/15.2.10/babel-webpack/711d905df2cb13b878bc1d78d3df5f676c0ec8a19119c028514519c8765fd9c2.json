{"ast":null,"code":"var _ = require(\"underscore\");\nexports.Result = Result;\nexports.success = success;\nexports.warning = warning;\nexports.error = error;\nfunction Result(value, messages) {\n  this.value = value;\n  this.messages = messages || [];\n}\nResult.prototype.map = function (func) {\n  return new Result(func(this.value), this.messages);\n};\nResult.prototype.flatMap = function (func) {\n  var funcResult = func(this.value);\n  return new Result(funcResult.value, combineMessages([this, funcResult]));\n};\nResult.prototype.flatMapThen = function (func) {\n  var that = this;\n  return func(this.value).then(function (otherResult) {\n    return new Result(otherResult.value, combineMessages([that, otherResult]));\n  });\n};\nResult.combine = function (results) {\n  var values = _.flatten(_.pluck(results, \"value\"));\n  var messages = combineMessages(results);\n  return new Result(values, messages);\n};\nfunction success(value) {\n  return new Result(value, []);\n}\nfunction warning(message) {\n  return {\n    type: \"warning\",\n    message: message\n  };\n}\nfunction error(exception) {\n  return {\n    type: \"error\",\n    message: exception.message,\n    error: exception\n  };\n}\nfunction combineMessages(results) {\n  var messages = [];\n  _.flatten(_.pluck(results, \"messages\"), true).forEach(function (message) {\n    if (!containsMessage(messages, message)) {\n      messages.push(message);\n    }\n  });\n  return messages;\n}\nfunction containsMessage(messages, message) {\n  return _.find(messages, isSameMessage.bind(null, message)) !== undefined;\n}\nfunction isSameMessage(first, second) {\n  return first.type === second.type && first.message === second.message;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}