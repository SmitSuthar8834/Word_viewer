{"ast":null,"code":"exports.readContentTypesFromXml = readContentTypesFromXml;\nvar fallbackContentTypes = {\n  \"png\": \"png\",\n  \"gif\": \"gif\",\n  \"jpeg\": \"jpeg\",\n  \"jpg\": \"jpeg\",\n  \"tif\": \"tiff\",\n  \"tiff\": \"tiff\",\n  \"bmp\": \"bmp\"\n};\nexports.defaultContentTypes = contentTypes({}, {});\nfunction readContentTypesFromXml(element) {\n  var extensionDefaults = {};\n  var overrides = {};\n  element.children.forEach(function (child) {\n    if (child.name === \"content-types:Default\") {\n      extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;\n    }\n    if (child.name === \"content-types:Override\") {\n      var name = child.attributes.PartName;\n      if (name.charAt(0) === \"/\") {\n        name = name.substring(1);\n      }\n      overrides[name] = child.attributes.ContentType;\n    }\n  });\n  return contentTypes(overrides, extensionDefaults);\n}\nfunction contentTypes(overrides, extensionDefaults) {\n  return {\n    findContentType: function (path) {\n      var overrideContentType = overrides[path];\n      if (overrideContentType) {\n        return overrideContentType;\n      } else {\n        var pathParts = path.split(\".\");\n        var extension = pathParts[pathParts.length - 1];\n        if (extensionDefaults.hasOwnProperty(extension)) {\n          return extensionDefaults[extension];\n        } else {\n          var fallback = fallbackContentTypes[extension.toLowerCase()];\n          if (fallback) {\n            return \"image/\" + fallback;\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}