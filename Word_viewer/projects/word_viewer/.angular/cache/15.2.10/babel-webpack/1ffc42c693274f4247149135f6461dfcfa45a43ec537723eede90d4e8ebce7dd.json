{"ast":null,"code":"var _ = require(\"underscore\");\nexports.Element = Element;\nexports.element = function (name, attributes, children) {\n  return new Element(name, attributes, children);\n};\nexports.text = function (value) {\n  return {\n    type: \"text\",\n    value: value\n  };\n};\nvar emptyElement = exports.emptyElement = {\n  first: function () {\n    return null;\n  },\n  firstOrEmpty: function () {\n    return emptyElement;\n  },\n  attributes: {},\n  children: []\n};\nfunction Element(name, attributes, children) {\n  this.type = \"element\";\n  this.name = name;\n  this.attributes = attributes || {};\n  this.children = children || [];\n}\nElement.prototype.first = function (name) {\n  return _.find(this.children, function (child) {\n    return child.name === name;\n  });\n};\nElement.prototype.firstOrEmpty = function (name) {\n  return this.first(name) || emptyElement;\n};\nElement.prototype.getElementsByTagName = function (name) {\n  var elements = _.filter(this.children, function (child) {\n    return child.name === name;\n  });\n  return toElementList(elements);\n};\nElement.prototype.text = function () {\n  if (this.children.length === 0) {\n    return \"\";\n  } else if (this.children.length !== 1 || this.children[0].type !== \"text\") {\n    throw new Error(\"Not implemented\");\n  }\n  return this.children[0].value;\n};\nvar elementListPrototype = {\n  getElementsByTagName: function (name) {\n    return toElementList(_.flatten(this.map(function (element) {\n      return element.getElementsByTagName(name);\n    }, true)));\n  }\n};\nfunction toElementList(array) {\n  return _.extend(array, elementListPrototype);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}