{"ast":null,"code":"exports.read = read;\nexports._findPartPaths = findPartPaths;\nvar promises = require(\"../promises\");\nvar documents = require(\"../documents\");\nvar Result = require(\"../results\").Result;\nvar zipfile = require(\"../zipfile\");\nvar readXmlFromZipFile = require(\"./office-xml-reader\").readXmlFromZipFile;\nvar createBodyReader = require(\"./body-reader\").createBodyReader;\nvar DocumentXmlReader = require(\"./document-xml-reader\").DocumentXmlReader;\nvar relationshipsReader = require(\"./relationships-reader\");\nvar contentTypesReader = require(\"./content-types-reader\");\nvar numberingXml = require(\"./numbering-xml\");\nvar stylesReader = require(\"./styles-reader\");\nvar notesReader = require(\"./notes-reader\");\nvar commentsReader = require(\"./comments-reader\");\nvar Files = require(\"./files\").Files;\nfunction read(docxFile, input) {\n  input = input || {};\n  return promises.props({\n    contentTypes: readContentTypesFromZipFile(docxFile),\n    partPaths: findPartPaths(docxFile),\n    docxFile: docxFile,\n    files: input.path ? Files.relativeToFile(input.path) : new Files(null)\n  }).also(function (result) {\n    return {\n      styles: readStylesFromZipFile(docxFile, result.partPaths.styles)\n    };\n  }).also(function (result) {\n    return {\n      numbering: readNumberingFromZipFile(docxFile, result.partPaths.numbering, result.styles)\n    };\n  }).also(function (result) {\n    return {\n      footnotes: readXmlFileWithBody(result.partPaths.footnotes, result, function (bodyReader, xml) {\n        if (xml) {\n          return notesReader.createFootnotesReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      }),\n      endnotes: readXmlFileWithBody(result.partPaths.endnotes, result, function (bodyReader, xml) {\n        if (xml) {\n          return notesReader.createEndnotesReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      }),\n      comments: readXmlFileWithBody(result.partPaths.comments, result, function (bodyReader, xml) {\n        if (xml) {\n          return commentsReader.createCommentsReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      })\n    };\n  }).also(function (result) {\n    return {\n      notes: result.footnotes.flatMap(function (footnotes) {\n        return result.endnotes.map(function (endnotes) {\n          return new documents.Notes(footnotes.concat(endnotes));\n        });\n      })\n    };\n  }).then(function (result) {\n    return readXmlFileWithBody(result.partPaths.mainDocument, result, function (bodyReader, xml) {\n      return result.notes.flatMap(function (notes) {\n        return result.comments.flatMap(function (comments) {\n          var reader = new DocumentXmlReader({\n            bodyReader: bodyReader,\n            notes: notes,\n            comments: comments\n          });\n          return reader.convertXmlToDocument(xml);\n        });\n      });\n    });\n  });\n}\nfunction findPartPaths(docxFile) {\n  return readPackageRelationships(docxFile).then(function (packageRelationships) {\n    var mainDocumentPath = findPartPath({\n      docxFile: docxFile,\n      relationships: packageRelationships,\n      relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n      basePath: \"\",\n      fallbackPath: \"word/document.xml\"\n    });\n    if (!docxFile.exists(mainDocumentPath)) {\n      throw new Error(\"Could not find main document part. Are you sure this is a valid .docx file?\");\n    }\n    return xmlFileReader({\n      filename: relationshipsFilename(mainDocumentPath),\n      readElement: relationshipsReader.readRelationships,\n      defaultValue: relationshipsReader.defaultValue\n    })(docxFile).then(function (documentRelationships) {\n      function findPartRelatedToMainDocument(name) {\n        return findPartPath({\n          docxFile: docxFile,\n          relationships: documentRelationships,\n          relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\" + name,\n          basePath: zipfile.splitPath(mainDocumentPath).dirname,\n          fallbackPath: \"word/\" + name + \".xml\"\n        });\n      }\n      return {\n        mainDocument: mainDocumentPath,\n        comments: findPartRelatedToMainDocument(\"comments\"),\n        endnotes: findPartRelatedToMainDocument(\"endnotes\"),\n        footnotes: findPartRelatedToMainDocument(\"footnotes\"),\n        numbering: findPartRelatedToMainDocument(\"numbering\"),\n        styles: findPartRelatedToMainDocument(\"styles\")\n      };\n    });\n  });\n}\nfunction findPartPath(options) {\n  var docxFile = options.docxFile;\n  var relationships = options.relationships;\n  var relationshipType = options.relationshipType;\n  var basePath = options.basePath;\n  var fallbackPath = options.fallbackPath;\n  var targets = relationships.findTargetsByType(relationshipType);\n  var normalisedTargets = targets.map(function (target) {\n    return stripPrefix(zipfile.joinPath(basePath, target), \"/\");\n  });\n  var validTargets = normalisedTargets.filter(function (target) {\n    return docxFile.exists(target);\n  });\n  if (validTargets.length === 0) {\n    return fallbackPath;\n  } else {\n    return validTargets[0];\n  }\n}\nfunction stripPrefix(value, prefix) {\n  if (value.substring(0, prefix.length) === prefix) {\n    return value.substring(prefix.length);\n  } else {\n    return value;\n  }\n}\nfunction xmlFileReader(options) {\n  return function (zipFile) {\n    return readXmlFromZipFile(zipFile, options.filename).then(function (element) {\n      return element ? options.readElement(element) : options.defaultValue;\n    });\n  };\n}\nfunction readXmlFileWithBody(filename, options, func) {\n  var readRelationshipsFromZipFile = xmlFileReader({\n    filename: relationshipsFilename(filename),\n    readElement: relationshipsReader.readRelationships,\n    defaultValue: relationshipsReader.defaultValue\n  });\n  return readRelationshipsFromZipFile(options.docxFile).then(function (relationships) {\n    var bodyReader = new createBodyReader({\n      relationships: relationships,\n      contentTypes: options.contentTypes,\n      docxFile: options.docxFile,\n      numbering: options.numbering,\n      styles: options.styles,\n      files: options.files\n    });\n    return readXmlFromZipFile(options.docxFile, filename).then(function (xml) {\n      return func(bodyReader, xml);\n    });\n  });\n}\nfunction relationshipsFilename(filename) {\n  var split = zipfile.splitPath(filename);\n  return zipfile.joinPath(split.dirname, \"_rels\", split.basename + \".rels\");\n}\nvar readContentTypesFromZipFile = xmlFileReader({\n  filename: \"[Content_Types].xml\",\n  readElement: contentTypesReader.readContentTypesFromXml,\n  defaultValue: contentTypesReader.defaultContentTypes\n});\nfunction readNumberingFromZipFile(zipFile, path, styles) {\n  return xmlFileReader({\n    filename: path,\n    readElement: function (element) {\n      return numberingXml.readNumberingXml(element, {\n        styles: styles\n      });\n    },\n    defaultValue: numberingXml.defaultNumbering\n  })(zipFile);\n}\nfunction readStylesFromZipFile(zipFile, path) {\n  return xmlFileReader({\n    filename: path,\n    readElement: stylesReader.readStylesXml,\n    defaultValue: stylesReader.defaultStyles\n  })(zipFile);\n}\nvar readPackageRelationships = xmlFileReader({\n  filename: \"_rels/.rels\",\n  readElement: relationshipsReader.readRelationships,\n  defaultValue: relationshipsReader.defaultValue\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}