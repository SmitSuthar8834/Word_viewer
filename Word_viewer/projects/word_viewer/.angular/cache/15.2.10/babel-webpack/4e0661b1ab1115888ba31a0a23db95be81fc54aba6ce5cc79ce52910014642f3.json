{"ast":null,"code":"var _ = require(\"underscore\");\nvar promises = require(\"../promises\");\nvar xml = require(\"../xml\");\nexports.writeStyleMap = writeStyleMap;\nexports.readStyleMap = readStyleMap;\nvar schema = \"http://schemas.zwobble.org/mammoth/style-map\";\nvar styleMapPath = \"mammoth/style-map\";\nvar styleMapAbsolutePath = \"/\" + styleMapPath;\nfunction writeStyleMap(docxFile, styleMap) {\n  docxFile.write(styleMapPath, styleMap);\n  return updateRelationships(docxFile).then(function () {\n    return updateContentTypes(docxFile);\n  });\n}\nfunction updateRelationships(docxFile) {\n  var path = \"word/_rels/document.xml.rels\";\n  var relationshipsUri = \"http://schemas.openxmlformats.org/package/2006/relationships\";\n  var relationshipElementName = \"{\" + relationshipsUri + \"}Relationship\";\n  return docxFile.read(path, \"utf8\").then(xml.readString).then(function (relationshipsContainer) {\n    var relationships = relationshipsContainer.children;\n    addOrUpdateElement(relationships, relationshipElementName, \"Id\", {\n      \"Id\": \"rMammothStyleMap\",\n      \"Type\": schema,\n      \"Target\": styleMapAbsolutePath\n    });\n    var namespaces = {\n      \"\": relationshipsUri\n    };\n    return docxFile.write(path, xml.writeString(relationshipsContainer, namespaces));\n  });\n}\nfunction updateContentTypes(docxFile) {\n  var path = \"[Content_Types].xml\";\n  var contentTypesUri = \"http://schemas.openxmlformats.org/package/2006/content-types\";\n  var overrideName = \"{\" + contentTypesUri + \"}Override\";\n  return docxFile.read(path, \"utf8\").then(xml.readString).then(function (typesElement) {\n    var children = typesElement.children;\n    addOrUpdateElement(children, overrideName, \"PartName\", {\n      \"PartName\": styleMapAbsolutePath,\n      \"ContentType\": \"text/prs.mammoth.style-map\"\n    });\n    var namespaces = {\n      \"\": contentTypesUri\n    };\n    return docxFile.write(path, xml.writeString(typesElement, namespaces));\n  });\n}\nfunction addOrUpdateElement(elements, name, identifyingAttribute, attributes) {\n  var existingElement = _.find(elements, function (element) {\n    return element.name === name && element.attributes[identifyingAttribute] === attributes[identifyingAttribute];\n  });\n  if (existingElement) {\n    existingElement.attributes = attributes;\n  } else {\n    elements.push(xml.element(name, attributes));\n  }\n}\nfunction readStyleMap(docxFile) {\n  if (docxFile.exists(styleMapPath)) {\n    return docxFile.read(styleMapPath, \"utf8\");\n  } else {\n    return promises.resolve(null);\n  }\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}