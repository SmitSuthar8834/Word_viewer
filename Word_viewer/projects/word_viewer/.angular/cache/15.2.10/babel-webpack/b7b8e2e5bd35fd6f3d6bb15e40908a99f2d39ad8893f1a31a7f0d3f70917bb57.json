{"ast":null,"code":"\"use strict\";\n\nvar cr = Object.create;\nif (cr) {\n  var callerCache = cr(null);\n  var getterCache = cr(null);\n  callerCache[\" size\"] = getterCache[\" size\"] = 0;\n}\nmodule.exports = function (Promise) {\n  var util = require(\"./util\");\n  var canEvaluate = util.canEvaluate;\n  var isIdentifier = util.isIdentifier;\n  var getMethodCaller;\n  var getGetter;\n  if (!false) {\n    var makeMethodCaller = function (methodName) {\n      return new Function(\"ensureMethod\", \"                                    \\n\\\n        return function(obj) {                                               \\n\\\n            'use strict'                                                     \\n\\\n            var len = this.length;                                           \\n\\\n            ensureMethod(obj, 'methodName');                                 \\n\\\n            switch(len) {                                                    \\n\\\n                case 1: return obj.methodName(this[0]);                      \\n\\\n                case 2: return obj.methodName(this[0], this[1]);             \\n\\\n                case 3: return obj.methodName(this[0], this[1], this[2]);    \\n\\\n                case 0: return obj.methodName();                             \\n\\\n                default:                                                     \\n\\\n                    return obj.methodName.apply(obj, this);                  \\n\\\n            }                                                                \\n\\\n        };                                                                   \\n\\\n        \".replace(/methodName/g, methodName))(ensureMethod);\n    };\n    var makeGetter = function (propertyName) {\n      return new Function(\"obj\", \"                                             \\n\\\n        'use strict';                                                        \\n\\\n        return obj.propertyName;                                             \\n\\\n        \".replace(\"propertyName\", propertyName));\n    };\n    var getCompiled = function (name, compiler, cache) {\n      var ret = cache[name];\n      if (typeof ret !== \"function\") {\n        if (!isIdentifier(name)) {\n          return null;\n        }\n        ret = compiler(name);\n        cache[name] = ret;\n        cache[\" size\"]++;\n        if (cache[\" size\"] > 512) {\n          var keys = Object.keys(cache);\n          for (var i = 0; i < 256; ++i) delete cache[keys[i]];\n          cache[\" size\"] = keys.length - 256;\n        }\n      }\n      return ret;\n    };\n    getMethodCaller = function (name) {\n      return getCompiled(name, makeMethodCaller, callerCache);\n    };\n    getGetter = function (name) {\n      return getCompiled(name, makeGetter, getterCache);\n    };\n  }\n  function ensureMethod(obj, methodName) {\n    var fn;\n    if (obj != null) fn = obj[methodName];\n    if (typeof fn !== \"function\") {\n      var message = \"Object \" + util.classString(obj) + \" has no method '\" + util.toString(methodName) + \"'\";\n      throw new Promise.TypeError(message);\n    }\n    return fn;\n  }\n  function caller(obj) {\n    var methodName = this.pop();\n    var fn = ensureMethod(obj, methodName);\n    return fn.apply(obj, this);\n  }\n  Promise.prototype.call = function (methodName) {\n    var $_len = arguments.length;\n    var args = new Array(Math.max($_len - 1, 0));\n    for (var $_i = 1; $_i < $_len; ++$_i) {\n      args[$_i - 1] = arguments[$_i];\n    }\n    ;\n    if (!false) {\n      if (canEvaluate) {\n        var maybeCaller = getMethodCaller(methodName);\n        if (maybeCaller !== null) {\n          return this._then(maybeCaller, undefined, undefined, args, undefined);\n        }\n      }\n    }\n    args.push(methodName);\n    return this._then(caller, undefined, undefined, args, undefined);\n  };\n  function namedGetter(obj) {\n    return obj[this];\n  }\n  function indexedGetter(obj) {\n    var index = +this;\n    if (index < 0) index = Math.max(0, index + obj.length);\n    return obj[index];\n  }\n  Promise.prototype.get = function (propertyName) {\n    var isIndex = typeof propertyName === \"number\";\n    var getter;\n    if (!isIndex) {\n      if (canEvaluate) {\n        var maybeGetter = getGetter(propertyName);\n        getter = maybeGetter !== null ? maybeGetter : namedGetter;\n      } else {\n        getter = namedGetter;\n      }\n    } else {\n      getter = indexedGetter;\n    }\n    return this._then(getter, undefined, undefined, propertyName, undefined);\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}