{"ast":null,"code":"\"use strict\";\n\nvar util = require(\"./util\");\nvar maybeWrapAsError = util.maybeWrapAsError;\nvar errors = require(\"./errors\");\nvar OperationalError = errors.OperationalError;\nvar es5 = require(\"./es5\");\nfunction isUntypedError(obj) {\n  return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype;\n}\nvar rErrorKey = /^(?:name|message|stack|cause)$/;\nfunction wrapAsOperationalError(obj) {\n  var ret;\n  if (isUntypedError(obj)) {\n    ret = new OperationalError(obj);\n    ret.name = obj.name;\n    ret.message = obj.message;\n    ret.stack = obj.stack;\n    var keys = es5.keys(obj);\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n      if (!rErrorKey.test(key)) {\n        ret[key] = obj[key];\n      }\n    }\n    return ret;\n  }\n  util.markAsOriginatingFromRejection(obj);\n  return obj;\n}\nfunction nodebackForPromise(promise, multiArgs) {\n  return function (err, value) {\n    if (promise === null) return;\n    if (err) {\n      var wrapped = wrapAsOperationalError(maybeWrapAsError(err));\n      promise._attachExtraTrace(wrapped);\n      promise._reject(wrapped);\n    } else if (!multiArgs) {\n      promise._fulfill(value);\n    } else {\n      var $_len = arguments.length;\n      var args = new Array(Math.max($_len - 1, 0));\n      for (var $_i = 1; $_i < $_len; ++$_i) {\n        args[$_i - 1] = arguments[$_i];\n      }\n      ;\n      promise._fulfill(args);\n    }\n    promise = null;\n  };\n}\nmodule.exports = nodebackForPromise;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}