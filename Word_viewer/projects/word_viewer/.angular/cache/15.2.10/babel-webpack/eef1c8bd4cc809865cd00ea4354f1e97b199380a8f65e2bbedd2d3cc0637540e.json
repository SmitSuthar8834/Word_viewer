{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (Promise) {\n  var util = require(\"./util\");\n  var async = Promise._async;\n  var tryCatch = util.tryCatch;\n  var errorObj = util.errorObj;\n  function spreadAdapter(val, nodeback) {\n    var promise = this;\n    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);\n    var ret = tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));\n    if (ret === errorObj) {\n      async.throwLater(ret.e);\n    }\n  }\n  function successAdapter(val, nodeback) {\n    var promise = this;\n    var receiver = promise._boundValue();\n    var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);\n    if (ret === errorObj) {\n      async.throwLater(ret.e);\n    }\n  }\n  function errorAdapter(reason, nodeback) {\n    var promise = this;\n    if (!reason) {\n      var newReason = new Error(reason + \"\");\n      newReason.cause = reason;\n      reason = newReason;\n    }\n    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);\n    if (ret === errorObj) {\n      async.throwLater(ret.e);\n    }\n  }\n  Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback, options) {\n    if (typeof nodeback == \"function\") {\n      var adapter = successAdapter;\n      if (options !== undefined && Object(options).spread) {\n        adapter = spreadAdapter;\n      }\n      this._then(adapter, errorAdapter, undefined, this, nodeback);\n    }\n    return this;\n  };\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}