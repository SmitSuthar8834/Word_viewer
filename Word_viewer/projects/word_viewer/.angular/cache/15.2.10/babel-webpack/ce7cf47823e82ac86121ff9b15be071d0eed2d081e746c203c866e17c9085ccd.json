{"ast":null,"code":"var _ = require(\"underscore\");\nvar html = require(\"../html\");\nexports.topLevelElement = topLevelElement;\nexports.elements = elements;\nexports.element = element;\nfunction topLevelElement(tagName, attributes) {\n  return elements([element(tagName, attributes, {\n    fresh: true\n  })]);\n}\nfunction elements(elementStyles) {\n  return new HtmlPath(elementStyles.map(function (elementStyle) {\n    if (_.isString(elementStyle)) {\n      return element(elementStyle);\n    } else {\n      return elementStyle;\n    }\n  }));\n}\nfunction HtmlPath(elements) {\n  this._elements = elements;\n}\nHtmlPath.prototype.wrap = function wrap(children) {\n  var result = children();\n  for (var index = this._elements.length - 1; index >= 0; index--) {\n    result = this._elements[index].wrapNodes(result);\n  }\n  return result;\n};\nfunction element(tagName, attributes, options) {\n  options = options || {};\n  return new Element(tagName, attributes, options);\n}\nfunction Element(tagName, attributes, options) {\n  var tagNames = {};\n  if (_.isArray(tagName)) {\n    tagName.forEach(function (tagName) {\n      tagNames[tagName] = true;\n    });\n    tagName = tagName[0];\n  } else {\n    tagNames[tagName] = true;\n  }\n  this.tagName = tagName;\n  this.tagNames = tagNames;\n  this.attributes = attributes || {};\n  this.fresh = options.fresh;\n  this.separator = options.separator;\n}\nElement.prototype.matchesElement = function (element) {\n  return this.tagNames[element.tagName] && _.isEqual(this.attributes || {}, element.attributes || {});\n};\nElement.prototype.wrap = function wrap(generateNodes) {\n  return this.wrapNodes(generateNodes());\n};\nElement.prototype.wrapNodes = function wrapNodes(nodes) {\n  return [html.elementWithTag(this, nodes)];\n};\nexports.empty = elements([]);\nexports.ignore = {\n  wrap: function () {\n    return [];\n  }\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}