{"ast":null,"code":"var _ = require(\"underscore\");\nexports.writer = writer;\nfunction writer(options) {\n  options = options || {};\n  if (options.prettyPrint) {\n    return prettyWriter();\n  } else {\n    return simpleWriter();\n  }\n}\nvar indentedElements = {\n  div: true,\n  p: true,\n  ul: true,\n  li: true\n};\nfunction prettyWriter() {\n  var indentationLevel = 0;\n  var indentation = \"  \";\n  var stack = [];\n  var start = true;\n  var inText = false;\n  var writer = simpleWriter();\n  function open(tagName, attributes) {\n    if (indentedElements[tagName]) {\n      indent();\n    }\n    stack.push(tagName);\n    writer.open(tagName, attributes);\n    if (indentedElements[tagName]) {\n      indentationLevel++;\n    }\n    start = false;\n  }\n  function close(tagName) {\n    if (indentedElements[tagName]) {\n      indentationLevel--;\n      indent();\n    }\n    stack.pop();\n    writer.close(tagName);\n  }\n  function text(value) {\n    startText();\n    var text = isInPre() ? value : value.replace(\"\\n\", \"\\n\" + indentation);\n    writer.text(text);\n  }\n  function selfClosing(tagName, attributes) {\n    indent();\n    writer.selfClosing(tagName, attributes);\n  }\n  function insideIndentedElement() {\n    return stack.length === 0 || indentedElements[stack[stack.length - 1]];\n  }\n  function startText() {\n    if (!inText) {\n      indent();\n      inText = true;\n    }\n  }\n  function indent() {\n    inText = false;\n    if (!start && insideIndentedElement() && !isInPre()) {\n      writer._append(\"\\n\");\n      for (var i = 0; i < indentationLevel; i++) {\n        writer._append(indentation);\n      }\n    }\n  }\n  function isInPre() {\n    return _.some(stack, function (tagName) {\n      return tagName === \"pre\";\n    });\n  }\n  return {\n    asString: writer.asString,\n    open: open,\n    close: close,\n    text: text,\n    selfClosing: selfClosing\n  };\n}\nfunction simpleWriter() {\n  var fragments = [];\n  function open(tagName, attributes) {\n    var attributeString = generateAttributeString(attributes);\n    fragments.push(\"<\" + tagName + attributeString + \">\");\n  }\n  function close(tagName) {\n    fragments.push(\"</\" + tagName + \">\");\n  }\n  function selfClosing(tagName, attributes) {\n    var attributeString = generateAttributeString(attributes);\n    fragments.push(\"<\" + tagName + attributeString + \" />\");\n  }\n  function generateAttributeString(attributes) {\n    return _.map(attributes, function (value, key) {\n      return \" \" + key + '=\"' + escapeHtmlAttribute(value) + '\"';\n    }).join(\"\");\n  }\n  function text(value) {\n    fragments.push(escapeHtmlText(value));\n  }\n  function append(html) {\n    fragments.push(html);\n  }\n  function asString() {\n    return fragments.join(\"\");\n  }\n  return {\n    asString: asString,\n    open: open,\n    close: close,\n    text: text,\n    selfClosing: selfClosing,\n    _append: append\n  };\n}\nfunction escapeHtmlText(value) {\n  return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nfunction escapeHtmlAttribute(value) {\n  return value.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}