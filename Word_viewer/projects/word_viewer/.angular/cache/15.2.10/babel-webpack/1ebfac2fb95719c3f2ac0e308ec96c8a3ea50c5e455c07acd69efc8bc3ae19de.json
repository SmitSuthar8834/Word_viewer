{"ast":null,"code":"var promises = require(\"../promises\");\nvar _ = require(\"underscore\");\nvar xmldom = require(\"./xmldom\");\nvar nodes = require(\"./nodes\");\nvar Element = nodes.Element;\nexports.readString = readString;\nvar Node = xmldom.Node;\nfunction readString(xmlString, namespaceMap) {\n  namespaceMap = namespaceMap || {};\n  try {\n    var document = xmldom.parseFromString(xmlString, \"text/xml\");\n  } catch (error) {\n    return promises.reject(error);\n  }\n  if (document.documentElement.tagName === \"parsererror\") {\n    return promises.resolve(new Error(document.documentElement.textContent));\n  }\n  function convertNode(node) {\n    switch (node.nodeType) {\n      case Node.ELEMENT_NODE:\n        return convertElement(node);\n      case Node.TEXT_NODE:\n        return nodes.text(node.nodeValue);\n    }\n  }\n  function convertElement(element) {\n    var convertedName = convertName(element);\n    var convertedChildren = [];\n    _.forEach(element.childNodes, function (childNode) {\n      var convertedNode = convertNode(childNode);\n      if (convertedNode) {\n        convertedChildren.push(convertedNode);\n      }\n    });\n    var convertedAttributes = {};\n    _.forEach(element.attributes, function (attribute) {\n      convertedAttributes[convertName(attribute)] = attribute.value;\n    });\n    return new Element(convertedName, convertedAttributes, convertedChildren);\n  }\n  function convertName(node) {\n    if (node.namespaceURI) {\n      var mappedPrefix = namespaceMap[node.namespaceURI];\n      var prefix;\n      if (mappedPrefix) {\n        prefix = mappedPrefix + \":\";\n      } else {\n        prefix = \"{\" + node.namespaceURI + \"}\";\n      }\n      return prefix + node.localName;\n    } else {\n      return node.localName;\n    }\n  }\n  return promises.resolve(convertNode(document.documentElement));\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}