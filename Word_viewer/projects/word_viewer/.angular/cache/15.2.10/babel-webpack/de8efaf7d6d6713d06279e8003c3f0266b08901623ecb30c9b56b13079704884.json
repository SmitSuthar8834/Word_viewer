{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (Promise, tryConvertToPromise) {\n  var util = require(\"./util\");\n  var CancellationError = Promise.CancellationError;\n  var errorObj = util.errorObj;\n  function PassThroughHandlerContext(promise, type, handler) {\n    this.promise = promise;\n    this.type = type;\n    this.handler = handler;\n    this.called = false;\n    this.cancelPromise = null;\n  }\n  PassThroughHandlerContext.prototype.isFinallyHandler = function () {\n    return this.type === 0;\n  };\n  function FinallyHandlerCancelReaction(finallyHandler) {\n    this.finallyHandler = finallyHandler;\n  }\n  FinallyHandlerCancelReaction.prototype._resultCancelled = function () {\n    checkCancel(this.finallyHandler);\n  };\n  function checkCancel(ctx, reason) {\n    if (ctx.cancelPromise != null) {\n      if (arguments.length > 1) {\n        ctx.cancelPromise._reject(reason);\n      } else {\n        ctx.cancelPromise._cancel();\n      }\n      ctx.cancelPromise = null;\n      return true;\n    }\n    return false;\n  }\n  function succeed() {\n    return finallyHandler.call(this, this.promise._target()._settledValue());\n  }\n  function fail(reason) {\n    if (checkCancel(this, reason)) return;\n    errorObj.e = reason;\n    return errorObj;\n  }\n  function finallyHandler(reasonOrValue) {\n    var promise = this.promise;\n    var handler = this.handler;\n    if (!this.called) {\n      this.called = true;\n      var ret = this.isFinallyHandler() ? handler.call(promise._boundValue()) : handler.call(promise._boundValue(), reasonOrValue);\n      if (ret !== undefined) {\n        promise._setReturnedNonUndefined();\n        var maybePromise = tryConvertToPromise(ret, promise);\n        if (maybePromise instanceof Promise) {\n          if (this.cancelPromise != null) {\n            if (maybePromise._isCancelled()) {\n              var reason = new CancellationError(\"late cancellation observer\");\n              promise._attachExtraTrace(reason);\n              errorObj.e = reason;\n              return errorObj;\n            } else if (maybePromise.isPending()) {\n              maybePromise._attachCancellationCallback(new FinallyHandlerCancelReaction(this));\n            }\n          }\n          return maybePromise._then(succeed, fail, undefined, this, undefined);\n        }\n      }\n    }\n    if (promise.isRejected()) {\n      checkCancel(this);\n      errorObj.e = reasonOrValue;\n      return errorObj;\n    } else {\n      checkCancel(this);\n      return reasonOrValue;\n    }\n  }\n  Promise.prototype._passThrough = function (handler, type, success, fail) {\n    if (typeof handler !== \"function\") return this.then();\n    return this._then(success, fail, undefined, new PassThroughHandlerContext(this, type, handler), undefined);\n  };\n  Promise.prototype.lastly = Promise.prototype[\"finally\"] = function (handler) {\n    return this._passThrough(handler, 0, finallyHandler, finallyHandler);\n  };\n  Promise.prototype.tap = function (handler) {\n    return this._passThrough(handler, 1, finallyHandler);\n  };\n  return PassThroughHandlerContext;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}