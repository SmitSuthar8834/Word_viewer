{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (Promise, PromiseArray, apiRejection) {\n  var util = require(\"./util\");\n  var RangeError = require(\"./errors\").RangeError;\n  var AggregateError = require(\"./errors\").AggregateError;\n  var isArray = util.isArray;\n  var CANCELLATION = {};\n  function SomePromiseArray(values) {\n    this.constructor$(values);\n    this._howMany = 0;\n    this._unwrap = false;\n    this._initialized = false;\n  }\n  util.inherits(SomePromiseArray, PromiseArray);\n  SomePromiseArray.prototype._init = function () {\n    if (!this._initialized) {\n      return;\n    }\n    if (this._howMany === 0) {\n      this._resolve([]);\n      return;\n    }\n    this._init$(undefined, -5);\n    var isArrayResolved = isArray(this._values);\n    if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {\n      this._reject(this._getRangeError(this.length()));\n    }\n  };\n  SomePromiseArray.prototype.init = function () {\n    this._initialized = true;\n    this._init();\n  };\n  SomePromiseArray.prototype.setUnwrap = function () {\n    this._unwrap = true;\n  };\n  SomePromiseArray.prototype.howMany = function () {\n    return this._howMany;\n  };\n  SomePromiseArray.prototype.setHowMany = function (count) {\n    this._howMany = count;\n  };\n  SomePromiseArray.prototype._promiseFulfilled = function (value) {\n    this._addFulfilled(value);\n    if (this._fulfilled() === this.howMany()) {\n      this._values.length = this.howMany();\n      if (this.howMany() === 1 && this._unwrap) {\n        this._resolve(this._values[0]);\n      } else {\n        this._resolve(this._values);\n      }\n      return true;\n    }\n    return false;\n  };\n  SomePromiseArray.prototype._promiseRejected = function (reason) {\n    this._addRejected(reason);\n    return this._checkOutcome();\n  };\n  SomePromiseArray.prototype._promiseCancelled = function () {\n    if (this._values instanceof Promise || this._values == null) {\n      return this._cancel();\n    }\n    this._addRejected(CANCELLATION);\n    return this._checkOutcome();\n  };\n  SomePromiseArray.prototype._checkOutcome = function () {\n    if (this.howMany() > this._canPossiblyFulfill()) {\n      var e = new AggregateError();\n      for (var i = this.length(); i < this._values.length; ++i) {\n        if (this._values[i] !== CANCELLATION) {\n          e.push(this._values[i]);\n        }\n      }\n      if (e.length > 0) {\n        this._reject(e);\n      } else {\n        this._cancel();\n      }\n      return true;\n    }\n    return false;\n  };\n  SomePromiseArray.prototype._fulfilled = function () {\n    return this._totalResolved;\n  };\n  SomePromiseArray.prototype._rejected = function () {\n    return this._values.length - this.length();\n  };\n  SomePromiseArray.prototype._addRejected = function (reason) {\n    this._values.push(reason);\n  };\n  SomePromiseArray.prototype._addFulfilled = function (value) {\n    this._values[this._totalResolved++] = value;\n  };\n  SomePromiseArray.prototype._canPossiblyFulfill = function () {\n    return this.length() - this._rejected();\n  };\n  SomePromiseArray.prototype._getRangeError = function (count) {\n    var message = \"Input array must contain at least \" + this._howMany + \" items but contains only \" + count + \" items\";\n    return new RangeError(message);\n  };\n  SomePromiseArray.prototype._resolveEmptyArray = function () {\n    this._reject(this._getRangeError(0));\n  };\n  function some(promises, howMany) {\n    if ((howMany | 0) !== howMany || howMany < 0) {\n      return apiRejection(\"expecting a positive integer\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    var ret = new SomePromiseArray(promises);\n    var promise = ret.promise();\n    ret.setHowMany(howMany);\n    ret.init();\n    return promise;\n  }\n  Promise.some = function (promises, howMany) {\n    return some(promises, howMany);\n  };\n  Promise.prototype.some = function (howMany) {\n    return some(this, howMany);\n  };\n  Promise._SomePromiseArray = SomePromiseArray;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}