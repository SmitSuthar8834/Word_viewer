{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection, Proxyable) {\n  var util = require(\"./util\");\n  var isArray = util.isArray;\n  function toResolutionValue(val) {\n    switch (val) {\n      case -2:\n        return [];\n      case -3:\n        return {};\n    }\n  }\n  function PromiseArray(values) {\n    var promise = this._promise = new Promise(INTERNAL);\n    if (values instanceof Promise) {\n      promise._propagateFrom(values, 3);\n    }\n    promise._setOnCancel(this);\n    this._values = values;\n    this._length = 0;\n    this._totalResolved = 0;\n    this._init(undefined, -2);\n  }\n  util.inherits(PromiseArray, Proxyable);\n  PromiseArray.prototype.length = function () {\n    return this._length;\n  };\n  PromiseArray.prototype.promise = function () {\n    return this._promise;\n  };\n  PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {\n    var values = tryConvertToPromise(this._values, this._promise);\n    if (values instanceof Promise) {\n      values = values._target();\n      var bitField = values._bitField;\n      ;\n      this._values = values;\n      if ((bitField & 50397184) === 0) {\n        this._promise._setAsyncGuaranteed();\n        return values._then(init, this._reject, undefined, this, resolveValueIfEmpty);\n      } else if ((bitField & 33554432) !== 0) {\n        values = values._value();\n      } else if ((bitField & 16777216) !== 0) {\n        return this._reject(values._reason());\n      } else {\n        return this._cancel();\n      }\n    }\n    values = util.asArray(values);\n    if (values === null) {\n      var err = apiRejection(\"expecting an array or an iterable object but got \" + util.classString(values)).reason();\n      this._promise._rejectCallback(err, false);\n      return;\n    }\n    if (values.length === 0) {\n      if (resolveValueIfEmpty === -5) {\n        this._resolveEmptyArray();\n      } else {\n        this._resolve(toResolutionValue(resolveValueIfEmpty));\n      }\n      return;\n    }\n    this._iterate(values);\n  };\n  PromiseArray.prototype._iterate = function (values) {\n    var len = this.getActualLength(values.length);\n    this._length = len;\n    this._values = this.shouldCopyValues() ? new Array(len) : this._values;\n    var result = this._promise;\n    var isResolved = false;\n    var bitField = null;\n    for (var i = 0; i < len; ++i) {\n      var maybePromise = tryConvertToPromise(values[i], result);\n      if (maybePromise instanceof Promise) {\n        maybePromise = maybePromise._target();\n        bitField = maybePromise._bitField;\n      } else {\n        bitField = null;\n      }\n      if (isResolved) {\n        if (bitField !== null) {\n          maybePromise.suppressUnhandledRejections();\n        }\n      } else if (bitField !== null) {\n        if ((bitField & 50397184) === 0) {\n          maybePromise._proxy(this, i);\n          this._values[i] = maybePromise;\n        } else if ((bitField & 33554432) !== 0) {\n          isResolved = this._promiseFulfilled(maybePromise._value(), i);\n        } else if ((bitField & 16777216) !== 0) {\n          isResolved = this._promiseRejected(maybePromise._reason(), i);\n        } else {\n          isResolved = this._promiseCancelled(i);\n        }\n      } else {\n        isResolved = this._promiseFulfilled(maybePromise, i);\n      }\n    }\n    if (!isResolved) result._setAsyncGuaranteed();\n  };\n  PromiseArray.prototype._isResolved = function () {\n    return this._values === null;\n  };\n  PromiseArray.prototype._resolve = function (value) {\n    this._values = null;\n    this._promise._fulfill(value);\n  };\n  PromiseArray.prototype._cancel = function () {\n    if (this._isResolved() || !this._promise._isCancellable()) return;\n    this._values = null;\n    this._promise._cancel();\n  };\n  PromiseArray.prototype._reject = function (reason) {\n    this._values = null;\n    this._promise._rejectCallback(reason, false);\n  };\n  PromiseArray.prototype._promiseFulfilled = function (value, index) {\n    this._values[index] = value;\n    var totalResolved = ++this._totalResolved;\n    if (totalResolved >= this._length) {\n      this._resolve(this._values);\n      return true;\n    }\n    return false;\n  };\n  PromiseArray.prototype._promiseCancelled = function () {\n    this._cancel();\n    return true;\n  };\n  PromiseArray.prototype._promiseRejected = function (reason) {\n    this._totalResolved++;\n    this._reject(reason);\n    return true;\n  };\n  PromiseArray.prototype._resultCancelled = function () {\n    if (this._isResolved()) return;\n    var values = this._values;\n    this._cancel();\n    if (values instanceof Promise) {\n      values.cancel();\n    } else {\n      for (var i = 0; i < values.length; ++i) {\n        if (values[i] instanceof Promise) {\n          values[i].cancel();\n        }\n      }\n    }\n  };\n  PromiseArray.prototype.shouldCopyValues = function () {\n    return true;\n  };\n  PromiseArray.prototype.getActualLength = function (len) {\n    return len;\n  };\n  return PromiseArray;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}