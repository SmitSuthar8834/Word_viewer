import { ɵAbstractType as AbstractType } from '@creatio/base';
import { ɵAggregationEval as AggregationEval } from '@creatio/base';
import { ɵAggregationEvalType as AggregationEvalType } from '@creatio/base';
import { ɵAggregationFunction as AggregationFunction } from '@creatio/base';
import { ɵAggregationFunctionColumn as AggregationFunctionColumn } from '@creatio/base';
import { ɵAggregationFunctionExpression as AggregationFunctionExpression } from '@creatio/base';
import { ɵAggregationFunctionExpressionConfig as AggregationFunctionExpressionConfig } from '@creatio/base';
import { ɵAggregationSubQueryColumn as AggregationSubQueryColumn } from '@creatio/base';
import { ɵAggregationSubQueryExpression as AggregationSubQueryExpression } from '@creatio/base';
import { ɵAggregationType as AggregationType } from '@creatio/base';
import { ɵArgumentEmptyException as ArgumentEmptyException } from '@creatio/base';
import { ɵArgumentFunctionExpression as ArgumentFunctionExpression } from '@creatio/base';
import { ɵArgumentFunctionExpressionConfig as ArgumentFunctionExpressionConfig } from '@creatio/base';
import { ɵArgumentOutOfRangeException as ArgumentOutOfRangeException } from '@creatio/base';
import { ɵArithmeticExpression as ArithmeticExpression } from '@creatio/base';
import { ɵArithmeticExpressionConfig as ArithmeticExpressionConfig } from '@creatio/base';
import { ɵArithmeticOperation as ArithmeticOperation } from '@creatio/base';
import { ɵArithmeticQueryColumn as ArithmeticQueryColumn } from '@creatio/base';
import { ɵBaseDataSourceParameter as BaseDataSourceParameter } from '@creatio/base';
import { ɵBaseExpression as BaseExpression } from '@creatio/base';
import { ɵBaseExpressionParser as BaseExpressionParser } from '@creatio/base';
import { ɵBaseFilter as BaseFilter } from '@creatio/base';
import { ɵBaseFilterableQuery as BaseFilterableQuery } from '@creatio/base';
import { ɵBaseFilterParser as BaseFilterParser } from '@creatio/base';
import { ɵBaseModel as BaseModel } from '@creatio/base';
import { ɵBaseQuery as BaseQuery } from '@creatio/base';
import { ɵBaseQueryColumn as BaseQueryColumn } from '@creatio/base';
import { ɵBaseRequest as BaseRequest } from '@creatio/base';
import { ɵBetweenFilter as BetweenFilter } from '@creatio/base';
import { ɵColumnExpression as ColumnExpression } from '@creatio/base';
import { ɵColumnExpressionConfig as ColumnExpressionConfig } from '@creatio/base';
import { ɵCompareFilter as CompareFilter } from '@creatio/base';
import { ɵComparisonType as ComparisonType } from '@creatio/base';
import { ɵConditionalValueItem as ConditionalValueItem } from '@creatio/base';
import { ɵDataSchema as DataSchema } from '@creatio/base';
import { ɵDataSchemaAttribute as DataSchemaAttribute } from '@creatio/base';
import { ɵDataSchemaAttributeAggregationConfig as DataSchemaAttributeAggregationConfig } from '@creatio/base';
import { ɵDataSchemaAttributeAggregationFunctionConfig as DataSchemaAttributeAggregationFunctionConfig } from '@creatio/base';
import { ɵDataSchemaAttributeDatePartFunctionConfig as DataSchemaAttributeDatePartFunctionConfig } from '@creatio/base';
import { ɵDataSchemaAttributeFunctionConfig as DataSchemaAttributeFunctionConfig } from '@creatio/base';
import { ɵDataSchemaAttributeType as DataSchemaAttributeType } from '@creatio/base';
import { ɵDataSchemaAttributeUsageType as DataSchemaAttributeUsageType } from '@creatio/base';
import { ɵDataSchemaAttributeValidatorConfig as DataSchemaAttributeValidatorConfig } from '@creatio/base';
import { ɵDataSchemaType as DataSchemaType } from '@creatio/base';
import { ɵDataSchemaValidatorConfig as DataSchemaValidatorConfig } from '@creatio/base';
import { ɵDataSourceAggregationConfig as DataSourceAggregationConfig } from '@creatio/base';
import { ɵDataSourceAggregationFunctionConfig as DataSourceAggregationFunctionConfig } from '@creatio/base';
import { ɵDataSourceAttribute as DataSourceAttribute } from '@creatio/base';
import { ɵDataSourceAttributeType as DataSourceAttributeType } from '@creatio/base';
import { ɵDataSourceCanExecuteOperationPayload as DataSourceCanExecuteOperationPayload } from '@creatio/base';
import { ɵDataSourceCanExecuteOperationResult as DataSourceCanExecuteOperationResult } from '@creatio/base';
import { ɵDataSourceConfig as DataSourceConfig } from '@creatio/base';
import { ɵDataSourceDatePartFunctionConfig as DataSourceDatePartFunctionConfig } from '@creatio/base';
import { ɵDataSourceFunctionConfig as DataSourceFunctionConfig } from '@creatio/base';
import { ɵDataSourceInsertResult as DataSourceInsertResult } from '@creatio/base';
import { ɵDataSourceInstanceConfig as DataSourceInstanceConfig } from '@creatio/base';
import { ɵDataSourcePagingConfig as DataSourcePagingConfig } from '@creatio/base';
import { ɵDataSourceParameter as DataSourceParameter } from '@creatio/base';
import { ɵDataSourceParameterRelationConfig as DataSourceParameterRelationConfig } from '@creatio/base';
import { ɵDataSourceParameters as DataSourceParameters } from '@creatio/base';
import { ɵDataSourceSaveResult as DataSourceSaveResult } from '@creatio/base';
import { ɵDataSourceScope as DataSourceScope } from '@creatio/base';
import { ɵDataSourceSortingConfig as DataSourceSortingConfig } from '@creatio/base';
import { ɵDataValueType as DataValueType } from '@creatio/base';
import { ɵDatePart as DatePart } from '@creatio/base';
import { ɵDatePartFunctionColumn as DatePartFunctionColumn } from '@creatio/base';
import { ɵDatePartFunctionExpression as DatePartFunctionExpression } from '@creatio/base';
import { ɵDatePartFunctionExpressionConfig as DatePartFunctionExpressionConfig } from '@creatio/base';
import { ɵDatePartType as DatePartType } from '@creatio/base';
import { ɵDEFAULT_COLUMN_PLAIN_OBJ as DEFAULT_COLUMN_PLAIN_OBJ } from '@creatio/base';
import { ɵDEFAULT_FILTER_PLAIN_OBJ as DEFAULT_FILTER_PLAIN_OBJ } from '@creatio/base';
import { ɵDefaultValueSchema as DefaultValueSchema } from '@creatio/base';
import { ɵDefaultValueSource as DefaultValueSource } from '@creatio/base';
import { ɵDeleteQuery as DeleteQuery } from '@creatio/base';
import { ɵEMPTY_GUID as EMPTY_GUID } from '@creatio/base';
import { ɵencodeDate as encodeDate } from '@creatio/base';
import { ɵEntityColumnValue as EntityColumnValue } from '@creatio/base';
import { ɵEntityQueryColumn as EntityQueryColumn } from '@creatio/base';
import { ɵEntitySchemaQuery as EntitySchemaQuery } from '@creatio/base';
import { ɵExistsFilter as ExistsFilter } from '@creatio/base';
import { ɵExpressionConfig as ExpressionConfig } from '@creatio/base';
import { ɵExpressionMock as ExpressionMock } from '@creatio/base';
import { ɵExpressionParser as ExpressionParser } from '@creatio/base';
import { ɵExpressionResolver as ExpressionResolver } from '@creatio/base';
import { ɵExpressionType as ExpressionType } from '@creatio/base';
import { ɵFilterGroup as FilterGroup } from '@creatio/base';
import { ɵFilterMock as FilterMock } from '@creatio/base';
import { ɵFilterParser as FilterParser } from '@creatio/base';
import { ɵFilterResolver as FilterResolver } from '@creatio/base';
import { ɵFilterType as FilterType } from '@creatio/base';
import { ɵFunctionExpression as FunctionExpression } from '@creatio/base';
import { ɵFunctionExpressionConfig as FunctionExpressionConfig } from '@creatio/base';
import { ɵFunctionStringType as FunctionStringType } from '@creatio/base';
import { ɵFunctionType as FunctionType } from '@creatio/base';
import { ɵgenerateGuid as generateGuid } from '@creatio/base';
import { ɵgetColumnPlainObj as getColumnPlainObj } from '@creatio/base';
import { ɵgetFilterPlainObj as getFilterPlainObj } from '@creatio/base';
import { ɵGuid as Guid } from '@creatio/base';
import { ɵInFilter as InFilter } from '@creatio/base';
import { ɵInsertQuery as InsertQuery } from '@creatio/base';
import { ɵisEmptyGuid as isEmptyGuid } from '@creatio/base';
import { ɵisGuid as isGuid } from '@creatio/base';
import { ɵIsNullFilter as IsNullFilter } from '@creatio/base';
import { ɵItemNotFoundException as ItemNotFoundException } from '@creatio/base';
import { ɵJsonArray as JsonArray } from '@creatio/base';
import { ɵJsonData as JsonData } from '@creatio/base';
import { ɵJsonObject as JsonObject } from '@creatio/base';
import { ɵLengthFunctionColumn as LengthFunctionColumn } from '@creatio/base';
import { ɵLengthFunctionExpression as LengthFunctionExpression } from '@creatio/base';
import { ɵLengthFunctionExpressionConfig as LengthFunctionExpressionConfig } from '@creatio/base';
import { ɵLocalizableString as LocalizableString } from '@creatio/base';
import { ɵLocalizeFn as LocalizeFn } from '@creatio/base';
import { ɵLogicalOperatorType as LogicalOperatorType } from '@creatio/base';
import { ɵLookupValue as LookupValue } from '@creatio/base';
import { ɵLookupValueWithCode as LookupValueWithCode } from '@creatio/base';
import { ɵMacrosFunctionColumn as MacrosFunctionColumn } from '@creatio/base';
import { ɵMacrosFunctionExpression as MacrosFunctionExpression } from '@creatio/base';
import { ɵMacrosFunctionExpressionConfig as MacrosFunctionExpressionConfig } from '@creatio/base';
import { ɵMetadataProvider as MetadataProvider } from '@creatio/base';
import { ɵModelParameterType as ModelParameterType } from '@creatio/base';
import { ɵNextHandlerAlreadySpecifiedException as NextHandlerAlreadySpecifiedException } from '@creatio/base';
import { ɵOrderDirection as OrderDirection } from '@creatio/base';
import { ɵParameterExpression as ParameterExpression } from '@creatio/base';
import { ɵParameterExpressionConfig as ParameterExpressionConfig } from '@creatio/base';
import { ɵParameterQueryColumn as ParameterQueryColumn } from '@creatio/base';
import { ɵparserMock as parserMock } from '@creatio/base';
import { ɵPrimaryDisplayFilterDataSourceParameter as PrimaryDisplayFilterDataSourceParameter } from '@creatio/base';
import { ɵQueryMacrosType as QueryMacrosType } from '@creatio/base';
import { ɵQueryOperationType as QueryOperationType } from '@creatio/base';
import { ɵRequestHandler as RequestHandler } from '@creatio/base';
import { ɵResolveDependencyFn as ResolveDependencyFn } from '@creatio/base';
import { ɵSelectLocalizationQuery as SelectLocalizationQuery } from '@creatio/base';
import { ɵSingleFilter as SingleFilter } from '@creatio/base';
import { ɵSortColumnOptions as SortColumnOptions } from '@creatio/base';
import { ɵSortDirection as SortDirection } from '@creatio/base';
import { ɵSubQueryColumn as SubQueryColumn } from '@creatio/base';
import { ɵSubQueryExpression as SubQueryExpression } from '@creatio/base';
import { ɵSubQueryExpressionConfig as SubQueryExpressionConfig } from '@creatio/base';
import { ɵtoLocalISOString as toLocalISOString } from '@creatio/base';
import { ɵType as Type } from '@creatio/base';
import { ɵUpdateQuery as UpdateQuery } from '@creatio/base';
import { ɵValidationUtilities as ValidationUtilities } from '@creatio/base';
import { ɵViewModelContext as ViewModelContext } from '@creatio/base';
import { ɵWindowFunctionColumn as WindowFunctionColumn } from '@creatio/base';
import { ɵWindowFunctionExpression as WindowFunctionExpression } from '@creatio/base';
import { ɵWindowFunctionExpressionConfig as WindowFunctionExpressionConfig } from '@creatio/base';
import { ɵAggregationSubQueryExpressionConfig } from '@creatio/base';
import { ɵDataSourceLoadOptions } from '@creatio/base';

export { AbstractType }

/* Excluded from this release type: AddRequestHandlerListener */
export { AggregationEval }

export { AggregationEvalType }

export { AggregationFunction }

export { AggregationFunctionColumn }

export { AggregationFunctionExpression }

export { AggregationFunctionExpressionConfig }

export { AggregationSubQueryColumn }

export { AggregationSubQueryExpression }

export { AggregationType }

/* Excluded from this release type: AngularViewElementRegistrationConfig */

/* Excluded from this release type: applyLocalizeMetadataFn */
export { ArgumentEmptyException }

export { ArgumentFunctionExpression }

export { ArgumentFunctionExpressionConfig }

export { ArgumentOutOfRangeException }

export { ArithmeticExpression }

export { ArithmeticExpressionConfig }

export { ArithmeticOperation }

export { ArithmeticQueryColumn }

/* Excluded from this release type: AttributeValueConfig */
export { BaseDataSourceParameter }

export { BaseExpression }

export { BaseExpressionParser }

export { BaseFilter }

export { BaseFilterableQuery }

export { BaseFilterParser }

declare abstract class BaseHandlerChainService {
    /* Excluded from this release type: requestType */
}

/* Excluded from this release type: BaseInterfaceDesignerItemRegistrationConfig */
export { BaseModel }

export { BaseQuery }

export { BaseQueryColumn }

export { BaseRequest }

/**
 * @public
 * @description Request payload
 * @property {string} request - request name.
 * @property {unknown} params - request parameters.
 */
export declare interface BaseRequestConfig {
    /**
     * @description request name.
     */
    request: string;
    /**
     * @description request parameters.
     */
    params?: unknown;
}

/* Excluded from this release type: BaseRequestCtor */

/**
 * @public
 * @abstract
 * @classdesc Class for designing request handlers.
 */
export declare abstract class BaseRequestHandler<TRequest = BaseRequest, TResult = unknown> implements RequestHandler<TRequest, TResult> {
    /* Excluded from this release type: _instanceOfKey */
    private _next?;
    protected handlerChain: HandlerChainService;
    protected get next(): RequestHandler | undefined;
    /* Excluded from this release type: [Symbol.hasInstance] */
    /**
     * @abstract
     * @description Abstract async method which contains logic to handle request properly.
     * @param {TRequest} request - {@link ɵBaseRequest}
     */
    abstract handle(request: TRequest): Promise<TResult>;
    /**
     * @description Method to set request handler to handler chain.
     * @param next - link for next request handler - {@link ɵRequestHandler}
     */
    setNext(next: RequestHandler): void;
}

/**
 * @public
 * @description Shape of response
 * @property {boolean} success - Indicates whether operation was success.
 * @property {ErrorInfo} errorInfo - detailed error description. {@link ErrorInfo}
 */
export declare interface BaseResponse {
    /**
     * @description Indicates whether operation was success.
     */
    success: boolean;
    /**
     * @description detailed error description. {@link ErrorInfo}
     */
    errorInfo?: ErrorInfo;
}

/* Excluded from this release type: BaseToolbarViewElementConfig */

/**
 * @public
 * @description Abstract Base Validator class for designing custom validators.
 * @example
 * @CrtValidator({
 *    type: 'crt.Required',
 * })
 * export class RequiredValidator extends BaseValidator {
 *    protected override async = false;
 *    public validate(controlState: CrtControlState, params?: ValidatorParametersValues): CrtValidationErrors | null {
 *      Implementation here...
 *    }
 * }
 */
export declare abstract class BaseValidator {
    /* Excluded from this release type: _instanceOfKey */
    /**
     * @abstract
     * @description indicator to recognize whether validator asynchronous or synchronous
     */
    protected abstract async: boolean;
    /**
     * @description getter for async/sync indicator
     */
    get isAsync(): boolean;
    /**
     * @description Function used for validation
     */
    get validateFn(): CrtValidatorFn;
    /* Excluded from this release type: [Symbol.hasInstance] */
    /**
     * @description Method which contains main logic relates validation.
     * @param controlState - {@link CrtControlState}
     * @param params - incoming parameters for validation {@link ValidatorParametersValues}
     */
    abstract validate(controlState: CrtControlState, params?: ValidatorParametersValues): CrtValidationErrors | null | Promise<CrtValidationErrors | null>;
}

/**
 * @public
 * @description Registration config for defining user components in Creatio platform.
 * @property {string} type - type of view element. Used to specify view element in schema.
 * @property {Record<string, CrtInputRegistrationConfig>=} inputs {@link CrtInputRegistrationConfig} - map
 * of component inputs. Communication chanel to send update from Creatio platform to component
 * @property {Record<string, unknown>=} outputs - map of component outputs.
 * Communication chanel to send update from component to Creatio platform.
 * @property {Record<string, unknown>=} validationInputs - map of component validationInputs.
 * Communication chanel to receive updates relates to validation.
 * To properly declare validationInfo field:
 * 1. Declare input field inside inputs section. For example `count`
 * 2. In validationInputs section declare same field which ends with ValidationInfo.
 * For previous example `countValidationInfo`
 *
 * @example
 * const config: BaseViewElementRegistrationConfig = {
 *       type: 'usr.Component',
 *       inputs: {
 *           entitySchemaName: {},
 *           user: {},
 *           count: {}
 *       },
 *       outputs: {
 *           countChange: {}
 *       },
 *       validationInputs: {
 *           countValidationInfo: {}
 *       }
 *  }
 */
export declare interface BaseViewElementRegistrationConfig {
    /**
     * @description type of view element. Used to specify view element in schema.
     */
    type: string;
    /* Excluded from this release type: contentSlots */
    /**
     * @description {@link CrtInputRegistrationConfig} map
     * of component inputs. Communication chanel to send update from Creatio platform to component
     */
    inputs?: Record<string, CrtInputRegistrationConfig>;
    /**
     * @description map of component outputs.
     * Communication chanel to send update from component to Creatio platform.
     */
    outputs?: Record<string, unknown>;
    /**
     * @description map of component validationInputs.
     * Communication chanel to receive updates relates to validation.
     * To properly declare validationInfo field:
     * 1. Declare input field inside inputs section. For example `count`
     * 2. In validationInputs section declare same field which ends with ValidationInfo.
     * For previous example `countValidationInfo`
     */
    validationInputs?: Record<string, unknown>;
    /* Excluded from this release type: reuseStrategy */
}

export { BetweenFilter }

/* Excluded declaration from this release type: bootstrapCrtModule */

/**
 * @public
 * @description Function required to bootstrapping elements defined in CrtModules.
 * Call this function as soon as possible during bootstrapping your application.
 * @param type - module type
 * @param options - {@link BootstrapOptions}
 *
 * @example
 * bootstrapCrtModule(AppModule)
 */
export declare function bootstrapCrtModule(remoteName: string, type: Type, options?: BootstrapOptions): void;

/**
 * @public
 * @deprecated
 */
export declare function bootstrapCrtModule(type: Type, options?: BootstrapOptions): void;

/* Excluded from this release type: bootstrapCrtModuleHandlerChainServices */

/* Excluded from this release type: BootstrapNotifier */

/**
 * @public
 * @description Module bootstrap options
 */
export declare interface BootstrapOptions {
    /**
     * Function to be used to translate localizable values of class metadata
     */
    localizeMetadata?: LocalizeFn;
    /**
     * Function to be used to resolve class dependencies
     */
    resolveDependency?: ResolveDependencyFn;
    /* Excluded from this release type: moduleType */
}

/* Excluded from this release type: checkCrtTypeNamePascalCase */

/* Excluded from this release type: checkIfTypeRegistered */

/* Excluded from this release type: checkOnlyOneRegistration */

/* Excluded from this release type: checkTypeNameFormat */

/* Excluded from this release type: checkTypeNamePascalCase */
export { ColumnExpression }

export { ColumnExpressionConfig }

export { CompareFilter }

export { ComparisonType }

export { ConditionalValueItem }

/* Excluded from this release type: ContexedHandlerScopeConfig */

/**
 * @public
 * @description Shape to implementing Converter.
 * @template V
 * @template R
 */
export declare interface Converter<V = unknown, R = unknown> {
    /**
     * @description Function which convert incoming value.
     * @param {V} value - input value.
     * @param {ViewModelContext} context - view model context.
     * @param {...unknown[]} arg - arguments rest.
     * @return {*}  {R}
     */
    convert(value: V, context: ViewModelContext, ...args: unknown[]): R;
}

/**
 * @public
 * @description Config used to register converter in Creatio platform.
 * @property {string} type - type of validator
 */
export declare interface ConverterConfig {
    /**
     * @description type used to register converter in Creatio platform.
     */
    type: string;
}

/* Excluded from this release type: ConverterMetadata */

/* Excluded from this release type: ConverterRegistry */

/* Excluded from this release type: ConverterRegistryItem */

/* Excluded from this release type: CrtAngularViewElementConfig */

/**
 * @public
 * @description Control state passed for validators
 * @property {unknown} value - control value
 */
export declare interface CrtControlState {
    /**
     * @description control value
     */
    value: unknown;
}

/**
 * @public
 * @description Decorator to declare converter
 * @param config - converter config {@link ConverterConfig}.
 * if config is not passed, converter won't be declared,
 * but still can be used as base class for another converter
 *
 * @example
 * @CrtConverter({
 *    type: 'usr.ToBoolean',
 * })
 * export class ToBooleanConverter implements Converter<unknown, boolean> {
 * 	public convert(value: unknown): boolean {
 * 		return Boolean(value);
 * 	}
 * }
 */
export declare function CrtConverter(config: ConverterConfig): (type: Type) => void;

export declare function CrtConverter(): (type: Type | AbstractType) => void;

/* Excluded from this release type: CrtDesignTimeViewElement */

/**
 * @public
 * @description
 * Constructor parameter decorator.
 * Mark parameter as dependency that should be obtained by token.
 * @param token - token by which the dependency instance will be obtained
 * @example
 * class MyHandler {
 * 	constructor(@CrtInject(USER_NAME_TOKEN) userName: string) {}
 * }
 */
export declare function CrtInject(token: unknown): (target: any, paramKey: string, paramIndex: number) => void;

/* Excluded from this release type: crtInjectPrefix */

/**
 * @public
 * @description Creatio platform interacts with input's of user-defined component through CrtInput decorator.
 * @param config {@link CrtInputRegistrationConfig}
 *
 * @example
 * export class AppComponent {
 *    @CrtInput()
 *    public value!: string;
 *  }
 */
export declare function CrtInput(config?: CrtInputRegistrationConfig): (target: any, propertyKey: string) => void;

/* Excluded from this release type: crtInputPrefix */

/**
 * @public
 */
export declare class CrtInputRegistrationConfig {
    /* Excluded from this release type: propertyBindable */
}

/**
 * @public
 * @description Decorator to declare design time configuration for view element.
 * @param config - registration config {@link InterfaceDesignerItemDefinition}.
 *
 * @example
 * @CrtViewElement({
 *      type: "usr.Example',
 *      selector: 'usr-example',
 *  })
 *  @CrtInterfaceDesignerItem({
 *      toolbarConfig: {
 *          caption: 'usrExampleCaption',
 *          icon: require(`!!raw-loader?{esModule:false}!../assets/icon.svg`)
 *          hint: 'usrExampleHint',
 *          defaultPropertyValues: {
 *              value: 'This is default value',
 *          },
 *      },
 *  })
 *  @Component({
 *      selector: 'usr-example',
 *      templateUrl: './app.component.html',
 *      styleUrls: ['./app.component.scss'],
 *      encapsulation: ViewEncapsulation.ShadowDom,
 *  })
 *  export class AppComponent {
 *      @Input()
 *      @CrtInput()
 *      public value!: string;
 *  }
 */
export declare function CrtInterfaceDesignerItem(config: InterfaceDesignerItemDefinition): (type: Type) => void;

/* Excluded declaration from this release type: CrtInterfaceDesignerItem */

/**
 * @public
 * @description CrtModule decorator is a 'container' where user actually setup elements.
 * In could contain viewElements, definitions of other CrtModules.
 * @param moduleDefinition - {@link ModuleDefinition}
 *
 * @example
 *  @CrtModule({
 *      viewElements: [AppComponent],
 *      requestHandlers: [SomeRequestHandler],
 *      validators: [SomeValidator],
 *  })
 *  @NgModule({
 *      declarations: [AppComponent],
 *      imports: [BrowserModule],
 *      providers: [],
 *  })
 *  export class AppModule {}
 */
export declare function CrtModule(moduleDefinition: ModuleDefinition): (type: Type) => void;

/**
 * @public
 * @description User-defined components could notify Creatio platform about changes through CrtOutput decorator.
 * @example
 * export class AppComponent {
 *     @Input()
 *     @CrtOutput()
 *     public valueChange;
 *  }
 */
export declare function CrtOutput(): (target: any, propertyKey: string) => void;

/* Excluded from this release type: crtOutputPrefix */

/* Excluded from this release type: CrtRequest */

/**
 * @public
 * @description Decorator to declare request handler
 * @param config - request handler config {@link RequestHandlerRegistrationConfig}.
 * If no config is passed, the handler cannot be declared, but can be used as a base class for another handler.
 *
 * @example
 * *@CrtRequestHandler({
 *	 requestType: 'crt.SomeRequest',
 *	 type: 'crt.SomeRequestHandler',
 * })
 * export class SectionInitHandler extends BaseRequestHandler<SomeRequest> {
 *   public async handle(request: SomeRequest): Promise<unknown> {
 * 	   // Some business logic
 * 	   return this.next?.handle(request);
 * 	 }
 * }
 */
export declare function CrtRequestHandler<T extends RequestHandler>(config: RequestHandlerDefinition): (type: Type<T>) => void;

export declare function CrtRequestHandler(): (type: Type | AbstractType) => void;

/**
 * @public
 * @description Validation error with message
 * @property {string} message - error message.
 */
export declare interface CrtValidationError {
    /**
     * @description error message.
     */
    message: string;
}

/**
 * @public
 * @description Generic shape of validation errors
 */
export declare interface CrtValidationErrors {
    [key: string]: CrtValidationError;
}

/**
 * @public
 * @description Information relates validation.
 * Includes fields to customize behavior depends on validation
 * @property {boolean} valid - indicates whether input is valid.
 * @property {CrtValidationErrors | null} errors - validation errors shape. {@link CrtValidationErrors}
 * @property {boolean} dirty - indicates whether input was changed.
 * @property {boolean} touched - indicates whether input was touched.
 */
export declare interface CrtValidationInfo {
    /**
     * @description indicates whether input is valid.
     */
    readonly valid: boolean;
    /**
     * @description - validation errors shape. {@link CrtValidationErrors}
     */
    readonly errors: CrtValidationErrors | null;
    /**
     * @description indicates whether input was changed.
     */
    readonly dirty: boolean;
    /**
     * @description indicates whether input was touched.
     */
    readonly touched: boolean;
}

/**
 * @public
 * @description User-defined components receive validationInfo changes through CrtValidationInput decorator.
 * Make sure you have defined input for every validationInfo input.
 * To properly declare validationInfo field:
 * 1. Declare input field inside inputs section. For example `value`
 * 2. In validationInputs section declare same field which ends with ValidationInfo.
 * For previous example `valueValidationInfo`
 *
 * @example
 * export class AppComponent {
 *      @CrtInput()
 public value;
 *
 *     	@CrtValidationInput()
 *      public valueValidationInfo;
 *  }
 */
export declare function CrtValidationInput(): (target: any, propertyKey: string) => void;

/* Excluded from this release type: crtValidationInputPrefix */

/**
 * @public
 * @description Decorator to declare validator
 * @param config - validator config {@link ValidatorConfig}.
 * If no config is passed, the validator cannot be declared, but can be used as a base class for another validator.
 *
 * @example
 * @CrtValidator({
 *    type: 'crt.Required',
 * })
 * export class RequiredValidator extends BaseValidator {
 *    protected override async = false;
 *    public validate(controlState: CrtControlState, params?: ValidatorParametersValues): CrtValidationErrors | null {
 *      Implementation here...
 *    }
 * }
 */
export declare function CrtValidator(config: ValidatorConfig): (type: Type) => void;

export declare function CrtValidator(): (type: Type | AbstractType) => void;

/**
 * @public
 * @description Function used for validation
 * @param controlState - {@link CrtControlState}
 * @param params - incoming parameters for validation {@link ValidatorParametersValues}
 */
export declare type CrtValidatorFn = (controlState: CrtControlState, params?: ValidatorParametersValues) => CrtValidationErrors | null | Promise<CrtValidationErrors | null>;

/**
 * @public
 * @description CrtViewElement decorator allows user to declare components in Creatio platform.
 * Make sure component is specified in viewElements section of CrtModule.
 * @param config - registration config. {@link ViewElementRegistrationConfig}.
 *
 * @example
 * @CrtViewElement({
 *      type: 'usr.Example',
 *      selector: 'usr-example',
 *  })
 *  export class AppComponent {
 *      @Input()
 *      @CrtInput()
 *      public value!: string;
 *  }
 */
export declare function CrtViewElement(config: ViewElementRegistrationConfig): (type: Type) => void;

/* Excluded declaration from this release type: CrtViewElement */

/**
 * @public
 * @classdesc Service to handling a way of tasks execution in Creatio plaform
 * @extends {BaseHandlerChainService}
 */
export declare class CrtZoneService extends BaseHandlerChainService {
    /* Excluded from this release type: requestType */
    /**
     * @description Method designed to run task outside of Creatio zone
     * @param {Function} callback - task which should be executed outside of tracking CrtZone
     * @returns `unknown`
     */
    runOutside: (callback: () => unknown) => unknown;
}

/**
 * @public
 * @class DataRequest
 * @description Definition of data source request.
 * @extends {ɵBaseRequest} {@link ɵBaseRequest}
 * @property {string} dataSourceName - name of assigned data source.
 */
export declare class DataRequest extends BaseRequest {
    /**
     * @description name of assigned data source.
     */
    readonly dataSourceName: string;
}

export { DataSchema }

export { DataSchemaAttribute }

export { DataSchemaAttributeAggregationConfig }

export { DataSchemaAttributeAggregationFunctionConfig }

export { DataSchemaAttributeDatePartFunctionConfig }

export { DataSchemaAttributeFunctionConfig }

export { DataSchemaAttributeType }

export { DataSchemaAttributeUsageType }

export { DataSchemaAttributeValidatorConfig }

export { DataSchemaType }

export { DataSchemaValidatorConfig }

export { DataSourceAggregationConfig }

export { DataSourceAggregationFunctionConfig }

export { DataSourceAttribute }

export { DataSourceAttributeType }

export { DataSourceCanExecuteOperationPayload }

export { DataSourceCanExecuteOperationResult }

export { DataSourceConfig }

export { DataSourceDatePartFunctionConfig }

export { DataSourceFunctionConfig }

export { DataSourceInsertResult }

export { DataSourceInstanceConfig }

/**
 * @public
 * @description Represents a set of loading options.
 * @property {string} pagingConfig - The paging options for loading.
 * @property {string} sortingConfig - The sorting options.
 */
export declare interface DataSourceLoadOptions extends ɵDataSourceLoadOptions {
    /* Excluded from this release type: loadType */
}

/* Excluded from this release type: DataSourceLoadType */
export { DataSourcePagingConfig }

export { DataSourceParameter }

export { DataSourceParameterRelationConfig }

export { DataSourceParameters }

export { DataSourceSaveResult }

export { DataSourceScope }

export { DataSourceSortingConfig }

export { DataValueType }

export { DatePart }

export { DatePartFunctionColumn }

export { DatePartFunctionExpression }

export { DatePartFunctionExpressionConfig }

export { DatePartType }

export { DEFAULT_COLUMN_PLAIN_OBJ }

export { DEFAULT_FILTER_PLAIN_OBJ }

export { DefaultValueSchema }

export { DefaultValueSource }

export { DeleteQuery }

/* Excluded from this release type: DesignerToolGroupType */

/* Excluded from this release type: DesignTimeViewElementRegistry */

/* Excluded from this release type: DesignTimeViewElementRegistryItem */

/* Excluded from this release type: designTimeViewElementRegistryKey */
export { EMPTY_GUID }

export { encodeDate }

export declare interface Entity {
    [key: string]: EntityColumnValue;
}

export { EntityColumnValue }

export { EntityQueryColumn }

export { EntitySchemaQuery }

/**
 * @public
 * @description Shape for detailed error explanation.
 * @property {string} errorCode - Error code.
 * @property {string} message - Error message.
 * @property {string} stackTrace - Stack at the moment of causing an error.
 */
export declare interface ErrorInfo {
    /**
     * @description Error code.
     */
    errorCode: string;
    /**
     * @description Error message.
     */
    message: string;
    /**
     * @description Stack at the moment of causing an error
     */
    stackTrace: string;
}

export { ExistsFilter }

export { ExpressionConfig }

export { ExpressionMock }

export { ExpressionParser }

export { ExpressionResolver }

export { ExpressionType }

/* Excluded from this release type: ExtraToolbarViewElementConfig */

/**
 * @public
 * @classdesc Service to working with Creatio platform features using handler chain
 * @extends {BaseHandlerChainService}
 */
export declare class FeatureService extends BaseHandlerChainService {
    /* Excluded from this release type: requestType */
    /**
     * @description Method designed to get state for single feature
     * @param {string} code - feature code
     * @returns `Promise<boolean>`
     */
    getFeatureState: (code: string) => Promise<boolean>;
    /**
     * @description Method designed to get feature states
     * @param {string[]} codes - feature codes
     * @returns `Promise<boolean[]>`
     */
    getFeaturesState: (codes: string[]) => Promise<boolean[]>;
}

/* Excluded from this release type: FileValue */
export { FilterGroup }

export { FilterMock }

export { FilterParser }

export { FilterResolver }

export { FilterType }

/* Excluded from this release type: _from */
export { FunctionExpression }

export { FunctionExpressionConfig }

export { FunctionStringType }

export { FunctionType }

export { generateGuid }

export { getColumnPlainObj }

/* Excluded from this release type: getConverterMetadata */

/* Excluded from this release type: getCrtInputsMetadata */

/* Excluded from this release type: getCrtOutputsMetadata */

/* Excluded from this release type: getCrtValidationInputsMetadata */

/* Excluded from this release type: getDesignTimeViewElementMetadata */
export { getFilterPlainObj }

/* Excluded from this release type: getHandlerChainServiceMetadata */

/* Excluded from this release type: getInterfaceDesignerItemMetadata */

/* Excluded from this release type: getModuleMetadata */

/* Excluded from this release type: getRequestHandlerMetadata */

/* Excluded from this release type: getTypeDependencies */

/* Excluded from this release type: getValidatorMetadata */

/* Excluded from this release type: getViewElementMetadata */

/* Excluded from this release type: GroupedDateValue */
export { Guid }

/**
 * @public
 * @class HandlerChainService
 * @classdesc Service to design handlers in chain.
 */
export declare class HandlerChainService {
    private get _chain();
    private set _chain(value);
    private static _instance;
    static get instance(): HandlerChainService;
    private constructor();
    private _createGlobalHandlerChain;
    /* Excluded from this release type: clearContextedHandlersCache */
    /* Excluded from this release type: register */
    /**
     * @description Method to process passed request
     * @param request - {@link ɵBaseRequest}
     * @return `Promise<unknown>`
     */
    process(request: BaseRequest): Promise<unknown>;
    /* Excluded from this release type: subscribe */
}

/* Excluded from this release type: HandlerChainServiceRegistryItem */

/* Excluded from this release type: HandlerChainServicesRegistry */

/* Excluded from this release type: HandlerConfig */

/* Excluded from this release type: HandlersOrderComparer */

/* Excluded from this release type: HandlerSource */

/* Excluded from this release type: HandlerSourceType */

/* Excluded from this release type: hasInterfaceDesignerItemMetadata */

/* Excluded from this release type: HostHandlerSource */

/**
 * @public
 * @classdesc Http service to perform Http requests
 * @extends {BaseHandlerChainService}
 */
export declare class HttpClientService extends BaseHandlerChainService {
    /* Excluded from this release type: requestType */
    get(url: string, options: {
        headers?: HttpHeaders;
        responseType: 'arraybuffer';
    }): Promise<HttpResponse<ArrayBuffer>>;
    get(url: string, options: {
        headers?: HttpHeaders;
        responseType: 'blob';
    }): Promise<HttpResponse<Blob>>;
    get(url: string, options: {
        headers?: HttpHeaders;
        responseType: 'text';
    }): Promise<HttpResponse<string>>;
    get(url: string, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
    }): Promise<HttpResponse>;
    get<T>(url: string, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
    }): Promise<HttpResponse<T>>;
    post(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'arraybuffer';
    }): Promise<HttpResponse<ArrayBuffer>>;
    post(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'blob';
    }): Promise<HttpResponse<Blob>>;
    post(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'text';
    }): Promise<HttpResponse<string>>;
    post(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
    }): Promise<HttpResponse>;
    post<T>(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
    }): Promise<HttpResponse<T>>;
    delete(url: string, options: {
        headers?: HttpHeaders;
        responseType: 'arraybuffer';
        body?: unknown | null;
    }): Promise<HttpResponse<ArrayBuffer>>;
    delete(url: string, options: {
        headers?: HttpHeaders;
        responseType: 'blob';
        body?: unknown | null;
    }): Promise<HttpResponse<Blob>>;
    delete(url: string, options: {
        headers?: HttpHeaders;
        responseType: 'text';
        body?: unknown | null;
    }): Promise<HttpResponse<string>>;
    delete(url: string, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
        body?: unknown | null;
    }): Promise<HttpResponse>;
    delete<T>(url: string, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
        body?: unknown | null;
    }): Promise<HttpResponse<T>>;
    put(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'arraybuffer';
    }): Promise<HttpResponse<ArrayBuffer>>;
    put(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'blob';
    }): Promise<HttpResponse<Blob>>;
    put(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'text';
    }): Promise<HttpResponse<string>>;
    put(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
    }): Promise<HttpResponse>;
    put<T>(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
    }): Promise<HttpResponse<T>>;
    patch(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'arraybuffer';
    }): Promise<HttpResponse<ArrayBuffer>>;
    patch(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'blob';
    }): Promise<HttpResponse<Blob>>;
    patch(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType: 'text';
    }): Promise<HttpResponse<string>>;
    patch(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
    }): Promise<HttpResponse>;
    patch<T>(url: string, body: unknown | null, options: {
        headers?: HttpHeaders;
        responseType?: 'json';
    }): Promise<HttpResponse<T>>;
}

/**
 * @public
 * @description Key-value shape for HttpHeaders
 */
export declare interface HttpHeaders {
    [header: string]: string;
}

/**
 * @public
 * @description Http response
 * @template T
 * @property {HttpHeaders} headers - response headers {@link HttpHeaders}
 * @property {number} status - response status
 * @property {string} statusText - text of response
 * @property {string | null} url - response url
 * @property {boolean} ok - ok status
 * @property {T | null} body - response body
 */
export declare interface HttpResponse<T = unknown> {
    /**
     * @description response headers {@link HttpHeaders}
     */
    headers: HttpHeaders;
    /**
     * @description response status
     */
    status: number;
    /**
     * @description text of response
     */
    statusText: string;
    /**
     * @description response url
     */
    url: string | null;
    /**
     * @description ok status
     */
    ok: boolean;
    /**
     * @description response body
     */
    body: T | null;
}

/* Excluded from this release type: ImplementUsingHandlerChain */
export { InFilter }

/* Excluded from this release type: InjectionContext */
export { InsertQuery }

/* Excluded from this release type: instantiate */

/**
 * @public
 * @description Config used to register view element options in interface designer.
 * User-defined view elements will be displayed in Custom Elements group of interface designer.
 */
export declare interface InterfaceDesignerItemDefinition {
    /**
     * Config for defining view element options in left panel of Interface designer.
     */
    toolbarConfig: {
        /**
         * Caption of view element in toolbar.
         */
        caption: string | LocalizableValue;
        /**
         * @deprecated
         * Name of view element icon in toolbar.
         */
        name?: string;
        /**
         * Require path to load icon that will be displayed for view element
         * in left panel of Interface designer.
         * @example  icon: require(`!!raw-loader?{esModule:false}!../assets/icon.svg`),
         */
        icon: string;
        /**
         * Hint which will be displayed on hover.
         */
        hint?: string;
        /**
         * Map of default values which will be set after drag&drop.
         */
        defaultPropertyValues?: Record<string, unknown | LocalizableValue>;
        /* Excluded from this release type: groupType */
    };
    /* Excluded from this release type: viewElementGroupType */
    /* Excluded from this release type: typeCaption */
    /* Excluded from this release type: typeRef */
}

/* Excluded from this release type: InterfaceDesignerItemMetadata */

/* Excluded from this release type: InterfaceDesignerItemRegistrationConfig */

/* Excluded from this release type: InterfaceDesignerItemRegistry */

/* Excluded from this release type: interfaceDesignerItemRegistryKey */

/* Excluded from this release type: InterfaceDesignerRegistryItem */

/* Excluded from this release type: InternalInterfaceDesignerItemRegistrationConfig */

/* Excluded from this release type: InternalRequestHandlerRegistry */

/* Excluded from this release type: InternalRequestHandlerRegistryType */

/* Excluded from this release type: InternalResolveDependencyFn */

/* Excluded from this release type: InternalToolbarViewElementCollectionItemConfig */

/* Excluded from this release type: InternalToolbarViewElementConfig */

/* Excluded from this release type: InternalToolbarViewElementConfigCollection */

/* Excluded from this release type: isComponentPropertyBindable */
export { isEmptyGuid }

export { isGuid }

export { IsNullFilter }

export { ItemNotFoundException }

export { JsonArray }

export { JsonData }

export { JsonObject }

export { LengthFunctionColumn }

export { LengthFunctionExpression }

export { LengthFunctionExpressionConfig }

export { LocalizableString }

/* Excluded from this release type: LocalizableStringValues */

/**
 * @public
 */
export declare class LocalizableValue {
    readonly key: string;
    /* Excluded from this release type: _instanceOfKey */
    constructor(key: string);
    /* Excluded from this release type: [Symbol.hasInstance] */
}

/* Excluded from this release type: LocalizableValues */

/**
 * @public
 * @description Use this function in decorators to indicate that a value should be localized.
 * Note that the "localizeMetadata" bootstrap option should be provided,
 * otherwise the value cannot be localized.
 *
 * @example
 *
 * ### Using 'localize' in decorator
 * ```ts
 * @CrtInterfaceDesignerItem({
 *    toolbarConfig: {
 *      caption: localize('MyElement.Caption')
 * 	  }
 * })
 * class MyElement {}
 * ```
 * ### Passing 'localizeMetadata' bootstrap option
 * ```ts
 * bootstrapCrtModule(MyModule, {
 *    localizeMetadata: (key: string) => thirdPartyTranslateService.translate(key)
 * });
 * ```
 */
export declare function localize(key: string): LocalizableValue;

export { LocalizeFn }

export { LogicalOperatorType }

export { LookupValue }

export { LookupValueWithCode }

export { MacrosFunctionColumn }

export { MacrosFunctionExpression }

export { MacrosFunctionExpressionConfig }

/**
 * @public
 * @classdesc Service to working with mask using handler chain
 * @extends {BaseHandlerChainService}
 */
export declare class MaskService extends BaseHandlerChainService {
    /* Excluded from this release type: requestType */
    /**
     * @description Method to show body mask on the page
     * @param {MaskSettings} settings - mask settings {@link MaskSettings}
     */
    showBodyMask: (settings?: MaskSettings) => Promise<void>;
    /**
     * @description Method to hide body mask
     */
    hideBodyMask: () => Promise<void>;
    /* Excluded from this release type: showMask */
    /* Excluded from this release type: hideMask */
}

/**
 * @public
 * @description Settings for displaying mask.
 * @property {number} delay - The duration in milliseconds until which the mask delaying.
 */
export declare interface MaskSettings {
    /**
     * @description The duration in milliseconds until which the mask delaying.
     */
    delay: number;
}

export { MetadataProvider }

/* Excluded from this release type: MethodInvokeRequest */

/**
 * @public
 */
export declare class Model extends BaseHandlerChainService implements BaseModel<DataSourceLoadOptions> {
    private static _instance;
    private _crtModel;
    /* Excluded from this release type: requestType */
    private constructor();
    private static get instance();
    /* Excluded from this release type: name */
    private _create;
    /* Excluded from this release type: [_from] */
    static create(dataSchema: string): Promise<Model>;
    getSchema(): Promise<DataSchema>;
    load(config?: {
        attributes?: string[] | DataSourceAttribute[];
        parameters?: DataSourceParameters;
        loadOptions?: DataSourceLoadOptions;
    }): Promise<JsonArray>;
    insert(dto: JsonObject): Promise<DataSourceSaveResult>;
    update(dto: JsonObject, parameters: DataSourceParameters): Promise<DataSourceSaveResult>;
    copy(primaryColumnValue: string, data?: JsonObject): Promise<JsonObject>;
    create(data?: JsonObject): Promise<JsonObject>;
    delete(parameters: DataSourceParameters): Promise<DataSourceSaveResult>;
    canSave(params: DataSourceCanExecuteOperationPayload): Promise<DataSourceCanExecuteOperationResult>;
    canDelete(params: DataSourceCanExecuteOperationPayload): Promise<DataSourceCanExecuteOperationResult>;
}

/* Excluded from this release type: ModelDefaultValue */

/* Excluded from this release type: ModelInitConfig */

/* Excluded from this release type: ModelInPageAction */
export { ModelParameterType }

/**
 * @public
 * @description Definition of CrtModule. Use this to register elements in Creatio platform.
 * @property {Type[]} includes - Array of other CrnModules which are included in current.
 * This allows easily create chains of CrtModules. Bootstrapping will be done through all module chain
 * @property {Type[]} viewElements - Array of user-defined view elements which will be registered in Creatio platform.
 * @property {Type[]} validators - Array of user-defined validators which will be registered in Creatio platform.
 * @property {Type<BaseRequestHandler>[]} requestHandlers - Array of user-defined request handlers
 * which will be registered in Creatio platform.
 * @example
 * @CrtModule({
 *     viewElements: [AppComponent, UserComponent],
 *     includes: [NotifyModule],
 *     requestHandlers: [SomeRequestHandler],
 * })
 * @NgModule({
 *     declarations: [AppComponent, UserComponent],
 *     imports: [BrowserModule],
 *     providers: [],
 * })
 * export class AppModule {}
 */
export declare interface ModuleDefinition {
    /**
     * @description Array of other CrtModules which are included in current.
     * This allows easily create chains of CrtModules. Bootstrapping will be done through all module chain
     */
    includes?: Type[];
    /**
     * @description Array of user-defined view elements which will be registered
     * in Creatio platform.
     */
    viewElements?: Type[];
    /**
     * @description Array of user-defined validators which will be registered in Creatio platform
     */
    validators?: Type<BaseValidator>[];
    /* Excluded from this release type: designTimeViewElements */
    /**
     * @description Array of user-defined request handlers which will be registered in Creatio platform
     */
    requestHandlers?: Type<BaseRequestHandler>[];
    /**
     * @description Array of user-defined converters which will be registered in Creatio platform
     */
    converters?: Type<Converter>[];
    /* Excluded from this release type: handlerChainServices */
}

export { NextHandlerAlreadySpecifiedException }

/* Excluded from this release type: objectDeepKeys */
export { OrderDirection }

export { ParameterExpression }

export { ParameterExpressionConfig }

export { ParameterQueryColumn }

export { parserMock }

/* Excluded from this release type: PkgTopology */

/**
 * @public
 * @description Response for preload cachable system settings.
 * @extends {BaseResponse}
 * @property {Record<string, SysSetting>} values - system settings values
 */
export declare interface PreloadSysSettingsResponse extends BaseResponse {
    /**
     * @type {Record<string, SysSetting>}
     * @description system settings values. {@link SysSetting}
     */
    values: Record<string, SysSetting>;
}

export { PrimaryDisplayFilterDataSourceParameter }

export { QueryMacrosType }

export { QueryOperationType }

/**
 * @public
 * @description Response for querying of system settings
 * @extends {BaseResponse}
 * @property {Record<string, SysSetting>} values - system settings values
 */
export declare interface QuerySysSettingsResponse extends BaseResponse {
    /**
     * @type {Record<string, SysSetting>}
     * @description system settings values. {@link SysSetting}
     */
    values: Record<string, SysSetting>;
    /**
     * @type {Array<string>}
     * @description not found system settings codes.
     */
    notFoundSettings?: Array<string>;
}

/* Excluded from this release type: registerAngularViewElement */

/**
 * @public
 * @description Function allows to register user-defined component as view element in Creatio platform.
 * @param config - registration config. {@link ViewElementRegistrationConfig}
 * @example
 * sdk.registerViewElement({
 *      type: 'usr.Timeline',
 *      selector: 'usr-timeline',
 *      inputs: {
 *          primaryColumnValue: {},
 *          cardSchemaName: {},
 *          entitySchemaName: {}
 *      }
 * });
 */
export declare function registerViewElement(config: ViewElementRegistrationConfig): void;

/* Excluded from this release type: RemoteBuildInfo */

/* Excluded from this release type: RemoteEntriesRegistry */

/* Excluded from this release type: RemoteEntryType */

/* Excluded from this release type: RemoteHandlerSource */

/* Excluded from this release type: RemoveRequestHandlerListener */
export { RequestHandler }

/* Excluded from this release type: RequestHandlerCtor */

/**
 * @public
 * @description Config to register request handler.
 * @property {string} type - The type of request handler.
 * @property {string} requestType - The type of request for which the handler will be triggered.
 * @property {string[]} scopes - Scopes of the request for which the handler will be triggered
 */
export declare interface RequestHandlerDefinition {
    /**
     * The type of request handler.
     * @example
     * 'crt.EventHandlerType'
     */
    readonly type: string;
    /**
     * The type of request for which the handler will be triggered.
     * @example
     * 'crt.EventType'
     */
    readonly requestType: string;
    /**
     * Scopes of the request for which the handler will be triggered
     */
    readonly scopes?: string[];
}

/* Excluded from this release type: RequestHandlerFactory */

/* Excluded from this release type: RequestHandlerMapValue */

/* Excluded from this release type: RequestHandlerRegistrationConfig */

/* Excluded from this release type: RequestHandlerRegistryService */

/* Excluded from this release type: RequestRegistrationConfig */

/* Excluded from this release type: RequestRegistryService */
export { ResolveDependencyFn }

/**
 * @public
 * @classdesc Service to working rights using handler chain
 * @extends {BaseHandlerChainService}
 */
export declare class RightsService extends BaseHandlerChainService {
    /* Excluded from this release type: requestType */
    /**
     * @description Method to recognize whether user can execute operation
     * @param {string} operationName - operation name
     * @returns `Promise<boolean>`
     */
    getCanExecuteOperation: (operationName: string) => Promise<boolean>;
    /**
     * @description Method to recognize whether user can execute operations
     * @param {string[]} operationNames - operation names
     * @returns `Promise<boolean[]>`
     */
    getCanExecuteOperations: (operationNames: string[]) => Promise<boolean[]>;
}

/**
 * @public
 * @description Response for saving system settings
 * @extends {BaseResponse}
 * @property {Record<string, any>} saveResult - saving result
 * @property {number} rowsAffected -  Count of affected rows
 */
export declare interface SaveSysSettingsResponse extends BaseResponse {
    /**
     * @description saving result
     */
    saveResult: Record<string, any>;
    /**
     * @description Count of affected rows
     */
    rowsAffected: number;
    /* Excluded from this release type: nextPrcElReady */
}

/* Excluded from this release type: SchemaHandlerSource */

/* Excluded from this release type: SchemaViewMaskRequest */

/* Excluded from this release type: SchemaViewMaskRequestAction */
export { SelectLocalizationQuery }

/* Excluded from this release type: setConverterMetadata */

/* Excluded from this release type: setDesignTimeViewElementMetadata */

/* Excluded from this release type: setInterfaceDesignerItemMetadata */

/* Excluded from this release type: setModuleMetadata */

/* Excluded from this release type: setRequestHandlerMetadata */

/* Excluded from this release type: setValidatorMetadata */

/* Excluded from this release type: setViewElementMetadata */
export { SingleFilter }

export { SortColumnOptions }

export { SortDirection }

export { SubQueryColumn }

export { SubQueryExpression }

export { SubQueryExpressionConfig }

/* Excluded from this release type: Subscriber */

/* Excluded from this release type: Subscription */

export declare interface SysImageValue extends LookupValue {
    url?: string;
}

/**
 * @public
 * @class SysSetting
 * @classdesc Class contains info related system setting
 * @property {ɵGuid} id - id of system setting.
 * @property {string} name - name of system setting.
 * @property {string} code - code of system setting.
 * @property {isCacheable} boolean - indicator whether system setting is cacheable
 * @property {any} value - value of system setting
 * @property {string} displayValue - display value of system setting
 * @property {ɵDataValueType} ɵDataValueType - system setting {@link ɵDataValueType}
 */
export declare class SysSetting {
    /**
     * @description id of system setting
     */
    id?: Guid;
    /**
     * @description name of system setting
     */
    name?: string;
    /**
     * @description code of system setting
     */
    code?: string;
    /**
     * @description indicator whether system setting is cacheable
     */
    isCacheable?: boolean;
    /**
     * @description value of system setting
     */
    value?: any;
    /**
     * @description display value of system setting
     */
    displayValue?: string;
    /**
     * @description system setting {@link ɵDataValueType}
     */
    dataValueType?: DataValueType;
}

/**
 * @public
 * @class SysSettingsService
 * @classdesc Service to working with system settings using handler chain
 * @extends {BaseHandlerChainService}
 */
export declare class SysSettingsService extends BaseHandlerChainService {
    /* Excluded from this release type: requestType */
    /**
     * @description Method to get system settings by codes
     * @param {string[]} sysSettingCodes - system settings codes
     * @returns `Promise<QuerySysSettingsResponse>` {@link QuerySysSettingsResponse}
     */
    getByCodes: (sysSettingCodes: string[]) => Promise<QuerySysSettingsResponse>;
    /**
     * @description Method to get system setting by code
     * @param {string} sysSettingCode - system settings code
     * @returns `Promise<SysSetting>`
     */
    getByCode: (sysSettingCode: string) => Promise<SysSetting>;
    /**
     * @description Method to update system setting
     * @param {SysSettingValue} sysSettingValue - {@link SysSettingValue}
     * @param {Boolean} isPersonal - Flag that indicates that sysSetting value is personal.
     * @returns `Promise<SaveSysSettingsResponse>` {@link SaveSysSettingsResponse}
     */
    update: (sysSettingValue: SysSettingValue, isPersonal?: boolean) => Promise<SaveSysSettingsResponse>;
    /**
     * @description  Method to bulk update system settings
     * @param {SysSettingValue[]} sysSettingValues - system settings values {@link SysSettingValue}
     * @param {Boolean} isPersonal - Flag that indicates that sysSetting values are personal.
     * @returns `Promise<SaveSysSettingsResponse>` {@link SaveSysSettingsResponse}
     */
    updateMany: (sysSettingValues: SysSettingValue[], isPersonal?: boolean) => Promise<SaveSysSettingsResponse>;
}

/**
 * @public
 * @class SysSettingValue
 * @classdesc Shape to describe system setting value
 * @property {string} code - code of system setting
 * @property {any} value - value of system setting
 */
export declare class SysSettingValue {
    /**
     * @description code of system setting.
     */
    code?: string;
    /**
     * @description value of system setting
     */
    value?: any;
}

/**
 * @public
 * @description Shape of system values
 * @property {LookupValue} maintainer - maintainer
 * @property {number} moneyDisplayPrecision - precision used for displaying money
 * @property {number} maxEntitySchemaNameLength - max length of entity schema
 * @property {LookupValue} workspace - workplace info
 * @property {LookupValue} userAccount - user info
 * @property {string} userTimezoneCode - code of user's timezone
 * @property {number} userTimezoneOffset - offset for user timezone
 * @property {LookupValue} userContact - user contact info
 * @property {LookupValueWithCode} primaryLanguage - primary language
 * @property {LookupValue} primaryCulture - primary culture
 * @property {LookupValue} userCulture - user culture
 */
export declare interface SysValues {
    /**
     * @description maintainer
     */
    maintainer: LookupValue;
    /**
     * @description  precision used for displaying money
     */
    moneyDisplayPrecision: number;
    /**
     * @description max length of entity schema
     */
    maxEntitySchemaNameLength: number;
    /**
     * @description workplace info
     */
    workspace: LookupValue;
    /**
     * @description user info
     */
    userAccount: LookupValue;
    /**
     * @description code of user's timezone
     */
    userTimezoneCode: string;
    /**
     * @description offset for user timezone
     */
    userTimezoneOffset: number;
    /**
     * @description user contact info
     */
    userContact: LookupValue;
    /**
     * @description primary language
     */
    primaryLanguage: LookupValueWithCode;
    /**
     * @description primary culture
     */
    primaryCulture: LookupValue;
    /**
     * @description user culture
     */
    userCulture: LookupValue;
    /**
     * @description core version
     */
    coreVersion: string;
}

/**
 * @public
 * @classdesc
 * @class SysValuesService  Service to working with system values using handler chain
 * @extends {BaseHandlerChainService}
 */
export declare class SysValuesService extends BaseHandlerChainService {
    /* Excluded from this release type: requestType */
    /**
     * @description Method to load system values
     * @returns `Promise<SysValues>` {@link SysValues}
     */
    loadSysValues: () => Promise<SysValues>;
}

/* Excluded from this release type: TeardownLogic */

/* Excluded from this release type: toAggregationEval */

/* Excluded from this release type: toAggregationEvalType */

/* Excluded from this release type: toAggregationFunction */

/* Excluded from this release type: toAggregationType */

/* Excluded from this release type: toDatePart */

/* Excluded from this release type: toDatePartType */
export { toLocalISOString }

/* Excluded from this release type: toNumericFunctionType */

/* Excluded from this release type: ToolbarViewElementConfig */

/* Excluded from this release type: ToolbarViewElementConfigType */

/* Excluded from this release type: toOrderDirection */

/* Excluded from this release type: toPascalCase */

/* Excluded from this release type: toSortDirection */

/* Excluded from this release type: toStringFunctionType */
export { Type }

/* Excluded from this release type: UnsubscribeListener */
export { UpdateQuery }

export { ValidationUtilities }

/**
 * @public
 * @description Config used to register validator in Creatio platform.
 * @property {string} type - type of validator
 */
export declare interface ValidatorConfig {
    /**
     * @description Config used to register validator in Creatio platform.
     */
    type: string;
    /* Excluded from this release type: params */
    /* Excluded from this release type: scope */
}

/* Excluded from this release type: ValidatorMapValue */

/* Excluded from this release type: ValidatorMetadata */

/* Excluded from this release type: ValidatorParameters */

/**
 * @public
 * @description Shape for specifying parameters passed to validator
 * @property {string} message - message should be displayed for error;
 */
export declare interface ValidatorParametersValues {
    [name: string]: unknown;
    message?: string;
}

/* Excluded from this release type: ValidatorRegistry */

/* Excluded from this release type: ValidatorRegistryItem */

/* Excluded from this release type: validatorRegistryKey */

/* Excluded from this release type: ValidatorSchemaConfig */

/**
 * @public
 * @description - base response with returned value
 * @extends {BaseResponse} {@link BaseResponse}
 * @property {T} value - returned value
 * @template T
 */
export declare interface ValueResponse<T> extends BaseResponse {
    value: T;
}

/* Excluded from this release type: ViewElementDataGroupType */

/* Excluded from this release type: ViewElementGroupType */

/* Excluded from this release type: ViewElementMetadata */

/**
 * @public
 * @description Config to specify view element options.
 * @extends {BaseViewElementRegistrationConfig} {@link BaseViewElementRegistrationConfig}
 * @property {string} selector - view element tag selector; View element appears in DOM with this selector.
 *
 * @example
 * ```
 * @CrtViewElement({
 *   type: 'usr.Example',
 *   selector: 'usr-example',
 * })
 * ```
 */
export declare interface ViewElementRegistrationConfig extends BaseViewElementRegistrationConfig {
    /**
     * @description view element tag selector; View element appears in DOM with this selector.
     */
    selector: string;
}

/* Excluded from this release type: ViewElementRegistry */

/* Excluded from this release type: ViewElementRegistryItem */

/* Excluded from this release type: viewElementRegistryKey */

/* Excluded from this release type: ViewElementReuseStrategy */

/**
 * @public
 * @description Config to specify view element slot.
 */
export declare interface ViewElementSlotDefinition {
    /**
     * @description Slot name.
     */
    name: string;
    /* Excluded from this release type: lazy */
    /* Excluded from this release type: input */
}

export { ViewModelContext }

export { WindowFunctionColumn }

export { WindowFunctionExpression }

export { WindowFunctionExpressionConfig }

export { ɵAggregationSubQueryExpressionConfig }

/**
 * @public
 * @description For internal use only.
 * @hostPublicApi
 */
export declare class ɵBaseRegistry {
    private static readonly _prefix;
    private static _instance;
    protected static readonly registryKey: string;
    protected static get store(): ɵRegistryItemsStore;
    /**
     * @hostPubicApi available through window.creatio.registry.<registryKey>.store
     */
    protected store: ɵRegistryItemsStore;
}

/**
 * @public
 * @description For internal use only.
 */
export declare function ɵcheckTypeNameFormat(type: string, element: string): void;

/**
 * @public
 * @description For internal use only.
 */
export declare function ɵinstantiate<T = unknown>(type: Type<T>, resolveDependency: ResolveDependencyFn | undefined): T;

/**
 * @public
 * @description For internal use only.
 * @hostPublicApi
 */
declare interface ɵRegistryItemsStore {
    typeInfos: Map<string, any>;
}

export { }
