import { AggregationType } from '../../base-exports';
import { AggregationFunction } from '../../base-exports';
import { AggregationEvalType } from '../../base-exports';
/**
 * @internal
 */
export function toAggregationType(aggregationFunction) {
    switch (aggregationFunction) {
        case AggregationFunction.Count:
            return AggregationType.Count;
        case AggregationFunction.Sum:
            return AggregationType.Sum;
        case AggregationFunction.Avg:
            return AggregationType.Avg;
        case AggregationFunction.Min:
            return AggregationType.Min;
        case AggregationFunction.Max:
            return AggregationType.Max;
        case AggregationFunction.TopOne:
            return AggregationType.TopOne;
        default:
            return AggregationType.None;
    }
}
/**
 * @internal
 */
export function toAggregationFunction(aggregationType) {
    switch (aggregationType) {
        case AggregationType.Count:
            return AggregationFunction.Count;
        case AggregationType.Sum:
            return AggregationFunction.Sum;
        case AggregationType.Avg:
            return AggregationFunction.Avg;
        case AggregationType.Min:
            return AggregationFunction.Min;
        case AggregationType.Max:
            return AggregationFunction.Max;
        case AggregationType.TopOne:
            return AggregationFunction.TopOne;
        default:
            return AggregationFunction.None;
    }
}
/**
 * @internal
 */
export function toAggregationEvalType(aggregationEval) {
    switch (aggregationEval) {
        case 'all':
            return AggregationEvalType.All;
        case 'distinct':
            return AggregationEvalType.Distinct;
        default:
            return AggregationEvalType.None;
    }
}
/**
 * @internal
 */
export function toAggregationEval(aggregationEvalType) {
    switch (aggregationEvalType) {
        case AggregationEvalType.All:
            return 'all';
        case AggregationEvalType.Distinct:
            return 'distinct';
        default:
            return 'none';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRpb24tYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvZGV2a2l0L2NvbW1vbi9zcmMvbGliL2V4dGVybmFsL2Z1bmN0aW9ucy9hZ2dyZWdhdGlvbi1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd6RDs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxtQkFBd0M7SUFDekUsUUFBUSxtQkFBbUIsRUFBRTtRQUM1QixLQUFLLG1CQUFtQixDQUFDLEtBQUs7WUFDN0IsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDO1FBQzlCLEtBQUssbUJBQW1CLENBQUMsR0FBRztZQUMzQixPQUFPLGVBQWUsQ0FBQyxHQUFHLENBQUM7UUFDNUIsS0FBSyxtQkFBbUIsQ0FBQyxHQUFHO1lBQzNCLE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQztRQUM1QixLQUFLLG1CQUFtQixDQUFDLEdBQUc7WUFDM0IsT0FBTyxlQUFlLENBQUMsR0FBRyxDQUFDO1FBQzVCLEtBQUssbUJBQW1CLENBQUMsR0FBRztZQUMzQixPQUFPLGVBQWUsQ0FBQyxHQUFHLENBQUM7UUFDNUIsS0FBSyxtQkFBbUIsQ0FBQyxNQUFNO1lBQzlCLE9BQU8sZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUMvQjtZQUNDLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQztLQUM3QjtBQUNGLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxlQUFnQztJQUNyRSxRQUFRLGVBQWUsRUFBRTtRQUN4QixLQUFLLGVBQWUsQ0FBQyxLQUFLO1lBQ3pCLE9BQU8sbUJBQW1CLENBQUMsS0FBSyxDQUFDO1FBQ2xDLEtBQUssZUFBZSxDQUFDLEdBQUc7WUFDdkIsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLENBQUM7UUFDaEMsS0FBSyxlQUFlLENBQUMsR0FBRztZQUN2QixPQUFPLG1CQUFtQixDQUFDLEdBQUcsQ0FBQztRQUNoQyxLQUFLLGVBQWUsQ0FBQyxHQUFHO1lBQ3ZCLE9BQU8sbUJBQW1CLENBQUMsR0FBRyxDQUFDO1FBQ2hDLEtBQUssZUFBZSxDQUFDLEdBQUc7WUFDdkIsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLENBQUM7UUFDaEMsS0FBSyxlQUFlLENBQUMsTUFBTTtZQUMxQixPQUFPLG1CQUFtQixDQUFDLE1BQU0sQ0FBQztRQUNuQztZQUNDLE9BQU8sbUJBQW1CLENBQUMsSUFBSSxDQUFDO0tBQ2pDO0FBQ0YsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHFCQUFxQixDQUFDLGVBQWdDO0lBQ3JFLFFBQVEsZUFBZSxFQUFFO1FBQ3hCLEtBQUssS0FBSztZQUNULE9BQU8sbUJBQW1CLENBQUMsR0FBRyxDQUFDO1FBQ2hDLEtBQUssVUFBVTtZQUNkLE9BQU8sbUJBQW1CLENBQUMsUUFBUSxDQUFDO1FBQ3JDO1lBQ0MsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7S0FDakM7QUFDRixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsbUJBQXdDO0lBQ3pFLFFBQVEsbUJBQW1CLEVBQUU7UUFDNUIsS0FBSyxtQkFBbUIsQ0FBQyxHQUFHO1lBQzNCLE9BQU8sS0FBSyxDQUFDO1FBQ2QsS0FBSyxtQkFBbUIsQ0FBQyxRQUFRO1lBQ2hDLE9BQU8sVUFBVSxDQUFDO1FBQ25CO1lBQ0MsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZ2dyZWdhdGlvblR5cGUgfSBmcm9tICcuLi8uLi9iYXNlLWV4cG9ydHMnO1xuaW1wb3J0IHsgQWdncmVnYXRpb25GdW5jdGlvbiB9IGZyb20gJy4uLy4uL2Jhc2UtZXhwb3J0cyc7XG5pbXBvcnQgeyBBZ2dyZWdhdGlvbkV2YWxUeXBlIH0gZnJvbSAnLi4vLi4vYmFzZS1leHBvcnRzJztcbmltcG9ydCB7IEFnZ3JlZ2F0aW9uRXZhbCB9IGZyb20gJy4uLy4uL2Jhc2UtZXhwb3J0cyc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0FnZ3JlZ2F0aW9uVHlwZShhZ2dyZWdhdGlvbkZ1bmN0aW9uOiBBZ2dyZWdhdGlvbkZ1bmN0aW9uKTogQWdncmVnYXRpb25UeXBlIHtcblx0c3dpdGNoIChhZ2dyZWdhdGlvbkZ1bmN0aW9uKSB7XG5cdFx0Y2FzZSBBZ2dyZWdhdGlvbkZ1bmN0aW9uLkNvdW50OlxuXHRcdFx0cmV0dXJuIEFnZ3JlZ2F0aW9uVHlwZS5Db3VudDtcblx0XHRjYXNlIEFnZ3JlZ2F0aW9uRnVuY3Rpb24uU3VtOlxuXHRcdFx0cmV0dXJuIEFnZ3JlZ2F0aW9uVHlwZS5TdW07XG5cdFx0Y2FzZSBBZ2dyZWdhdGlvbkZ1bmN0aW9uLkF2Zzpcblx0XHRcdHJldHVybiBBZ2dyZWdhdGlvblR5cGUuQXZnO1xuXHRcdGNhc2UgQWdncmVnYXRpb25GdW5jdGlvbi5NaW46XG5cdFx0XHRyZXR1cm4gQWdncmVnYXRpb25UeXBlLk1pbjtcblx0XHRjYXNlIEFnZ3JlZ2F0aW9uRnVuY3Rpb24uTWF4OlxuXHRcdFx0cmV0dXJuIEFnZ3JlZ2F0aW9uVHlwZS5NYXg7XG5cdFx0Y2FzZSBBZ2dyZWdhdGlvbkZ1bmN0aW9uLlRvcE9uZTpcblx0XHRcdHJldHVybiBBZ2dyZWdhdGlvblR5cGUuVG9wT25lO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gQWdncmVnYXRpb25UeXBlLk5vbmU7XG5cdH1cbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQWdncmVnYXRpb25GdW5jdGlvbihhZ2dyZWdhdGlvblR5cGU6IEFnZ3JlZ2F0aW9uVHlwZSk6IEFnZ3JlZ2F0aW9uRnVuY3Rpb24ge1xuXHRzd2l0Y2ggKGFnZ3JlZ2F0aW9uVHlwZSkge1xuXHRcdGNhc2UgQWdncmVnYXRpb25UeXBlLkNvdW50OlxuXHRcdFx0cmV0dXJuIEFnZ3JlZ2F0aW9uRnVuY3Rpb24uQ291bnQ7XG5cdFx0Y2FzZSBBZ2dyZWdhdGlvblR5cGUuU3VtOlxuXHRcdFx0cmV0dXJuIEFnZ3JlZ2F0aW9uRnVuY3Rpb24uU3VtO1xuXHRcdGNhc2UgQWdncmVnYXRpb25UeXBlLkF2Zzpcblx0XHRcdHJldHVybiBBZ2dyZWdhdGlvbkZ1bmN0aW9uLkF2Zztcblx0XHRjYXNlIEFnZ3JlZ2F0aW9uVHlwZS5NaW46XG5cdFx0XHRyZXR1cm4gQWdncmVnYXRpb25GdW5jdGlvbi5NaW47XG5cdFx0Y2FzZSBBZ2dyZWdhdGlvblR5cGUuTWF4OlxuXHRcdFx0cmV0dXJuIEFnZ3JlZ2F0aW9uRnVuY3Rpb24uTWF4O1xuXHRcdGNhc2UgQWdncmVnYXRpb25UeXBlLlRvcE9uZTpcblx0XHRcdHJldHVybiBBZ2dyZWdhdGlvbkZ1bmN0aW9uLlRvcE9uZTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIEFnZ3JlZ2F0aW9uRnVuY3Rpb24uTm9uZTtcblx0fVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9BZ2dyZWdhdGlvbkV2YWxUeXBlKGFnZ3JlZ2F0aW9uRXZhbDogQWdncmVnYXRpb25FdmFsKTogQWdncmVnYXRpb25FdmFsVHlwZSB7XG5cdHN3aXRjaCAoYWdncmVnYXRpb25FdmFsKSB7XG5cdFx0Y2FzZSAnYWxsJzpcblx0XHRcdHJldHVybiBBZ2dyZWdhdGlvbkV2YWxUeXBlLkFsbDtcblx0XHRjYXNlICdkaXN0aW5jdCc6XG5cdFx0XHRyZXR1cm4gQWdncmVnYXRpb25FdmFsVHlwZS5EaXN0aW5jdDtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIEFnZ3JlZ2F0aW9uRXZhbFR5cGUuTm9uZTtcblx0fVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9BZ2dyZWdhdGlvbkV2YWwoYWdncmVnYXRpb25FdmFsVHlwZTogQWdncmVnYXRpb25FdmFsVHlwZSk6IEFnZ3JlZ2F0aW9uRXZhbCB7XG5cdHN3aXRjaCAoYWdncmVnYXRpb25FdmFsVHlwZSkge1xuXHRcdGNhc2UgQWdncmVnYXRpb25FdmFsVHlwZS5BbGw6XG5cdFx0XHRyZXR1cm4gJ2FsbCc7XG5cdFx0Y2FzZSBBZ2dyZWdhdGlvbkV2YWxUeXBlLkRpc3RpbmN0OlxuXHRcdFx0cmV0dXJuICdkaXN0aW5jdCc7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiAnbm9uZSc7XG5cdH1cbn1cbiJdfQ==