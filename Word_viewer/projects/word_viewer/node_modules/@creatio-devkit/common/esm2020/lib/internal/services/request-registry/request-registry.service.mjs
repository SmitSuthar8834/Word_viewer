import { checkIfTypeRegistered } from '../element-registration-checker';
/**
 * @internal
 */
export class RequestRegistryService {
    static get requestsRegistrationInfos() {
        return this._requestsRegistrationInfos;
    }
    /**
     * Registers a specified request class.
     * @param config Request registration config.
     * @param type Request type.
     */
    static register(config, type) {
        const requestType = config.type;
        // TODO RND-21723
        RequestRegistryService._requestsMap.set(requestType, type);
        RequestRegistryService._requestsRegistrationInfos.set(requestType, config);
    }
    /**
     * Creates request instance by specified registered request type.
     * @param type Request type.
     * @returns The instance of registered request.
     */
    static get(type) {
        const requestInstanceConstructor = RequestRegistryService._requestsMap.get(type);
        checkIfTypeRegistered(type, requestInstanceConstructor);
        return requestInstanceConstructor && new requestInstanceConstructor();
    }
}
RequestRegistryService._requestsMap = new Map();
RequestRegistryService._requestsRegistrationInfos = new Map();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1yZWdpc3RyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvY29tbW9uL3NyYy9saWIvaW50ZXJuYWwvc2VydmljZXMvcmVxdWVzdC1yZWdpc3RyeS9yZXF1ZXN0LXJlZ2lzdHJ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFPeEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sc0JBQXNCO0lBSTNCLE1BQU0sS0FBSyx5QkFBeUI7UUFDMUMsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQWlDLEVBQUUsSUFBcUI7UUFDOUUsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQyxpQkFBaUI7UUFDakIsc0JBQXNCLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0Qsc0JBQXNCLENBQUMsMEJBQTBCLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBWTtRQUM3QixNQUFNLDBCQUEwQixHQUFHLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakYscUJBQXFCLENBQUMsSUFBSSxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDeEQsT0FBTywwQkFBMEIsSUFBSSxJQUFJLDBCQUEwQixFQUFFLENBQUM7SUFDdkUsQ0FBQzs7QUE1QmMsbUNBQVksR0FBRyxJQUFJLEdBQUcsRUFBMkIsQ0FBQztBQUNsRCxpREFBMEIsR0FBRyxJQUFJLEdBQUcsRUFBcUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vYmFzZS1leHBvcnRzJztcbmltcG9ydCB7IFJlcXVlc3RSZWdpc3RyYXRpb25Db25maWcgfSBmcm9tICcuLi8uLi8uLi9wdWJsaWMvbW9kZWxzJztcbmltcG9ydCB7IGNoZWNrSWZUeXBlUmVnaXN0ZXJlZCB9IGZyb20gJy4uL2VsZW1lbnQtcmVnaXN0cmF0aW9uLWNoZWNrZXInO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdHlwZSBCYXNlUmVxdWVzdEN0b3IgPSBuZXcgKCkgPT4gQmFzZVJlcXVlc3Q7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0UmVnaXN0cnlTZXJ2aWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgX3JlcXVlc3RzTWFwID0gbmV3IE1hcDxzdHJpbmcsIEJhc2VSZXF1ZXN0Q3Rvcj4oKTtcblx0cHJpdmF0ZSBzdGF0aWMgX3JlcXVlc3RzUmVnaXN0cmF0aW9uSW5mb3MgPSBuZXcgTWFwPHN0cmluZywgUmVxdWVzdFJlZ2lzdHJhdGlvbkNvbmZpZz4oKTtcblxuXHRwdWJsaWMgc3RhdGljIGdldCByZXF1ZXN0c1JlZ2lzdHJhdGlvbkluZm9zKCk6IFJlYWRvbmx5TWFwPHN0cmluZywgUmVxdWVzdFJlZ2lzdHJhdGlvbkNvbmZpZz4ge1xuXHRcdHJldHVybiB0aGlzLl9yZXF1ZXN0c1JlZ2lzdHJhdGlvbkluZm9zO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVycyBhIHNwZWNpZmllZCByZXF1ZXN0IGNsYXNzLlxuXHQgKiBAcGFyYW0gY29uZmlnIFJlcXVlc3QgcmVnaXN0cmF0aW9uIGNvbmZpZy5cblx0ICogQHBhcmFtIHR5cGUgUmVxdWVzdCB0eXBlLlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyByZWdpc3Rlcihjb25maWc6IFJlcXVlc3RSZWdpc3RyYXRpb25Db25maWcsIHR5cGU6IEJhc2VSZXF1ZXN0Q3Rvcikge1xuXHRcdGNvbnN0IHJlcXVlc3RUeXBlID0gY29uZmlnLnR5cGU7XG5cdFx0Ly8gVE9ETyBSTkQtMjE3MjNcblx0XHRSZXF1ZXN0UmVnaXN0cnlTZXJ2aWNlLl9yZXF1ZXN0c01hcC5zZXQocmVxdWVzdFR5cGUsIHR5cGUpO1xuXHRcdFJlcXVlc3RSZWdpc3RyeVNlcnZpY2UuX3JlcXVlc3RzUmVnaXN0cmF0aW9uSW5mb3Muc2V0KHJlcXVlc3RUeXBlLCBjb25maWcpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgcmVxdWVzdCBpbnN0YW5jZSBieSBzcGVjaWZpZWQgcmVnaXN0ZXJlZCByZXF1ZXN0IHR5cGUuXG5cdCAqIEBwYXJhbSB0eXBlIFJlcXVlc3QgdHlwZS5cblx0ICogQHJldHVybnMgVGhlIGluc3RhbmNlIG9mIHJlZ2lzdGVyZWQgcmVxdWVzdC5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZ2V0KHR5cGU6IHN0cmluZyk6IEJhc2VSZXF1ZXN0IHwgdW5kZWZpbmVkIHtcblx0XHRjb25zdCByZXF1ZXN0SW5zdGFuY2VDb25zdHJ1Y3RvciA9IFJlcXVlc3RSZWdpc3RyeVNlcnZpY2UuX3JlcXVlc3RzTWFwLmdldCh0eXBlKTtcblx0XHRjaGVja0lmVHlwZVJlZ2lzdGVyZWQodHlwZSwgcmVxdWVzdEluc3RhbmNlQ29uc3RydWN0b3IpO1xuXHRcdHJldHVybiByZXF1ZXN0SW5zdGFuY2VDb25zdHJ1Y3RvciAmJiBuZXcgcmVxdWVzdEluc3RhbmNlQ29uc3RydWN0b3IoKTtcblx0fVxufVxuIl19