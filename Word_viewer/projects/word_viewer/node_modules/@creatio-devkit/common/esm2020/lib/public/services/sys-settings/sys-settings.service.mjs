import { __decorate, __metadata } from "tslib";
import { ImplementUsingHandlerChain } from '../../../internal/decorators/implement-using-handler-chain';
import { BaseHandlerChainService } from '../../../internal/services/base-handler-chain.service';
/**
 * @public
 * @class SysSettingsService
 * @classdesc Service to working with system settings using handler chain
 * @extends {BaseHandlerChainService}
 */
// TODO RND-45286 (implement BaseSysSettingsService)
export class SysSettingsService extends BaseHandlerChainService {
    constructor() {
        super(...arguments);
        /**
         * @internal
         */
        this.requestType = 'crt.SysSettingsService';
    }
}
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function)
], SysSettingsService.prototype, "getByCodes", void 0);
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function)
], SysSettingsService.prototype, "getByCode", void 0);
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function)
], SysSettingsService.prototype, "update", void 0);
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function)
], SysSettingsService.prototype, "updateMany", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzLXNldHRpbmdzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9jb21tb24vc3JjL2xpYi9wdWJsaWMvc2VydmljZXMvc3lzLXNldHRpbmdzL3N5cy1zZXR0aW5ncy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUN4RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQThEaEc7Ozs7O0dBS0c7QUFDSCxvREFBb0Q7QUFDcEQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLHVCQUF1QjtJQUEvRDs7UUFDQzs7V0FFRztRQUNhLGdCQUFXLEdBQUcsd0JBQXdCLENBQUM7SUFtQ3hELENBQUM7Q0FBQTtBQTVCQTtJQUFDLDBCQUEwQixFQUFFOztzREFDd0Q7QUFPckY7SUFBQywwQkFBMEIsRUFBRTs7cURBQ3NDO0FBUW5FO0lBQUMsMEJBQTBCLEVBQUU7O2tEQUNnRjtBQVE3RztJQUFDLDBCQUEwQixFQUFFOztzREFDdUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTeXNTZXR0aW5nLCBTeXNTZXR0aW5nVmFsdWUgfSBmcm9tICcuL3N5cy1zZXR0aW5nLm1vZGVsJztcbmltcG9ydCB7IEltcGxlbWVudFVzaW5nSGFuZGxlckNoYWluIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJuYWwvZGVjb3JhdG9ycy9pbXBsZW1lbnQtdXNpbmctaGFuZGxlci1jaGFpbic7XG5pbXBvcnQgeyBCYXNlSGFuZGxlckNoYWluU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2ludGVybmFsL3NlcnZpY2VzL2Jhc2UtaGFuZGxlci1jaGFpbi5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVscyc7XG5cbi8qKlxuICogQHB1YmxpY1xuICogQGRlc2NyaXB0aW9uIFJlc3BvbnNlIGZvciBxdWVyeWluZyBvZiBzeXN0ZW0gc2V0dGluZ3NcbiAqIEBleHRlbmRzIHtCYXNlUmVzcG9uc2V9XG4gKiBAcHJvcGVydHkge1JlY29yZDxzdHJpbmcsIFN5c1NldHRpbmc+fSB2YWx1ZXMgLSBzeXN0ZW0gc2V0dGluZ3MgdmFsdWVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlTeXNTZXR0aW5nc1Jlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcblx0LyoqXG5cdCAqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBTeXNTZXR0aW5nPn1cblx0ICogQGRlc2NyaXB0aW9uIHN5c3RlbSBzZXR0aW5ncyB2YWx1ZXMuIHtAbGluayBTeXNTZXR0aW5nfVxuXHQgKi9cblx0dmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBTeXNTZXR0aW5nPjtcblxuXHQvKipcblx0ICogQHR5cGUge0FycmF5PHN0cmluZz59XG5cdCAqIEBkZXNjcmlwdGlvbiBub3QgZm91bmQgc3lzdGVtIHNldHRpbmdzIGNvZGVzLlxuXHQgKi9cblx0bm90Rm91bmRTZXR0aW5ncz86IEFycmF5PHN0cmluZz47XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICogQGRlc2NyaXB0aW9uIFJlc3BvbnNlIGZvciBzYXZpbmcgc3lzdGVtIHNldHRpbmdzXG4gKiBAZXh0ZW5kcyB7QmFzZVJlc3BvbnNlfVxuICogQHByb3BlcnR5IHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBzYXZlUmVzdWx0IC0gc2F2aW5nIHJlc3VsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJvd3NBZmZlY3RlZCAtICBDb3VudCBvZiBhZmZlY3RlZCByb3dzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2F2ZVN5c1NldHRpbmdzUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIHNhdmluZyByZXN1bHRcblx0ICovXG5cdHNhdmVSZXN1bHQ6IFJlY29yZDxzdHJpbmcsIGFueT47XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBDb3VudCBvZiBhZmZlY3RlZCByb3dzXG5cdCAqL1xuXHRyb3dzQWZmZWN0ZWQ6IG51bWJlcjtcblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkZXNjcmlwdGlvblxuXHQgKi9cblx0bmV4dFByY0VsUmVhZHk6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICogQGRlc2NyaXB0aW9uIFJlc3BvbnNlIGZvciBwcmVsb2FkIGNhY2hhYmxlIHN5c3RlbSBzZXR0aW5ncy5cbiAqIEBleHRlbmRzIHtCYXNlUmVzcG9uc2V9XG4gKiBAcHJvcGVydHkge1JlY29yZDxzdHJpbmcsIFN5c1NldHRpbmc+fSB2YWx1ZXMgLSBzeXN0ZW0gc2V0dGluZ3MgdmFsdWVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJlbG9hZFN5c1NldHRpbmdzUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuXHQvKipcblx0ICogQHR5cGUge1JlY29yZDxzdHJpbmcsIFN5c1NldHRpbmc+fVxuXHQgKiBAZGVzY3JpcHRpb24gc3lzdGVtIHNldHRpbmdzIHZhbHVlcy4ge0BsaW5rIFN5c1NldHRpbmd9XG5cdCAqL1xuXHR2YWx1ZXM6IFJlY29yZDxzdHJpbmcsIFN5c1NldHRpbmc+O1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqIEBjbGFzcyBTeXNTZXR0aW5nc1NlcnZpY2VcbiAqIEBjbGFzc2Rlc2MgU2VydmljZSB0byB3b3JraW5nIHdpdGggc3lzdGVtIHNldHRpbmdzIHVzaW5nIGhhbmRsZXIgY2hhaW5cbiAqIEBleHRlbmRzIHtCYXNlSGFuZGxlckNoYWluU2VydmljZX1cbiAqL1xuLy8gVE9ETyBSTkQtNDUyODYgKGltcGxlbWVudCBCYXNlU3lzU2V0dGluZ3NTZXJ2aWNlKVxuZXhwb3J0IGNsYXNzIFN5c1NldHRpbmdzU2VydmljZSBleHRlbmRzIEJhc2VIYW5kbGVyQ2hhaW5TZXJ2aWNlIHtcblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IHJlcXVlc3RUeXBlID0gJ2NydC5TeXNTZXR0aW5nc1NlcnZpY2UnO1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHRvIGdldCBzeXN0ZW0gc2V0dGluZ3MgYnkgY29kZXNcblx0ICogQHBhcmFtIHtzdHJpbmdbXX0gc3lzU2V0dGluZ0NvZGVzIC0gc3lzdGVtIHNldHRpbmdzIGNvZGVzXG5cdCAqIEByZXR1cm5zIGBQcm9taXNlPFF1ZXJ5U3lzU2V0dGluZ3NSZXNwb25zZT5gIHtAbGluayBRdWVyeVN5c1NldHRpbmdzUmVzcG9uc2V9XG5cdCAqL1xuXHRASW1wbGVtZW50VXNpbmdIYW5kbGVyQ2hhaW4oKVxuXHRwdWJsaWMgZ2V0QnlDb2RlcyE6IChzeXNTZXR0aW5nQ29kZXM6IHN0cmluZ1tdKSA9PiBQcm9taXNlPFF1ZXJ5U3lzU2V0dGluZ3NSZXNwb25zZT47XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBNZXRob2QgdG8gZ2V0IHN5c3RlbSBzZXR0aW5nIGJ5IGNvZGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IHN5c1NldHRpbmdDb2RlIC0gc3lzdGVtIHNldHRpbmdzIGNvZGVcblx0ICogQHJldHVybnMgYFByb21pc2U8U3lzU2V0dGluZz5gXG5cdCAqL1xuXHRASW1wbGVtZW50VXNpbmdIYW5kbGVyQ2hhaW4oKVxuXHRwdWJsaWMgZ2V0QnlDb2RlITogKHN5c1NldHRpbmdDb2RlOiBzdHJpbmcpID0+IFByb21pc2U8U3lzU2V0dGluZz47XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBNZXRob2QgdG8gdXBkYXRlIHN5c3RlbSBzZXR0aW5nXG5cdCAqIEBwYXJhbSB7U3lzU2V0dGluZ1ZhbHVlfSBzeXNTZXR0aW5nVmFsdWUgLSB7QGxpbmsgU3lzU2V0dGluZ1ZhbHVlfVxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUGVyc29uYWwgLSBGbGFnIHRoYXQgaW5kaWNhdGVzIHRoYXQgc3lzU2V0dGluZyB2YWx1ZSBpcyBwZXJzb25hbC5cblx0ICogQHJldHVybnMgYFByb21pc2U8U2F2ZVN5c1NldHRpbmdzUmVzcG9uc2U+YCB7QGxpbmsgU2F2ZVN5c1NldHRpbmdzUmVzcG9uc2V9XG5cdCAqL1xuXHRASW1wbGVtZW50VXNpbmdIYW5kbGVyQ2hhaW4oKVxuXHRwdWJsaWMgdXBkYXRlITogKHN5c1NldHRpbmdWYWx1ZTogU3lzU2V0dGluZ1ZhbHVlLCBpc1BlcnNvbmFsPzogYm9vbGVhbikgPT4gUHJvbWlzZTxTYXZlU3lzU2V0dGluZ3NSZXNwb25zZT47XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiAgTWV0aG9kIHRvIGJ1bGsgdXBkYXRlIHN5c3RlbSBzZXR0aW5nc1xuXHQgKiBAcGFyYW0ge1N5c1NldHRpbmdWYWx1ZVtdfSBzeXNTZXR0aW5nVmFsdWVzIC0gc3lzdGVtIHNldHRpbmdzIHZhbHVlcyB7QGxpbmsgU3lzU2V0dGluZ1ZhbHVlfVxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUGVyc29uYWwgLSBGbGFnIHRoYXQgaW5kaWNhdGVzIHRoYXQgc3lzU2V0dGluZyB2YWx1ZXMgYXJlIHBlcnNvbmFsLlxuXHQgKiBAcmV0dXJucyBgUHJvbWlzZTxTYXZlU3lzU2V0dGluZ3NSZXNwb25zZT5gIHtAbGluayBTYXZlU3lzU2V0dGluZ3NSZXNwb25zZX1cblx0ICovXG5cdEBJbXBsZW1lbnRVc2luZ0hhbmRsZXJDaGFpbigpXG5cdHB1YmxpYyB1cGRhdGVNYW55ITogKHN5c1NldHRpbmdWYWx1ZXM6IFN5c1NldHRpbmdWYWx1ZVtdLCBpc1BlcnNvbmFsPzogYm9vbGVhbikgPT4gUHJvbWlzZTxTYXZlU3lzU2V0dGluZ3NSZXNwb25zZT47XG59XG4iXX0=