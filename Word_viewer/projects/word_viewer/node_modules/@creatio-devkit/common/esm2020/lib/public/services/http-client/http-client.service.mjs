import { __decorate, __metadata } from "tslib";
import { ImplementUsingHandlerChain } from '../../../internal/decorators/implement-using-handler-chain';
import { BaseHandlerChainService } from '../../../internal/services/base-handler-chain.service';
/**
 * @public
 * @classdesc Http service to perform Http requests
 * @extends {BaseHandlerChainService}
 */
export class HttpClientService extends BaseHandlerChainService {
    constructor() {
        super(...arguments);
        /**
         * @internal
         */
        this.requestType = 'crt.HttpClientService';
    }
    /**
     * @description HTTP GET request.
     * @return `Promise<HttpResponse> | void`  {(Promise<HttpResponse> | void)}
     */
    get() {
        // the method will be implemented dynamically by the decorator
    }
    /**
     * @description HTTP POST request.
     * @return `Promise<HttpResponse> | void`  {(Promise<HttpResponse> | void)}
     */
    post() {
        // the method will be implemented dynamically by the decorator
    }
    /**
     * @description HTTP DELETE request.
     * @return `Promise<HttpResponse> | void`  {(Promise<HttpResponse> | void)}
     */
    delete() {
        // the method will be implemented dynamically by the decorator
    }
    /**
     * @description HTTP PUT request.
     * @return `Promise<HttpResponse> | void``  {(Promise<HttpResponse> | void)}
     */
    put() {
        // the method will be implemented dynamically by the decorator
    }
    /**
     * @description HTTP PATCH request.
     * @return `Promise<HttpResponse> | void`  {(Promise<HttpResponse> | void)}
     */
    patch() {
        // the method will be implemented dynamically by the decorator
    }
}
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], HttpClientService.prototype, "get", null);
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], HttpClientService.prototype, "post", null);
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], HttpClientService.prototype, "delete", null);
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], HttpClientService.prototype, "put", null);
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], HttpClientService.prototype, "patch", null);
//# sourceMappingURL=data:application/json;base64,