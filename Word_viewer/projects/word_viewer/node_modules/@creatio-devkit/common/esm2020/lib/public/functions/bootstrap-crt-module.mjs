import { HandlerSourceType } from '../../internal/enums';
import { BootstrapNotifier, ConverterRegistry, DesignTimeViewElementRegistry, InterfaceDesignerItemRegistry, RemoteEntriesRegistry, RequestHandlerRegistryService, ValidatorRegistry, ViewElementRegistry, } from '../../internal/services';
import { applyLocalizeMetadataFn, getConverterMetadata, getDesignTimeViewElementMetadata, getInterfaceDesignerItemMetadata, getModuleMetadata, getRequestHandlerMetadata, getValidatorMetadata, getViewElementMetadata, hasInterfaceDesignerItemMetadata, instantiate, } from '../../internal/utils';
function checkRemoteName(remoteName) {
    if (!RemoteEntriesRegistry.items.has(remoteName)) {
        throw new Error(`Remote entry with name '${remoteName}' does not exist`);
    }
}
/**
 * @internal
 */
function resistantForEach(items, callback) {
    items.forEach((item) => {
        try {
            callback(item);
        }
        catch (error) {
            console.error(error);
        }
    });
}
/**
 * @internal
 */
function registerViewElements(types) {
    resistantForEach(types, (type) => {
        const registrationConfig = getViewElementMetadata(type);
        ViewElementRegistry.validate(registrationConfig);
        ViewElementRegistry.register(registrationConfig);
    });
}
/**
 * @internal
 */
function registerInterfaceDesignerItems(types, localizeFn) {
    resistantForEach(types, (type) => {
        if (!hasInterfaceDesignerItemMetadata(type)) {
            return;
        }
        let config = getInterfaceDesignerItemMetadata(type);
        config = applyLocalizeMetadataFn(config, localizeFn);
        const viewElementMetadata = getViewElementMetadata(type);
        config.type = viewElementMetadata.type;
        InterfaceDesignerItemRegistry.validate(config);
        InterfaceDesignerItemRegistry.register(config);
    });
}
/**
 * @internal
 */
function registerDesignTimeViewElements(types) {
    resistantForEach(types, (type) => {
        const registrationConfig = getDesignTimeViewElementMetadata(type);
        DesignTimeViewElementRegistry.validate(registrationConfig);
        DesignTimeViewElementRegistry.register(registrationConfig);
    });
}
/**
 * @internal
 */
function registerValidators(types, options) {
    resistantForEach(types, (type) => {
        const metadata = getValidatorMetadata(type);
        const registrationConfig = {
            ...metadata,
            instantiate: function (injectionContext) {
                const resolveDependency = options?.resolveDependency
                    ? (token) => options.resolveDependency(token, injectionContext)
                    : null;
                return instantiate(type, resolveDependency);
            },
        };
        ValidatorRegistry.validate(registrationConfig);
        ValidatorRegistry.register(registrationConfig);
    });
}
/**
 * @internal
 */
function registerConverters(types, options) {
    resistantForEach(types, (type) => {
        const metadata = getConverterMetadata(type);
        const registrationConfig = {
            ...metadata,
            instantiate: function (injectionContext) {
                const resolveDependency = options?.resolveDependency
                    ? (token) => options.resolveDependency(token, injectionContext)
                    : null;
                return instantiate(type, resolveDependency);
            },
        };
        ConverterRegistry.register(registrationConfig);
    });
}
/**
 * @internal
 */
function registerRequestHandlers(types, options, remoteName) {
    if (options.moduleType === 'remote' && !remoteName) {
        console.error("To use request handlers, 'remoteName' parameter should be specified.");
        return;
    }
    resistantForEach(types, (type) => {
        const metadata = getRequestHandlerMetadata(type);
        let registrationConfig;
        const createHandler = (injectionContext) => {
            const resolveDependency = options?.resolveDependency
                ? (token) => options.resolveDependency(token, injectionContext)
                : null;
            return instantiate(type, resolveDependency);
        };
        if (options.moduleType === 'host') {
            registrationConfig = {
                ...metadata,
                source: { type: HandlerSourceType.Host },
                createHandler,
            };
        }
        else {
            const remote = RemoteEntriesRegistry.items.get(remoteName);
            registrationConfig = {
                ...metadata,
                source: {
                    type: HandlerSourceType.Remote,
                    packageName: remote.packageName,
                },
                createHandler,
            };
        }
        RequestHandlerRegistryService.register(registrationConfig, type);
    });
}
function bootstrapDefaultCrtModule(name, type, options) {
    try {
        const moduleDefinition = getModuleMetadata(type);
        if (moduleDefinition.viewElements) {
            registerViewElements(moduleDefinition.viewElements);
            registerInterfaceDesignerItems(moduleDefinition.viewElements, options?.localizeMetadata);
        }
        if (moduleDefinition.designTimeViewElements) {
            registerDesignTimeViewElements(moduleDefinition.designTimeViewElements);
        }
        if (moduleDefinition.requestHandlers) {
            registerRequestHandlers(moduleDefinition.requestHandlers, options, name);
        }
        if (moduleDefinition.validators) {
            registerValidators(moduleDefinition.validators, options);
        }
        if (moduleDefinition.converters) {
            registerConverters(moduleDefinition.converters, options);
        }
        moduleDefinition.includes?.forEach((t) => {
            bootstrapDefaultCrtModule(name, t, options);
            bootstrapPredefinedModules(name, t, options);
        });
    }
    catch (error) {
        console.error(error);
    }
}
/**
 * @internal
 */
function bootstrapPredefinedModules(name, type, options) {
    const modulePrefix = 'module:';
    const metadataKeys = Reflect.getOwnMetadataKeys(type);
    for (const key of metadataKeys) {
        if (typeof key === 'string' && key.startsWith(modulePrefix)) {
            const moduleType = key.substring(modulePrefix.length);
            const predefinedBootstrapper = Reflect.getOwnMetadata('moduleBootstrapper:' + moduleType, type);
            try {
                predefinedBootstrapper(name, type, options);
            }
            catch (error) {
                console.error(error);
            }
        }
    }
}
/**
 * @internal
 */
export function bootstrapCrtModule(...args) {
    const name = typeof args[0] === 'string' ? args.shift() : undefined;
    const type = args[0];
    const options = args[1] ?? {};
    options.moduleType ?? (options.moduleType = 'remote');
    if (name) {
        if (options.moduleType === 'remote') {
            checkRemoteName(name);
        }
        else {
            throw new Error('Host module cannot have name');
        }
    }
    bootstrapDefaultCrtModule(name, type, options);
    bootstrapPredefinedModules(name, type, options);
    if (options.moduleType === 'remote') {
        BootstrapNotifier.instance.notify(type);
    }
}
//# sourceMappingURL=data:application/json;base64,