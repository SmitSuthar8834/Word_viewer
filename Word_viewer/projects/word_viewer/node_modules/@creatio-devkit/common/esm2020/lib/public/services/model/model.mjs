import { __decorate, __metadata } from "tslib";
import { ImplementUsingHandlerChain } from '../../../internal/decorators/implement-using-handler-chain';
import { BaseHandlerChainService } from '../../../internal/services/base-handler-chain.service';
/**
 * @internal
 */
export const _from = Symbol('CreateModelFrom');
/**
 * @public
 */
export class Model extends BaseHandlerChainService {
    constructor(crtModel) {
        super();
        /**
         * @internal
         */
        this.requestType = 'crt.ModelGenerator';
        this._crtModel = crtModel;
    }
    static get instance() {
        if (!this._instance) {
            this._instance = new Model();
        }
        return this._instance;
    }
    /**
     * @internal
     * Gets the model name.
     */
    get name() {
        return this._crtModel?.name;
    }
    /**
     * @internal
     */
    static [_from](crtModel) {
        return new Model(crtModel);
    }
    static async create(dataSchema) {
        const crtModel = await this.instance._create({
            type: 'crt.EntityDataSource',
            config: {
                entitySchemaName: dataSchema,
            },
        }, '');
        return new Model(crtModel);
    }
    getSchema() {
        return this._crtModel._getAsyncResult(this._crtModel.getSchema());
    }
    load(config) {
        return this._crtModel._getAsyncResult(this._crtModel.load(config));
    }
    insert(dto) {
        return this._crtModel._getAsyncResult(this._crtModel.insert(dto));
    }
    update(dto, parameters) {
        return this._crtModel._getAsyncResult(this._crtModel.update(dto, parameters));
    }
    copy(primaryColumnValue, data = {}) {
        return this._crtModel._getAsyncResult(this._crtModel.copy(primaryColumnValue, data));
    }
    create(data = {}) {
        return this._crtModel._getAsyncResult(this._crtModel.create(data));
    }
    delete(parameters) {
        return this._crtModel._getAsyncResult(this._crtModel.delete(parameters));
    }
    canSave(params) {
        return this._crtModel._getAsyncResult(this._crtModel.canSave(params));
    }
    canDelete(params) {
        return this._crtModel._getAsyncResult(this._crtModel.canDelete(params));
    }
}
__decorate([
    ImplementUsingHandlerChain({
        methodName: 'generateOne',
    }),
    __metadata("design:type", Function)
], Model.prototype, "_create", void 0);
//# sourceMappingURL=data:application/json;base64,