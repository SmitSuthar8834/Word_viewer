import { ViewElementGroupType } from '../../../internal/enums';
import { setInterfaceDesignerItemMetadata } from '../../../internal/utils';
/**
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function CrtInterfaceDesignerItem(config) {
    function _applyTypeCaption() {
        if (!config.typeCaption && config.toolbarConfig) {
            const toolbarConfig = Array.isArray(config.toolbarConfig)
                ? config.toolbarConfig[0]
                : config.toolbarConfig;
            config.typeCaption = toolbarConfig.caption;
        }
    }
    return function (type) {
        config.typeRef = type;
        config.viewElementGroupType ?? (config.viewElementGroupType = ViewElementGroupType.CustomElements);
        _applyTypeCaption();
        setInterfaceDesignerItemMetadata(config, type);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlLWRlc2lnbmVyLWl0ZW0uZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvY29tbW9uL3NyYy9saWIvcHVibGljL2RlY29yYXRvcnMvaW50ZXJmYWNlLWRlc2lnbmVyLWl0ZW0vaW50ZXJmYWNlLWRlc2lnbmVyLWl0ZW0uZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRS9ELE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBMEMzRTs7R0FFRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsd0JBQXdCLENBQ3ZDLE1BQXlGO0lBRXpGLFNBQVMsaUJBQWlCO1FBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDaEQsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO2dCQUN4RCxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLENBQUMsQ0FBRSxNQUFNLENBQUMsYUFBMEMsQ0FBQztZQUN0RCxNQUFNLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7U0FDM0M7SUFDRixDQUFDO0lBRUQsT0FBTyxVQUFVLElBQVU7UUFDMUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDdEIsTUFBTSxDQUFDLG9CQUFvQixLQUEzQixNQUFNLENBQUMsb0JBQW9CLEdBQUssb0JBQW9CLENBQUMsY0FBYyxFQUFDO1FBQ3BFLGlCQUFpQixFQUFFLENBQUM7UUFDcEIsZ0NBQWdDLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBub2luc3BlY3Rpb24gRVM2UHJlZmVyU2hvcnRJbXBvcnRcbmltcG9ydCB7VHlwZX0gZnJvbSAnLi4vLi4vLi4vYmFzZS1leHBvcnRzJztcbmltcG9ydCB7IFZpZXdFbGVtZW50R3JvdXBUeXBlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJuYWwvZW51bXMnO1xuaW1wb3J0IHsgSW50ZXJuYWxJbnRlcmZhY2VEZXNpZ25lckl0ZW1SZWdpc3RyYXRpb25Db25maWcsIFRvb2xiYXJWaWV3RWxlbWVudENvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2ludGVybmFsL21vZGVscyc7XG5pbXBvcnQgeyBzZXRJbnRlcmZhY2VEZXNpZ25lckl0ZW1NZXRhZGF0YSB9IGZyb20gJy4uLy4uLy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IEludGVyZmFjZURlc2lnbmVySXRlbURlZmluaXRpb24gfSBmcm9tICcuLi8uLi9tb2RlbHMnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqIEBkZXNjcmlwdGlvbiBEZWNvcmF0b3IgdG8gZGVjbGFyZSBkZXNpZ24gdGltZSBjb25maWd1cmF0aW9uIGZvciB2aWV3IGVsZW1lbnQuXG4gKiBAcGFyYW0gY29uZmlnIC0gcmVnaXN0cmF0aW9uIGNvbmZpZyB7QGxpbmsgSW50ZXJmYWNlRGVzaWduZXJJdGVtRGVmaW5pdGlvbn0uXG4gKlxuICogQGV4YW1wbGVcbiAqIEBDcnRWaWV3RWxlbWVudCh7XG4gKiAgICAgIHR5cGU6IFwidXNyLkV4YW1wbGUnLFxuICogICAgICBzZWxlY3RvcjogJ3Vzci1leGFtcGxlJyxcbiAqICB9KVxuICogIEBDcnRJbnRlcmZhY2VEZXNpZ25lckl0ZW0oe1xuICogICAgICB0b29sYmFyQ29uZmlnOiB7XG4gKiAgICAgICAgICBjYXB0aW9uOiAndXNyRXhhbXBsZUNhcHRpb24nLFxuICogICAgICAgICAgaWNvbjogcmVxdWlyZShgISFyYXctbG9hZGVyP3tlc01vZHVsZTpmYWxzZX0hLi4vYXNzZXRzL2ljb24uc3ZnYClcbiAqICAgICAgICAgIGhpbnQ6ICd1c3JFeGFtcGxlSGludCcsXG4gKiAgICAgICAgICBkZWZhdWx0UHJvcGVydHlWYWx1ZXM6IHtcbiAqICAgICAgICAgICAgICB2YWx1ZTogJ1RoaXMgaXMgZGVmYXVsdCB2YWx1ZScsXG4gKiAgICAgICAgICB9LFxuICogICAgICB9LFxuICogIH0pXG4gKiAgQENvbXBvbmVudCh7XG4gKiAgICAgIHNlbGVjdG9yOiAndXNyLWV4YW1wbGUnLFxuICogICAgICB0ZW1wbGF0ZVVybDogJy4vYXBwLmNvbXBvbmVudC5odG1sJyxcbiAqICAgICAgc3R5bGVVcmxzOiBbJy4vYXBwLmNvbXBvbmVudC5zY3NzJ10sXG4gKiAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLlNoYWRvd0RvbSxcbiAqICB9KVxuICogIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICAgICBASW5wdXQoKVxuICogICAgICBAQ3J0SW5wdXQoKVxuICogICAgICBwdWJsaWMgdmFsdWUhOiBzdHJpbmc7XG4gKiAgfVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gQ3J0SW50ZXJmYWNlRGVzaWduZXJJdGVtKGNvbmZpZzogSW50ZXJmYWNlRGVzaWduZXJJdGVtRGVmaW5pdGlvbik6ICh0eXBlOiBUeXBlKSA9PiB2b2lkO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIENydEludGVyZmFjZURlc2lnbmVySXRlbShjb25maWc6IEludGVybmFsSW50ZXJmYWNlRGVzaWduZXJJdGVtUmVnaXN0cmF0aW9uQ29uZmlnKTogKHR5cGU6IFR5cGUpID0+IHZvaWQ7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gQ3J0SW50ZXJmYWNlRGVzaWduZXJJdGVtKFxuXHRjb25maWc6IEludGVyZmFjZURlc2lnbmVySXRlbURlZmluaXRpb24gfCBJbnRlcm5hbEludGVyZmFjZURlc2lnbmVySXRlbVJlZ2lzdHJhdGlvbkNvbmZpZyxcbik6ICh0eXBlOiBUeXBlKSA9PiB2b2lkIHtcblx0ZnVuY3Rpb24gX2FwcGx5VHlwZUNhcHRpb24oKTogdm9pZCB7XG5cdFx0aWYgKCFjb25maWcudHlwZUNhcHRpb24gJiYgY29uZmlnLnRvb2xiYXJDb25maWcpIHtcblx0XHRcdGNvbnN0IHRvb2xiYXJDb25maWcgPSBBcnJheS5pc0FycmF5KGNvbmZpZy50b29sYmFyQ29uZmlnKVxuXHRcdFx0XHQ/IGNvbmZpZy50b29sYmFyQ29uZmlnWzBdXG5cdFx0XHRcdDogKGNvbmZpZy50b29sYmFyQ29uZmlnIGFzIFRvb2xiYXJWaWV3RWxlbWVudENvbmZpZyk7XG5cdFx0XHRjb25maWcudHlwZUNhcHRpb24gPSB0b29sYmFyQ29uZmlnLmNhcHRpb247XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZ1bmN0aW9uICh0eXBlOiBUeXBlKTogdm9pZCB7XG5cdFx0Y29uZmlnLnR5cGVSZWYgPSB0eXBlO1xuXHRcdGNvbmZpZy52aWV3RWxlbWVudEdyb3VwVHlwZSA/Pz0gVmlld0VsZW1lbnRHcm91cFR5cGUuQ3VzdG9tRWxlbWVudHM7XG5cdFx0X2FwcGx5VHlwZUNhcHRpb24oKTtcblx0XHRzZXRJbnRlcmZhY2VEZXNpZ25lckl0ZW1NZXRhZGF0YShjb25maWcsIHR5cGUpO1xuXHR9O1xufVxuIl19