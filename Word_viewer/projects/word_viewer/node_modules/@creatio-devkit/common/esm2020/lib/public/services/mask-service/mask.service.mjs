import { __decorate, __metadata } from "tslib";
import { SchemaViewMaskRequest, SchemaViewMaskRequestAction } from './schema-view-mask.request';
import { ImplementUsingHandlerChain } from '../../../internal/decorators/implement-using-handler-chain';
import { BaseHandlerChainService } from '../../../internal/services/base-handler-chain.service';
import { HandlerChainService } from '../handler-chain';
/**
 * @public
 * @classdesc Service to working with mask using handler chain
 * @extends {BaseHandlerChainService}
 */
export class MaskService extends BaseHandlerChainService {
    constructor() {
        super(...arguments);
        /**
         * @internal
         */
        this.requestType = 'crt.MaskService';
    }
    /**
     * @internal
     * @param taskName
     * @param context
     */
    async showMask(taskName, context) {
        const request = new SchemaViewMaskRequest(SchemaViewMaskRequestAction.AddTask, taskName, context);
        await HandlerChainService.instance.process(request);
    }
    /**
     * @internal
     * @param taskName
     * @param context
     */
    async hideMask(taskName, context) {
        const request = new SchemaViewMaskRequest(SchemaViewMaskRequestAction.RemoveTask, taskName, context);
        await HandlerChainService.instance.process(request);
    }
}
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function)
], MaskService.prototype, "showBodyMask", void 0);
__decorate([
    ImplementUsingHandlerChain(),
    __metadata("design:type", Function)
], MaskService.prototype, "hideBodyMask", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvY29tbW9uL3NyYy9saWIvcHVibGljL3NlcnZpY2VzL21hc2stc2VydmljZS9tYXNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2hHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ3hHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBRWhHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3ZEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sV0FBWSxTQUFRLHVCQUF1QjtJQUF4RDs7UUFDQzs7V0FFRztRQUNhLGdCQUFXLEdBQUcsaUJBQWlCLENBQUM7SUFrQ2pELENBQUM7SUFuQkE7Ozs7T0FJRztJQUNJLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBZ0IsRUFBRSxPQUF5QjtRQUNoRSxNQUFNLE9BQU8sR0FBRyxJQUFJLHFCQUFxQixDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEcsTUFBTSxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFnQixFQUFFLE9BQXlCO1FBQ2hFLE1BQU0sT0FBTyxHQUFHLElBQUkscUJBQXFCLENBQUMsMkJBQTJCLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNyRyxNQUFNLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNEO0FBNUJBO0lBQUMsMEJBQTBCLEVBQUU7O2lEQUNvQztBQUtqRTtJQUFDLDBCQUEwQixFQUFFOztpREFDYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYVZpZXdNYXNrUmVxdWVzdCwgU2NoZW1hVmlld01hc2tSZXF1ZXN0QWN0aW9uIH0gZnJvbSAnLi9zY2hlbWEtdmlldy1tYXNrLnJlcXVlc3QnO1xuaW1wb3J0IHsgSW1wbGVtZW50VXNpbmdIYW5kbGVyQ2hhaW4gfSBmcm9tICcuLi8uLi8uLi9pbnRlcm5hbC9kZWNvcmF0b3JzL2ltcGxlbWVudC11c2luZy1oYW5kbGVyLWNoYWluJztcbmltcG9ydCB7IEJhc2VIYW5kbGVyQ2hhaW5TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJuYWwvc2VydmljZXMvYmFzZS1oYW5kbGVyLWNoYWluLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWFza1NldHRpbmdzIH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcbmltcG9ydCB7IEhhbmRsZXJDaGFpblNlcnZpY2UgfSBmcm9tICcuLi9oYW5kbGVyLWNoYWluJztcbmltcG9ydCB7Vmlld01vZGVsQ29udGV4dH0gZnJvbSAnLi4vLi4vLi4vYmFzZS1leHBvcnRzJztcblxuLyoqXG4gKiBAcHVibGljXG4gKiBAY2xhc3NkZXNjIFNlcnZpY2UgdG8gd29ya2luZyB3aXRoIG1hc2sgdXNpbmcgaGFuZGxlciBjaGFpblxuICogQGV4dGVuZHMge0Jhc2VIYW5kbGVyQ2hhaW5TZXJ2aWNlfVxuICovXG5leHBvcnQgY2xhc3MgTWFza1NlcnZpY2UgZXh0ZW5kcyBCYXNlSGFuZGxlckNoYWluU2VydmljZSB7XG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHB1YmxpYyByZWFkb25seSByZXF1ZXN0VHlwZSA9ICdjcnQuTWFza1NlcnZpY2UnO1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHRvIHNob3cgYm9keSBtYXNrIG9uIHRoZSBwYWdlXG5cdCAqIEBwYXJhbSB7TWFza1NldHRpbmdzfSBzZXR0aW5ncyAtIG1hc2sgc2V0dGluZ3Mge0BsaW5rIE1hc2tTZXR0aW5nc31cblx0ICovXG5cdEBJbXBsZW1lbnRVc2luZ0hhbmRsZXJDaGFpbigpXG5cdHB1YmxpYyBzaG93Qm9keU1hc2shOiAoc2V0dGluZ3M/OiBNYXNrU2V0dGluZ3MpID0+IFByb21pc2U8dm9pZD47XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBNZXRob2QgdG8gaGlkZSBib2R5IG1hc2tcblx0ICovXG5cdEBJbXBsZW1lbnRVc2luZ0hhbmRsZXJDaGFpbigpXG5cdHB1YmxpYyBoaWRlQm9keU1hc2shOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQHBhcmFtIHRhc2tOYW1lXG5cdCAqIEBwYXJhbSBjb250ZXh0XG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgc2hvd01hc2sodGFza05hbWU6IHN0cmluZywgY29udGV4dDogVmlld01vZGVsQ29udGV4dCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IHJlcXVlc3QgPSBuZXcgU2NoZW1hVmlld01hc2tSZXF1ZXN0KFNjaGVtYVZpZXdNYXNrUmVxdWVzdEFjdGlvbi5BZGRUYXNrLCB0YXNrTmFtZSwgY29udGV4dCk7XG5cdFx0YXdhaXQgSGFuZGxlckNoYWluU2VydmljZS5pbnN0YW5jZS5wcm9jZXNzKHJlcXVlc3QpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAcGFyYW0gdGFza05hbWVcblx0ICogQHBhcmFtIGNvbnRleHRcblx0ICovXG5cdHB1YmxpYyBhc3luYyBoaWRlTWFzayh0YXNrTmFtZTogc3RyaW5nLCBjb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgcmVxdWVzdCA9IG5ldyBTY2hlbWFWaWV3TWFza1JlcXVlc3QoU2NoZW1hVmlld01hc2tSZXF1ZXN0QWN0aW9uLlJlbW92ZVRhc2ssIHRhc2tOYW1lLCBjb250ZXh0KTtcblx0XHRhd2FpdCBIYW5kbGVyQ2hhaW5TZXJ2aWNlLmluc3RhbmNlLnByb2Nlc3MocmVxdWVzdCk7XG5cdH1cbn1cbiJdfQ==