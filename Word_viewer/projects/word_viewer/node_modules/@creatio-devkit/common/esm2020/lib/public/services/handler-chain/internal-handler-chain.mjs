import { generateGuid, NextHandlerAlreadySpecifiedException, } from '../../../base-exports';
import { HandlersOrderComparer } from '../../../internal/utils/handlers-order-comparer';
/**
 * @internal
 * @hostPublicApi available through window.handlerChain
 */
export class InternalHandlerChain {
    constructor() {
        this._handlers = [];
        this._requestListeners = new Map();
        this._handlersCache = new Map();
        this._handlersScopesByContextId = new Map();
        /**
         * @hostPublicApi
         */
        this.handlerChain$ = {
            /**
             * @hostPublicApi
             */
            process: async (request) => {
                const handler = this._getHandler(request);
                this._requestListeners.forEach((listener) => listener?.(request));
                return handler?.handle(request);
            },
            /**
             * @hostPublicApi
             */
            register: (info) => {
                this._handlersCache.delete(info.requestType);
                this._handlers.push(info);
                return () => {
                    const index = this._handlers.indexOf(info);
                    if (index > -1) {
                        this._handlers.splice(index, 1);
                        this._handlersCache.delete(info.requestType);
                    }
                    else {
                        console.warn(`${info?.requestType} not found to unsubscribe`);
                    }
                };
            },
            /**
             * @hostPublicApi
             */
            subscribe: (callback, context) => {
                if (!callback) {
                    return () => void 0;
                }
                const listenerId = generateGuid();
                const listenerFn = (request) => {
                    if (!context || request.$context === context) {
                        callback(request);
                    }
                };
                this._requestListeners.set(listenerId, listenerFn);
                return () => this._requestListeners.delete(listenerId);
            },
        };
    }
    /**
     * @hostPublicApi
     */
    clearContextedHandlersCache(contextId) {
        const configs = this._handlersScopesByContextId.get(contextId) ?? [];
        return configs.every(({ requestType, scope }) => this._handlersCache.get(requestType)?.delete(scope));
    }
    _getHandler(request) {
        return this._hasCacheHandler(request) ? this._getCacheHandler(request) : this._buildHandlersChain(request);
    }
    _getCacheHandler(request) {
        const map = this._handlersCache.get(request.type);
        const key = this._getCacheScopesKey(request);
        return map.get(key);
    }
    _hasCacheHandler(request) {
        const map = this._handlersCache.get(request.type);
        const key = this._getCacheScopesKey(request);
        return map && map.has(key);
    }
    _getCacheScopesKey(request) {
        const injectionContextKey = this._getInjectionContext(request?.$context)?.id ?? '';
        return (request.scopes || ['']).join('_').concat(injectionContextKey);
    }
    _getInjectionContext(viewModel) {
        return (viewModel?.['_injectionContext'] ||
            (viewModel?.['parent'] && this._getInjectionContext(viewModel['parent'])));
    }
    _setContextedScopes(request, scope) {
        const injectionContext = this._getInjectionContext(request?.$context)?.id;
        const configs = this._handlersScopesByContextId.has(injectionContext)
            ? this._handlersScopesByContextId.get(injectionContext)
            : [];
        configs.push({ requestType: request.type, scope });
        this._handlersScopesByContextId.set(injectionContext, configs);
    }
    _setCacheHandler(request, handler) {
        const map = this._handlersCache.has(request.type)
            ? this._handlersCache.get(request.type)
            : new Map();
        const key = this._getCacheScopesKey(request);
        map.set(key, handler);
        if (this._getInjectionContext(request?.$context)?.id) {
            this._setContextedScopes(request, key);
        }
        this._handlersCache.set(request.type, map);
    }
    _isRequestHandler(handler) {
        return (typeof handler.handle === 'function' &&
            typeof handler.setNext === 'function');
    }
    _checkHandlerInstanceOf(handler) {
        if (!this._isRequestHandler(handler)) {
            throw new Error('Handler should implement "BaseRequestHandler"');
        }
    }
    _buildHandlersChain(request) {
        const handlers = this._handlers.filter((h) => {
            if (h.requestType !== request.type) {
                return false;
            }
            if (!h.scopes?.length) {
                return true;
            }
            return h.scopes.some((s) => request.scopes?.includes(s));
        });
        const comparer = new HandlersOrderComparer(request);
        handlers.sort((a, b) => comparer.compare(a, b));
        const handlerInstances = handlers.map((handlerConfig) => {
            const injectionContext = this._getInjectionContext(request?.$context);
            return handlerConfig.createHandler(injectionContext);
        });
        handlerInstances.forEach((handler) => this._checkHandlerInstanceOf(handler));
        this._joinHandlersInChain(handlerInstances);
        const result = handlerInstances[0];
        this._setCacheHandler(request, result);
        return result;
    }
    _joinHandlersInChain(handlers) {
        for (let index = 0; index < handlers.length - 1; index++) {
            try {
                handlers[index].setNext(handlers[index + 1]);
            }
            catch (error) {
                if (error instanceof NextHandlerAlreadySpecifiedException) {
                    throw new Error('Handler factory should return new instance of ' +
                        'BaseRequestHandler class or its subclass ' +
                        '(next handler should not be specified)');
                }
                throw error;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,