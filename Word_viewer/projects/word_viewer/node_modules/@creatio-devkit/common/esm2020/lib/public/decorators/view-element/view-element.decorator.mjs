import { checkTypeNamePascalCase } from '../../../internal/services';
import { getCrtInputsMetadata, getCrtOutputsMetadata, getCrtValidationInputsMetadata, setViewElementMetadata, } from '../../../internal/utils';
/**
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export function CrtViewElement(config) {
    return function (type) {
        checkTypeNamePascalCase(config.type);
        const inputs = getCrtInputsMetadata(type);
        const outputs = getCrtOutputsMetadata(type);
        const validationInputs = getCrtValidationInputsMetadata(type);
        const baseRegistrationConfig = {
            ...config,
            inputs,
            outputs,
            validationInputs,
        };
        const registrationConfig = 'selector' in config
            ? { ...baseRegistrationConfig, selector: config.selector }
            : { ...baseRegistrationConfig, typeRef: type };
        setViewElementMetadata(registrationConfig, type);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1lbGVtZW50LmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvZGV2a2l0L2NvbW1vbi9zcmMvbGliL3B1YmxpYy9kZWNvcmF0b3JzL3ZpZXctZWxlbWVudC92aWV3LWVsZW1lbnQuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3JFLE9BQU8sRUFDTixvQkFBb0IsRUFDcEIscUJBQXFCLEVBQ3JCLDhCQUE4QixFQUM5QixzQkFBc0IsR0FDdEIsTUFBTSx5QkFBeUIsQ0FBQztBQW1DakM7O0dBRUc7QUFDSCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUFtRTtJQUNqRyxPQUFPLFVBQVUsSUFBVTtRQUMxQix1QkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxNQUFNLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsTUFBTSxPQUFPLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxnQkFBZ0IsR0FBRyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RCxNQUFNLHNCQUFzQixHQUFzQztZQUNqRSxHQUFHLE1BQU07WUFDVCxNQUFNO1lBQ04sT0FBTztZQUNQLGdCQUFnQjtTQUNoQixDQUFDO1FBQ0YsTUFBTSxrQkFBa0IsR0FDdkIsVUFBVSxJQUFJLE1BQU07WUFDbkIsQ0FBQyxDQUFDLEVBQUUsR0FBRyxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUMxRCxDQUFDLENBQUMsRUFBRSxHQUFHLHNCQUFzQixFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUNqRCxzQkFBc0IsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UtZXhwb3J0cyc7XG5pbXBvcnQgeyBBbmd1bGFyVmlld0VsZW1lbnRSZWdpc3RyYXRpb25Db25maWcgfSBmcm9tICcuLi8uLi8uLi9pbnRlcm5hbC9tb2RlbHMnO1xuaW1wb3J0IHsgY2hlY2tUeXBlTmFtZVBhc2NhbENhc2UgfSBmcm9tICcuLi8uLi8uLi9pbnRlcm5hbC9zZXJ2aWNlcyc7XG5pbXBvcnQge1xuXHRnZXRDcnRJbnB1dHNNZXRhZGF0YSxcblx0Z2V0Q3J0T3V0cHV0c01ldGFkYXRhLFxuXHRnZXRDcnRWYWxpZGF0aW9uSW5wdXRzTWV0YWRhdGEsXG5cdHNldFZpZXdFbGVtZW50TWV0YWRhdGEsXG59IGZyb20gJy4uLy4uLy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IEJhc2VWaWV3RWxlbWVudFJlZ2lzdHJhdGlvbkNvbmZpZywgVmlld0VsZW1lbnRSZWdpc3RyYXRpb25Db25maWcgfSBmcm9tICcuLi8uLi9tb2RlbHMnO1xuLy8gbm9pbnNwZWN0aW9uIEVTNlByZWZlclNob3J0SW1wb3J0XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbnR5cGUgQ3J0QW5ndWxhclZpZXdFbGVtZW50Q29uZmlnID0gT21pdDxBbmd1bGFyVmlld0VsZW1lbnRSZWdpc3RyYXRpb25Db25maWcsICd0eXBlUmVmJz47XG5cbi8qKlxuICogQHB1YmxpY1xuICogQGRlc2NyaXB0aW9uIENydFZpZXdFbGVtZW50IGRlY29yYXRvciBhbGxvd3MgdXNlciB0byBkZWNsYXJlIGNvbXBvbmVudHMgaW4gQ3JlYXRpbyBwbGF0Zm9ybS5cbiAqIE1ha2Ugc3VyZSBjb21wb25lbnQgaXMgc3BlY2lmaWVkIGluIHZpZXdFbGVtZW50cyBzZWN0aW9uIG9mIENydE1vZHVsZS5cbiAqIEBwYXJhbSBjb25maWcgLSByZWdpc3RyYXRpb24gY29uZmlnLiB7QGxpbmsgVmlld0VsZW1lbnRSZWdpc3RyYXRpb25Db25maWd9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBAQ3J0Vmlld0VsZW1lbnQoe1xuICogICAgICB0eXBlOiAndXNyLkV4YW1wbGUnLFxuICogICAgICBzZWxlY3RvcjogJ3Vzci1leGFtcGxlJyxcbiAqICB9KVxuICogIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICAgICBASW5wdXQoKVxuICogICAgICBAQ3J0SW5wdXQoKVxuICogICAgICBwdWJsaWMgdmFsdWUhOiBzdHJpbmc7XG4gKiAgfVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gQ3J0Vmlld0VsZW1lbnQoY29uZmlnOiBWaWV3RWxlbWVudFJlZ2lzdHJhdGlvbkNvbmZpZyk6ICh0eXBlOiBUeXBlKSA9PiB2b2lkO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gQ3J0Vmlld0VsZW1lbnQoY29uZmlnOiBDcnRBbmd1bGFyVmlld0VsZW1lbnRDb25maWcpOiAodHlwZTogVHlwZSkgPT4gdm9pZDtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIENydFZpZXdFbGVtZW50KGNvbmZpZzogQ3J0QW5ndWxhclZpZXdFbGVtZW50Q29uZmlnIHwgVmlld0VsZW1lbnRSZWdpc3RyYXRpb25Db25maWcpIHtcblx0cmV0dXJuIGZ1bmN0aW9uICh0eXBlOiBUeXBlKTogdm9pZCB7XG5cdFx0Y2hlY2tUeXBlTmFtZVBhc2NhbENhc2UoY29uZmlnLnR5cGUpO1xuXHRcdGNvbnN0IGlucHV0cyA9IGdldENydElucHV0c01ldGFkYXRhKHR5cGUpO1xuXHRcdGNvbnN0IG91dHB1dHMgPSBnZXRDcnRPdXRwdXRzTWV0YWRhdGEodHlwZSk7XG5cdFx0Y29uc3QgdmFsaWRhdGlvbklucHV0cyA9IGdldENydFZhbGlkYXRpb25JbnB1dHNNZXRhZGF0YSh0eXBlKTtcblx0XHRjb25zdCBiYXNlUmVnaXN0cmF0aW9uQ29uZmlnOiBCYXNlVmlld0VsZW1lbnRSZWdpc3RyYXRpb25Db25maWcgPSB7XG5cdFx0XHQuLi5jb25maWcsXG5cdFx0XHRpbnB1dHMsXG5cdFx0XHRvdXRwdXRzLFxuXHRcdFx0dmFsaWRhdGlvbklucHV0cyxcblx0XHR9O1xuXHRcdGNvbnN0IHJlZ2lzdHJhdGlvbkNvbmZpZyA9XG5cdFx0XHQnc2VsZWN0b3InIGluIGNvbmZpZ1xuXHRcdFx0XHQ/IHsgLi4uYmFzZVJlZ2lzdHJhdGlvbkNvbmZpZywgc2VsZWN0b3I6IGNvbmZpZy5zZWxlY3RvciB9XG5cdFx0XHRcdDogeyAuLi5iYXNlUmVnaXN0cmF0aW9uQ29uZmlnLCB0eXBlUmVmOiB0eXBlIH07XG5cdFx0c2V0Vmlld0VsZW1lbnRNZXRhZGF0YShyZWdpc3RyYXRpb25Db25maWcsIHR5cGUpO1xuXHR9O1xufVxuIl19