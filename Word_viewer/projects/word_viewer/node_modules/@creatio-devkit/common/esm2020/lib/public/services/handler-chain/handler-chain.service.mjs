import { InternalHandlerChain } from './internal-handler-chain';
const global = window;
/**
 * @public
 * @class HandlerChainService
 * @classdesc Service to design handlers in chain.
 */
export class HandlerChainService {
    get _chain() {
        return global.handlerChain;
    }
    set _chain(value) {
        global.handlerChain = value;
    }
    static get instance() {
        return HandlerChainService._instance || (HandlerChainService._instance = new HandlerChainService());
    }
    constructor() {
        if (!this._chain) {
            this._createGlobalHandlerChain();
        }
    }
    _createGlobalHandlerChain() {
        this._chain = new InternalHandlerChain();
    }
    /**
     * @internal
     */
    clearContextedHandlersCache(contextId) {
        return this._chain.clearContextedHandlersCache(contextId);
    }
    /**
     * @internal
     */
    register(handlerConfig) {
        return this._chain.handlerChain$.register(handlerConfig);
    }
    /**
     * @description Method to process passed request
     * @param request - {@link ÉµBaseRequest}
     * @return `Promise<unknown>`
     */
    process(request) {
        return this._chain.handlerChain$.process(request);
    }
    /**
     * @internal
     * Subscribes to requests.
     * @param callback A handler function for each request triggered.
     * @param context (optional) A context in which the requests were triggered.
     * The `callback` will be called only for requests with specified context.
     * If not  specified, will be called for all requests.
     * @returns A function to cancel the subscription.
     */
    subscribe(callback, context) {
        return this._chain.handlerChain$.subscribe(callback, context);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci1jaGFpbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvY29tbW9uL3NyYy9saWIvcHVibGljL3NlcnZpY2VzL2hhbmRsZXItY2hhaW4vaGFuZGxlci1jaGFpbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBUWhFLE1BQU0sTUFBTSxHQUFHLE1BQStCLENBQUM7QUFFL0M7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxtQkFBbUI7SUFDL0IsSUFBWSxNQUFNO1FBQ2pCLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBWSxNQUFNLENBQUMsS0FBMkI7UUFDN0MsTUFBTSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUVNLE1BQU0sS0FBSyxRQUFRO1FBQ3pCLE9BQU8sbUJBQW1CLENBQUMsU0FBUyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxHQUFHLElBQUksbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFFRDtRQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2pCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1NBQ2pDO0lBQ0YsQ0FBQztJQUVPLHlCQUF5QjtRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSwyQkFBMkIsQ0FBQyxTQUFpQjtRQUNuRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOztPQUVHO0lBQ0ksUUFBUSxDQUFDLGFBQTRCO1FBQzNDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksT0FBTyxDQUFDLE9BQXFCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLFNBQVMsQ0FBQyxRQUF5QyxFQUFFLE9BQTBCO1FBQ3JGLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvRCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyDJtUJhc2VSZXF1ZXN0IH0gZnJvbSAnQGNyZWF0aW8vYmFzZSc7XG5cbmltcG9ydCB7IEludGVybmFsSGFuZGxlckNoYWluIH0gZnJvbSAnLi9pbnRlcm5hbC1oYW5kbGVyLWNoYWluJztcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9iYXNlLWV4cG9ydHMnO1xuaW1wb3J0IHsgSGFuZGxlckNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2ludGVybmFsL21vZGVscy9yZXF1ZXN0LWhhbmRsZXIvaGFuZGxlci1jb25maWcnO1xuaW1wb3J0IHsgVGVhcmRvd25Mb2dpYyB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxudHlwZSBHbG9iYWxUeXBlID0gV2luZG93ICYge1xuXHRoYW5kbGVyQ2hhaW46IEludGVybmFsSGFuZGxlckNoYWluO1xufTtcbmNvbnN0IGdsb2JhbCA9IHdpbmRvdyBhcyB1bmtub3duIGFzIEdsb2JhbFR5cGU7XG5cbi8qKlxuICogQHB1YmxpY1xuICogQGNsYXNzIEhhbmRsZXJDaGFpblNlcnZpY2VcbiAqIEBjbGFzc2Rlc2MgU2VydmljZSB0byBkZXNpZ24gaGFuZGxlcnMgaW4gY2hhaW4uXG4gKi9cbmV4cG9ydCBjbGFzcyBIYW5kbGVyQ2hhaW5TZXJ2aWNlIHtcblx0cHJpdmF0ZSBnZXQgX2NoYWluKCk6IEludGVybmFsSGFuZGxlckNoYWluIHtcblx0XHRyZXR1cm4gZ2xvYmFsLmhhbmRsZXJDaGFpbjtcblx0fVxuXG5cdHByaXZhdGUgc2V0IF9jaGFpbih2YWx1ZTogSW50ZXJuYWxIYW5kbGVyQ2hhaW4pIHtcblx0XHRnbG9iYWwuaGFuZGxlckNoYWluID0gdmFsdWU7XG5cdH1cblx0cHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBIYW5kbGVyQ2hhaW5TZXJ2aWNlO1xuXHRwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBIYW5kbGVyQ2hhaW5TZXJ2aWNlIHtcblx0XHRyZXR1cm4gSGFuZGxlckNoYWluU2VydmljZS5faW5zdGFuY2UgfHwgKEhhbmRsZXJDaGFpblNlcnZpY2UuX2luc3RhbmNlID0gbmV3IEhhbmRsZXJDaGFpblNlcnZpY2UoKSk7XG5cdH1cblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuXHRcdGlmICghdGhpcy5fY2hhaW4pIHtcblx0XHRcdHRoaXMuX2NyZWF0ZUdsb2JhbEhhbmRsZXJDaGFpbigpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgX2NyZWF0ZUdsb2JhbEhhbmRsZXJDaGFpbigpIHtcblx0XHR0aGlzLl9jaGFpbiA9IG5ldyBJbnRlcm5hbEhhbmRsZXJDaGFpbigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0cHVibGljIGNsZWFyQ29udGV4dGVkSGFuZGxlcnNDYWNoZShjb250ZXh0SWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLl9jaGFpbi5jbGVhckNvbnRleHRlZEhhbmRsZXJzQ2FjaGUoY29udGV4dElkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHB1YmxpYyByZWdpc3RlcihoYW5kbGVyQ29uZmlnOiBIYW5kbGVyQ29uZmlnKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NoYWluLmhhbmRsZXJDaGFpbiQucmVnaXN0ZXIoaGFuZGxlckNvbmZpZyk7XG5cdH1cblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIE1ldGhvZCB0byBwcm9jZXNzIHBhc3NlZCByZXF1ZXN0XG5cdCAqIEBwYXJhbSByZXF1ZXN0IC0ge0BsaW5rIMm1QmFzZVJlcXVlc3R9XG5cdCAqIEByZXR1cm4gYFByb21pc2U8dW5rbm93bj5gXG5cdCAqL1xuXHRwdWJsaWMgcHJvY2VzcyhyZXF1ZXN0OiDJtUJhc2VSZXF1ZXN0KTogUHJvbWlzZTx1bmtub3duPiB7XG5cdFx0cmV0dXJuIHRoaXMuX2NoYWluLmhhbmRsZXJDaGFpbiQucHJvY2VzcyhyZXF1ZXN0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogU3Vic2NyaWJlcyB0byByZXF1ZXN0cy5cblx0ICogQHBhcmFtIGNhbGxiYWNrIEEgaGFuZGxlciBmdW5jdGlvbiBmb3IgZWFjaCByZXF1ZXN0IHRyaWdnZXJlZC5cblx0ICogQHBhcmFtIGNvbnRleHQgKG9wdGlvbmFsKSBBIGNvbnRleHQgaW4gd2hpY2ggdGhlIHJlcXVlc3RzIHdlcmUgdHJpZ2dlcmVkLlxuXHQgKiBUaGUgYGNhbGxiYWNrYCB3aWxsIGJlIGNhbGxlZCBvbmx5IGZvciByZXF1ZXN0cyB3aXRoIHNwZWNpZmllZCBjb250ZXh0LlxuXHQgKiBJZiBub3QgIHNwZWNpZmllZCwgd2lsbCBiZSBjYWxsZWQgZm9yIGFsbCByZXF1ZXN0cy5cblx0ICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBjYW5jZWwgdGhlIHN1YnNjcmlwdGlvbi5cblx0ICovXG5cdHB1YmxpYyBzdWJzY3JpYmUoY2FsbGJhY2s6IChyZXF1ZXN0OiDJtUJhc2VSZXF1ZXN0KSA9PiB2b2lkLCBjb250ZXh0PzogVmlld01vZGVsQ29udGV4dCk6IFRlYXJkb3duTG9naWMge1xuXHRcdHJldHVybiB0aGlzLl9jaGFpbi5oYW5kbGVyQ2hhaW4kLnN1YnNjcmliZShjYWxsYmFjaywgY29udGV4dCk7XG5cdH1cbn1cbiJdfQ==