import 'reflect-metadata';
import { crtInjectPrefix, crtInputPrefix, crtOutputPrefix, crtValidationInputPrefix } from '../constants';
const moduleMetadataKey = 'module';
const viewElementMetadataKey = 'viewElement';
const interfaceDesignerItemMetadataKey = 'interfaceDesignerItem';
const requestHandlerMetadataKey = 'requestHandler';
const designTimeViewElementMetadataKey = 'designTimeViewElement';
const validatorMetadataKey = 'validator';
const converterMetadataKey = 'converter';
/**
 * @internal
 */
export function setModuleMetadata(metadata, type) {
    Reflect.defineMetadata(moduleMetadataKey, metadata, type);
}
/**
 * @internal
 */
export function getModuleMetadata(type) {
    const metadata = Reflect.getMetadata(moduleMetadataKey, type);
    if (!metadata) {
        throw new Error(`Module metadata was not found on '${type.name}' class`);
    }
    return metadata;
}
/**
 * @internal
 */
export function setViewElementMetadata(metadata, type) {
    Reflect.defineMetadata(viewElementMetadataKey, metadata, type);
}
/**
 * @internal
 */
export function getViewElementMetadata(type) {
    const metadata = Reflect.getMetadata(viewElementMetadataKey, type);
    if (!metadata) {
        throw new Error(`View element metadata was not found on '${type.name}' class`);
    }
    return metadata;
}
/**
 * @internal
 */
export function setValidatorMetadata(metadata, type) {
    Reflect.defineMetadata(validatorMetadataKey, metadata, type);
}
/**
 * @internal
 */
export function getValidatorMetadata(type) {
    const metadata = Reflect.getOwnMetadata(validatorMetadataKey, type);
    if (!metadata) {
        throw new Error(`Validator metadata was not found on '${type.name}' class`);
    }
    return metadata;
}
/**
 * @internal
 */
export function setConverterMetadata(metadata, type) {
    Reflect.defineMetadata(converterMetadataKey, metadata, type);
}
/**
 * @internal
 */
export function getConverterMetadata(type) {
    const metadata = Reflect.getOwnMetadata(converterMetadataKey, type);
    if (!metadata) {
        throw new Error(`Converter metadata was not found on '${type.name}' class`);
    }
    return metadata;
}
/**
 * @internal
 */
export function setInterfaceDesignerItemMetadata(metadata, type) {
    Reflect.defineMetadata(interfaceDesignerItemMetadataKey, metadata, type);
}
/**
 * @internal
 */
export function getInterfaceDesignerItemMetadata(type) {
    const metadata = Reflect.getOwnMetadata(interfaceDesignerItemMetadataKey, type);
    if (!metadata) {
        throw new Error(`Interface designer item metadata was not found on '${type.name}' class`);
    }
    return metadata;
}
/**
 * @internal
 */
export function setDesignTimeViewElementMetadata(metadata, type) {
    Reflect.defineMetadata(designTimeViewElementMetadataKey, metadata, type);
}
/**
 * @internal
 */
export function getDesignTimeViewElementMetadata(type) {
    const metadata = Reflect.getOwnMetadata(designTimeViewElementMetadataKey, type);
    if (!metadata) {
        throw new Error(`Design time view element metadata was not found on '${type.name}' class`);
    }
    return metadata;
}
/**
 * @internal
 */
export function hasInterfaceDesignerItemMetadata(type) {
    return Reflect.hasOwnMetadata(interfaceDesignerItemMetadataKey, type);
}
/**
 * @internal
 */
export function setRequestHandlerMetadata(metadata, type) {
    Reflect.defineMetadata(requestHandlerMetadataKey, metadata, type);
}
/**
 * @internal
 */
export function getRequestHandlerMetadata(type) {
    const metadata = Reflect.getMetadata(requestHandlerMetadataKey, type);
    if (!metadata) {
        throw new Error(`Request handler metadata was not found on '${type.name}' class`);
    }
    return metadata;
}
/**
 * @internal
 */
export function getHandlerChainServiceMetadata(typeRef) {
    const requestType = Reflect.getMetadata('requestType', typeRef);
    if (!requestType) {
        throw new Error(`requestType was not found on '${typeRef.name}' class`);
    }
    return { requestType, typeRef };
}
/**
 * @internal
 */
export function getCrtInputsMetadata(type) {
    const keys = Reflect.getMetadataKeys(type);
    const crtInputKeys = keys.filter((x) => x.startsWith(crtInputPrefix));
    return Object.fromEntries(crtInputKeys.map((key) => {
        const data = Reflect.getMetadata(key, type);
        return [key.replace(crtInputPrefix, ''), data];
    }));
}
/**
 * @internal
 */
export function getCrtOutputsMetadata(type) {
    const keys = Reflect.getMetadataKeys(type);
    const crtOutputKeys = keys.filter((x) => x.startsWith(crtOutputPrefix));
    return Object.fromEntries(crtOutputKeys.map((key) => {
        const data = Reflect.getMetadata(key, type);
        return [key.replace(crtOutputPrefix, ''), data];
    }));
}
/**
 * @internal
 */
export function getCrtValidationInputsMetadata(type) {
    const keys = Reflect.getMetadataKeys(type);
    const crtValidationInputKeys = keys.filter((x) => x.startsWith(crtValidationInputPrefix));
    return Object.fromEntries(crtValidationInputKeys.map((key) => {
        const data = Reflect.getMetadata(key, type);
        return [key.replace(crtValidationInputPrefix, ''), data];
    }));
}
/**
 * @internal
 */
function getCrtInjectMetadata(type) {
    const keys = Reflect.getOwnMetadataKeys(type);
    const crtInjectKeys = keys.filter((x) => x.startsWith(crtInjectPrefix));
    return Object.fromEntries(crtInjectKeys.map((key) => {
        const index = Number(key.replace(crtInjectPrefix, ''));
        const data = Reflect.getMetadata(key, type);
        return [index, data];
    }));
}
/**
 * @internal
 */
function getParentType(type) {
    const parentProto = type.prototype ? Object.getPrototypeOf(type.prototype) : null;
    return parentProto ? parentProto.constructor : null;
}
/**
 * @internal
 */
export function getTypeDependencies(type) {
    const paramTypes = Reflect.getOwnMetadata('design:paramtypes', type);
    if (!paramTypes) {
        if (type.length > 0) {
            throw new Error(`Dependency Injection error. Cannot read dependencies of class '${type.name}'. ` +
                `Please make sure class '${type.name}' has decorator and ` +
                "'emitDecoratorMetadata' option is enabled in your 'tsconfig.json' file.");
        }
        const parentType = getParentType(type);
        return parentType && parentType !== Object ? getTypeDependencies(parentType) : [];
    }
    const crtInjectMetadata = getCrtInjectMetadata(type);
    Object.entries(crtInjectMetadata).forEach(([index, token]) => (paramTypes[index] = token));
    return paramTypes;
}
//# sourceMappingURL=data:application/json;base64,