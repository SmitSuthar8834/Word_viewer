/**
 * @internal
 * @hostPublicApi available through window.creatio.requestHandlerRegistry
 */
export class InternalRequestHandlerRegistryType {
    /**
     * @publicHostApi
     */
    static get requestHandlersMap() {
        return this._requestHandlersMap;
    }
    /**
     * @publicHostApi
     */
    static onAddRequestHandler(handler) {
        this._addItemListeners.push(handler);
        return () => {
            this._addItemListeners.splice(this._addItemListeners.indexOf(handler), 1);
        };
    }
    /**
     * @publicHostApi
     */
    static onRemoveRequestHandler(handler) {
        this._removeItemListeners.push(handler);
        return () => {
            this._removeItemListeners.splice(this._removeItemListeners.indexOf(handler), 1);
        };
    }
    /**
     * @publicHostApi
     */
    static addRequestHandler(handlerType, config) {
        if (!this._requestHandlersMap.has(handlerType)) {
            this._requestHandlersMap.set(handlerType, config);
            for (const listener of this._addItemListeners) {
                listener(handlerType, config);
            }
        }
    }
    /**
     * @publicHostApi
     */
    static removeRequestHandler(handlerType) {
        const config = this._requestHandlersMap.get(handlerType);
        if (config) {
            this._requestHandlersMap.delete(handlerType);
            for (const listener of this._removeItemListeners) {
                listener(handlerType, config);
            }
        }
    }
}
InternalRequestHandlerRegistryType._addItemListeners = [];
InternalRequestHandlerRegistryType._removeItemListeners = [];
InternalRequestHandlerRegistryType._requestHandlersMap = new Map();
const global = window;
global.creatio ?? (global.creatio = {});
if (!global.creatio.requestHandlerRegistry) {
    Object.defineProperty(global.creatio, 'requestHandlerRegistry', {
        get: () => InternalRequestHandlerRegistryType,
        configurable: false,
    });
}
/**
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export const InternalRequestHandlerRegistry = InternalRequestHandlerRegistryType;
/**
 * @internal
 */
export class RequestHandlerRegistryService {
    /**
     * Register request handler class.
     * @param config Request handler registration config.
     * @param type Request handler type.
     */
    static register(config, type) {
        const requestType = config.requestType;
        const requestHandlerType = config.type;
        if (!requestType) {
            throw new Error(`Error when register ${requestHandlerType}. Request type not specified.`);
        }
        const requestHandlerMapValue = {
            instanceType: type,
            instanceConfig: config,
        };
        RequestHandlerRegistryService._internalRegistry.addRequestHandler(requestHandlerType, requestHandlerMapValue);
    }
}
RequestHandlerRegistryService._internalRegistry = global.creatio.requestHandlerRegistry;
//# sourceMappingURL=data:application/json;base64,