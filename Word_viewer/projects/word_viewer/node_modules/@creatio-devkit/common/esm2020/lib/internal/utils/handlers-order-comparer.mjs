import { HandlerSourceType } from '../enums';
import { PkgTopology } from '../services/pkg-topology-registry/pkg-topology-registry';
/**
 * @internal
 */
export class HandlersOrderComparer {
    constructor(_request) {
        this._request = _request;
        const scopesOrderEntries = [...(this._request.scopes ?? [])].reverse().map((scope, index) => [scope, index]);
        this._scopesOrder = Object.fromEntries(scopesOrderEntries);
    }
    _getOrderByScopes(handler) {
        if (!handler.scopes) {
            return Number.MAX_VALUE;
        }
        const scopesOrder = handler.scopes.filter((s) => s in this._scopesOrder).map((s) => this._scopesOrder[s]);
        return Math.min(...scopesOrder);
    }
    _getOrderByPkgTopology(handler) {
        if (handler.source.type === HandlerSourceType.Host) {
            return Number.MAX_VALUE;
        }
        return PkgTopology.get(handler.source.packageName);
    }
    compare(a, b) {
        const aScopeOrder = this._getOrderByScopes(a);
        const bScopeOrder = this._getOrderByScopes(b);
        let diff = aScopeOrder - bScopeOrder;
        if (diff) {
            return diff;
        }
        const aPkgTopologyOrder = this._getOrderByPkgTopology(a);
        const bPkgTopologyOrder = this._getOrderByPkgTopology(b);
        diff = aPkgTopologyOrder - bPkgTopologyOrder;
        if (diff) {
            return diff;
        }
        diff = a.source.type - b.source.type;
        return diff;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlcnMtb3JkZXItY29tcGFyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9jb21tb24vc3JjL2xpYi9pbnRlcm5hbC91dGlscy9oYW5kbGVycy1vcmRlci1jb21wYXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBR3RGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUdqQyxZQUFvQixRQUFxQjtRQUFyQixhQUFRLEdBQVIsUUFBUSxDQUFhO1FBQ3hDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdHLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxPQUFzQjtRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNwQixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUM7U0FDeEI7UUFDRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU8sc0JBQXNCLENBQUMsT0FBc0I7UUFDcEQsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUU7WUFDbkQsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVNLE9BQU8sQ0FBQyxDQUFnQixFQUFFLENBQWdCO1FBQ2hELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLEdBQUcsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUNyQyxJQUFJLElBQUksRUFBRTtZQUNULE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFDRCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLEdBQUcsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7UUFDN0MsSUFBSSxJQUFJLEVBQUU7WUFDVCxPQUFPLElBQUksQ0FBQztTQUNaO1FBQ0QsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFuZGxlclNvdXJjZVR5cGUgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyBIYW5kbGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QtaGFuZGxlci9oYW5kbGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBQa2dUb3BvbG9neSB9IGZyb20gJy4uL3NlcnZpY2VzL3BrZy10b3BvbG9neS1yZWdpc3RyeS9wa2ctdG9wb2xvZ3ktcmVnaXN0cnknO1xuaW1wb3J0IHtCYXNlUmVxdWVzdH0gZnJvbSAnLi4vLi4vYmFzZS1leHBvcnRzJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIEhhbmRsZXJzT3JkZXJDb21wYXJlciB7XG5cdHByaXZhdGUgX3Njb3Blc09yZGVyOiBNYXA8c3RyaW5nLCBudW1iZXI+O1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlcXVlc3Q6IEJhc2VSZXF1ZXN0KSB7XG5cdFx0Y29uc3Qgc2NvcGVzT3JkZXJFbnRyaWVzID0gWy4uLih0aGlzLl9yZXF1ZXN0LnNjb3BlcyA/PyBbXSldLnJldmVyc2UoKS5tYXAoKHNjb3BlLCBpbmRleCkgPT4gW3Njb3BlLCBpbmRleF0pO1xuXHRcdHRoaXMuX3Njb3Blc09yZGVyID0gT2JqZWN0LmZyb21FbnRyaWVzKHNjb3Blc09yZGVyRW50cmllcyk7XG5cdH1cblxuXHRwcml2YXRlIF9nZXRPcmRlckJ5U2NvcGVzKGhhbmRsZXI6IEhhbmRsZXJDb25maWcpOiBudW1iZXIge1xuXHRcdGlmICghaGFuZGxlci5zY29wZXMpIHtcblx0XHRcdHJldHVybiBOdW1iZXIuTUFYX1ZBTFVFO1xuXHRcdH1cblx0XHRjb25zdCBzY29wZXNPcmRlciA9IGhhbmRsZXIuc2NvcGVzLmZpbHRlcigocykgPT4gcyBpbiB0aGlzLl9zY29wZXNPcmRlcikubWFwKChzKSA9PiB0aGlzLl9zY29wZXNPcmRlcltzXSk7XG5cdFx0cmV0dXJuIE1hdGgubWluKC4uLnNjb3Blc09yZGVyKTtcblx0fVxuXG5cdHByaXZhdGUgX2dldE9yZGVyQnlQa2dUb3BvbG9neShoYW5kbGVyOiBIYW5kbGVyQ29uZmlnKTogbnVtYmVyIHtcblx0XHRpZiAoaGFuZGxlci5zb3VyY2UudHlwZSA9PT0gSGFuZGxlclNvdXJjZVR5cGUuSG9zdCkge1xuXHRcdFx0cmV0dXJuIE51bWJlci5NQVhfVkFMVUU7XG5cdFx0fVxuXHRcdHJldHVybiBQa2dUb3BvbG9neS5nZXQoaGFuZGxlci5zb3VyY2UucGFja2FnZU5hbWUpO1xuXHR9XG5cblx0cHVibGljIGNvbXBhcmUoYTogSGFuZGxlckNvbmZpZywgYjogSGFuZGxlckNvbmZpZyk6IG51bWJlciB7XG5cdFx0Y29uc3QgYVNjb3BlT3JkZXIgPSB0aGlzLl9nZXRPcmRlckJ5U2NvcGVzKGEpO1xuXHRcdGNvbnN0IGJTY29wZU9yZGVyID0gdGhpcy5fZ2V0T3JkZXJCeVNjb3BlcyhiKTtcblx0XHRsZXQgZGlmZiA9IGFTY29wZU9yZGVyIC0gYlNjb3BlT3JkZXI7XG5cdFx0aWYgKGRpZmYpIHtcblx0XHRcdHJldHVybiBkaWZmO1xuXHRcdH1cblx0XHRjb25zdCBhUGtnVG9wb2xvZ3lPcmRlciA9IHRoaXMuX2dldE9yZGVyQnlQa2dUb3BvbG9neShhKTtcblx0XHRjb25zdCBiUGtnVG9wb2xvZ3lPcmRlciA9IHRoaXMuX2dldE9yZGVyQnlQa2dUb3BvbG9neShiKTtcblx0XHRkaWZmID0gYVBrZ1RvcG9sb2d5T3JkZXIgLSBiUGtnVG9wb2xvZ3lPcmRlcjtcblx0XHRpZiAoZGlmZikge1xuXHRcdFx0cmV0dXJuIGRpZmY7XG5cdFx0fVxuXHRcdGRpZmYgPSBhLnNvdXJjZS50eXBlIC0gYi5zb3VyY2UudHlwZTtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxufVxuIl19