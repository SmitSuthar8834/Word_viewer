{"version":3,"file":"creatio-base.mjs","sources":["../../../../../libs/devkit/base/src/lib/external/utils/date-utils.ts","../../../../../libs/devkit/base/src/lib/internal/enums/data-source-scope.enum.ts","../../../../../libs/devkit/base/src/lib/internal/enums/data-schema-attribute-type.enum.ts","../../../../../libs/devkit/base/src/lib/internal/enums/default-value-source.enum.ts","../../../../../libs/devkit/base/src/lib/internal/enums/lookup-mode.ts","../../../../../libs/devkit/base/src/lib/public/enums/data-value-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/enums/aggregation-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/enums/aggregation-function.enum.ts","../../../../../libs/devkit/base/src/lib/public/enums/data-schema-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/logical-operator-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/aggregation-eval-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/arithmetic-operation.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/comparison-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/date-part-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/expression-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/filter-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/function-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/order-direction.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/enums/query-macros-type.enum.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/base-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/arithmetic/arithmetic-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/columns/column-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/expression-parser/base-expression-parser.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/functions/function-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/functions/argument-function-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/functions/aggregation-function-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/functions/date-part-function-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/functions/length-function-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/functions/macros-function-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/functions/window-function-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/parameters/parameter-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/sub-queries/sub-query-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/sub-queries/aggregation-sub-query-expression.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/expression-parser/expression-resolver.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/expression-parser/expression-parser.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/expressions/mocks/expression.mock.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/base-filter.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/mocks/filter.mock.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/mocks/parser.mock.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/single-filter.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/compare-filter.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/between-filter.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/exists-filter.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/in-filter.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/isnull-filter.ts","../../../../../libs/devkit/base/src/lib/public/types/guid.type.ts","../../../../../libs/devkit/base/src/lib/public/exceptions/next-handler-already-specified-exception.ts","../../../../../libs/devkit/base/src/lib/public/exceptions/argument-empty-exception.ts","../../../../../libs/devkit/base/src/lib/public/exceptions/argument-out-of-range-exception.ts","../../../../../libs/devkit/base/src/lib/public/exceptions/item-not-found-exception.ts","../../../../../libs/devkit/base/src/lib/public/exceptions/validation-utilities.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/filter-group.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/filter-parser/base-filter-parser.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/filter-parser/filter-resolver.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/filter-parser/filter-parser.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/filters/filter-test-utils.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/base-query-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/arithmetic/arithmetic-query-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/entity-column/entity-query-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/parameters/parameter-query-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/sub-queries/aggregation-sub-query-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/sub-queries/sub-query-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/functions/aggregation-function-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/functions/date-part-function-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/functions/length-function-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/functions/macros-function-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/functions/window-function-column.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/columns/query-column-test-utils.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/queries/base-query.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/queries/base-filterable-query.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/queries/query-operation-type.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/queries/delete-query.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/queries/entity-schema-query.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/queries/insert-query.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/queries/update-query.ts","../../../../../libs/devkit/base/src/lib/public/esq/data-model/queries/select-localization-query.ts","../../../../../libs/devkit/base/src/lib/public/models/request/base-request.ts","../../../../../libs/devkit/base/src/lib/public/models/view-model-context.ts","../../../../../libs/devkit/base/src/lib/public/services/model/data-source-parameter.ts","../../../../../libs/devkit/base/src/creatio-base.ts"],"sourcesContent":["/**\n * @public\n * Returns a string represent of date in ISO 8601 without time zone specification(doesn't convert it\n * using local timezone).\n *\n * Example:\n *\n *      const date = new Date(2018, 01, 20, 15, 10, 30);\n *      const result = toLocalISOString(date);\n *      //result: '2018-02-20T15:10:30'\n *\n * @param date Date value.\n */\n\nexport function ɵtoLocalISOString(date: Date): string {\n\tif (!(date instanceof Date)) {\n\t\tthrow new TypeError();\n\t}\n\tconst timeZoneOffset = date.getTimezoneOffset() * 60000;\n\treturn new Date(date.getTime() - timeZoneOffset).toISOString().slice(0, -1);\n}\n\n/**\n * @public\n * Returns encoded date in string value.\n * @param date Date value.\n */\nexport function ɵencodeDate(date: Date): string {\n\treturn `\"${ɵtoLocalISOString(date)}\"`;\n}\n","/**\n * @public\n */\nexport enum ɵDataSourceScope {\n\tViewElement = 'viewElement',\n\tPage = 'page',\n}\n","/**\n * @public\n */\nexport enum ɵDataSchemaAttributeType {\n\tOwnAttribute = 'Own',\n\tForwardReferenceAttribute = 'ForwardReference',\n\tBackReferenceAttribute = 'BackReference',\n\tAggregationAttribute = 'Aggregation',\n\tFunctionAttribute = 'Function',\n}\n\n/**\n * @public\n */\nexport enum ɵDataSchemaAttributeUsageType {\n\tGeneral = 0,\n\tAdvanced = 1,\n\tNone = 2,\n}\n","/**\n * @public\n */\nexport enum ɵDefaultValueSource {\n\tNone,\n\tConst,\n\tSettings,\n\tSystemValue,\n\tSequence,\n}\n","/**\n * Lookup mode\n * @internal\n */\nexport enum LookupMode {\n\tList = 'List',\n\tSelectionWindow = 'SelectionWindow',\n}\n","export enum ɵDataValueType {\n\tGuid = 0,\n\tText = 1,\n\tInteger = 4,\n\tFloat = 5,\n\tMoney = 6,\n\tDateTime = 7,\n\tDate = 8,\n\tTime = 9,\n\tLookup = 10,\n\tEnum = 11,\n\tBoolean = 12,\n\tBlob = 13,\n\tImage = 14,\n\tCUSTOM_OBJECT = 15,\n\tIMAGELOOKUP = 16,\n\tCOLLECTION = 17,\n\tColor = 18,\n\tLOCALIZABLE_STRING = 19,\n\tENTITY = 20,\n\tENTITY_COLLECTION = 21,\n\tENTITY_COLUMN_MAPPING_COLLECTION = 22,\n\tHASH_TEXT = 23,\n\tSECURE_TEXT = 24,\n\tFILE = 25,\n\tMAPPING = 26,\n\tSHORT_TEXT = 27,\n\tMEDIUM_TEXT = 28,\n\tMAXSIZE_TEXT = 29,\n\tLONG_TEXT = 30,\n\tFLOAT1 = 31,\n\tFLOAT2 = 32,\n\tFLOAT3 = 33,\n\tFLOAT4 = 34,\n\tLOCALIZABLE_PARAMETER_VALUES_LIST = 35,\n\tMETADATA_TEXT = 36,\n\tSTAGE_INDICATOR = 37,\n\tOBJECT_LIST = 38,\n\tCOMPOSITE_OBJECT_LIST = 39,\n\tFLOAT8 = 40,\n\tFILE_LOCATOR = 41,\n\tPHONE_TEXT = 42,\n\tRICH_TEXT = 43,\n\tWEB_TEXT = 44,\n\tEMAIL_TEXT = 45,\n}\n","export enum ɵAggregationType {\n\t/** Aggregation function type not defined. */\n\tNone = 0,\n\t/** Aggregation function type not defined. */\n\tCount = 1,\n\t/** Sum of values of all elements. */\n\tSum = 2,\n\t/** Average value for all elements. */\n\tAvg = 3,\n\t/** The minimum value among all elements. */\n\tMin = 4,\n\t/** The maximum value among all elements. */\n\tMax = 5,\n\t/** Top one record from collection. */\n\tTopOne = 6,\n}\n","export enum ɵAggregationFunction {\n\t/** Aggregation function type not defined. */\n\tNone = '',\n\t/** Aggregation function type not defined. */\n\tCount = 'Count',\n\t/** Sum of values of all elements. */\n\tSum = 'Sum',\n\t/** Average value for all elements. */\n\tAvg = 'Avg',\n\t/** The minimum value among all elements. */\n\tMin = 'Min',\n\t/** The maximum value among all elements. */\n\tMax = 'Max',\n\t/** Top one record from collection. */\n\tTopOne = 'TopOne',\n}\n","/**\n * Type of DataSchema. In combination with the name is used for unique identification of {@link DataSchema}.\n */\nexport enum ɵDataSchemaType {\n\tEntity = 'Entity',\n\tClientUnit = 'ClientUnit',\n}\n","export enum ɵLogicalOperatorType {\n\tAnd,\n\tOr,\n}\n","export enum ɵAggregationEvalType {\n\t/** The scope of the aggregating function is not defined. */\n\tNone = 0,\n\t/** Applies to all elements. */\n\tAll = 1,\n\t/** Applies to unique values. */\n\tDistinct = 2,\n}\n","export enum ɵArithmeticOperation {\n\t/** Addition. */\n\tAddition = 0,\n\t/** Subtraction. */\n\tSubtraction = 1,\n\t/** Multiplication. */\n\tMultiplication = 2,\n\t/** Division. */\n\tDivision = 3,\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nexport enum ɵComparisonType {\n\tBetween = 0,\n\tContain = 11,\n\tEnd_with = 13,\n\tEqual = 3,\n\tExists = 15,\n\tGreater = 7,\n\tGreater_or_equal = 8,\n\tIs_not_null = 2,\n\tIs_null = 1,\n\tLess = 5,\n\tLess_or_equal = 6,\n\tNot_contain = 12,\n\tNot_end_with = 14,\n\tNot_equal = 4,\n\tNot_exists = 16,\n\tNot_start_with = 10,\n\tStart_with = 9,\n}\n","export enum ɵDatePartType {\n\t/** Empty value. */\n\tNone = 0,\n\t/** Day. */\n\tDay = 1,\n\t/** Week. */\n\tWeek = 2,\n\t/** Month. */\n\tMonth = 3,\n\t/** Year. */\n\tYear = 4,\n\t/** Day of the week. */\n\tWeekDay = 5,\n\t/** Hour. */\n\tHour = 6,\n\t/** Minute. */\n\tHourMinute = 7,\n}\n","export enum ɵExpressionType {\n\tSchemaColumn = 0,\n\tFunction = 1,\n\tParameter = 2,\n\tSubQuery = 3,\n\tArithmeticOperation = 4,\n}\n","export enum ɵFilterType {\n\tNone,\n\tCompare,\n\tIsNull,\n\tBetween,\n\tIn,\n\tExists,\n\tFilterGroup,\n}\n","export enum ɵFunctionType {\n\tNone = 0,\n\t/** Substitution by macro. */\n\tMacros = 1,\n\t/** Aggregating function. */\n\tAggregation = 2,\n\t/** Date fragment. */\n\tDatePart = 3,\n\t/** The size of the value in bytes, used for binary data. */\n\tLength = 4,\n\t/** Window query function */\n\tWindow = 5,\n\t/** Date add. */\n\tDateAdd = 6,\n\t/** Date diff. */\n\tDateDiff = 7,\n}\n","export enum ɵOrderDirection {\n\tNone,\n\tAsc,\n\tDesc,\n}\n","export enum ɵQueryMacrosType {\n\t/** Macro type not defined. */\n\tNone = 0,\n\t/** Current user. */\n\tCurrentUser = 1,\n\t/** Current user contact. */\n\tCurrentUserContact = 2,\n\t/** Yesterday. */\n\tYesterday = 3,\n\t/** Today. */\n\tToday = 4,\n\t/** Tomorrow. */\n\tTomorrow = 5,\n\t/** Previous week. */\n\tPreviousWeek = 6,\n\t/** This week. */\n\tCurrentWeek = 7,\n\t/** Next week. */\n\tNextWeek = 8,\n\t/** Previous month. */\n\tPreviousMonth = 9,\n\t/** Current month. */\n\tCurrentMonth = 10,\n\t/** Next month. */\n\tNextMonth = 11,\n\t/** Previous quarter. */\n\tPreviousQuarter = 12,\n\t/** Current quarter. */\n\tCurrentQuarter = 13,\n\t/** Next quarter. */\n\tNextQuarter = 14,\n\t/** Previous half of the year. */\n\tPreviousHalfYear = 15,\n\t/** Current half-year. */\n\tCurrentHalfYear = 16,\n\t/** Next half-year. */\n\tNextHalfYear = 17,\n\t/** Last year. */\n\tPreviousYear = 18,\n\t/** This year. */\n\tCurrentYear = 19,\n\t/** Previous hour. */\n\tPreviousHour = 20,\n\t/** Current hour. */\n\tCurrentHour = 21,\n\t/** Next hour. */\n\tNextHour = 22,\n\t/** Next year. */\n\tNextYear = 23,\n\t/** Next N Days. */\n\tNextNDays = 24,\n\t/** Previous N days. */\n\tPreviousNDays = 25,\n\t/** Next N hours. */\n\tNextNHours = 26,\n\t/** Previous N hours. */\n\tPreviousNHours = 27,\n\t/** Primary column. */\n\tPrimaryColumn = 34,\n\t/** Primary displayed column. */\n\tPrimaryDisplayColumn = 35,\n\t/** Primary image display column. */\n\tPrimaryImageColumn = 36,\n\t/** Anniversary today. */\n\tDayOfYearToday = 37,\n\t/** Anniversary on the date computed as today plus days offset. */\n\tDayOfYearTodayPlusDaysOffset = 38,\n\t/** Anniversary on the next several days. */\n\tNextNDaysOfYear = 39,\n\t/** Anniversary on the previous several days. */\n\tPreviousNDaysOfYear = 40,\n\t/** Primary color display column. */\n\tPrimaryColorColumn = 41,\n}\n","import { classToPlain } from 'class-transformer';\n\nimport { ɵBaseExpressionParser } from './expression-parser/base-expression-parser';\nimport { ɵSerializable } from '../../../interfaces';\nimport { ɵJsonObject } from '../../../types/json-data.type';\nimport { ɵExpressionType } from '../enums/expression-type.enum';\nimport { ɵBaseFilterParser } from '../filters/filter-parser/base-filter-parser';\n\nexport type ɵExpressionConfig<TExpression extends ɵBaseExpression> = Partial<Omit<TExpression, 'expressionType'>>;\n\nexport abstract class ɵBaseExpression implements ɵSerializable {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_BaseExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [this._instanceOfKey];\n\t}\n\n\tpublic readonly isBlock: boolean = false;\n\n\tpublic static [Symbol.hasInstance](instance: ɵBaseExpression): boolean {\n\t\tconst instanceOfKeys = instance?.constructor?.['_instanceOfKeys'] ?? [];\n\t\treturn instanceOfKeys.includes(this._instanceOfKey);\n\t}\n\n\tpublic abstract readonly expressionType: ɵExpressionType;\n\n\tprotected constructor(config: ɵExpressionConfig<ɵBaseExpression>) {\n\t\tthis.isBlock = <boolean>config?.isBlock;\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser?: TExpressionParser): ɵBaseExpression {\n\t\tthrow new Error(`fromJson not supported on expression type ${this.constructor.name}`);\n\t}\n\n\tprotected serializeItem(item: ɵSerializable): ɵJsonObject {\n\t\treturn typeof item.toJson === 'function'\n\t\t\t? item.toJson()\n\t\t\t: classToPlain(item, {\n\t\t\t\t\texposeUnsetFields: false,\n\t\t\t\t\texcludePrefixes: ['_'],\n\t\t\t  });\n\t}\n\n\tpublic abstract clone(): ɵBaseExpression;\n\n\t/**\n\t * Converts instance to json object.\n\t * @public\n\t */\n\tpublic toJson(): ɵJsonObject {\n\t\treturn classToPlain(this, {\n\t\t\texposeUnsetFields: false,\n\t\t\texcludePrefixes: ['_'],\n\t\t});\n\t}\n}\n","import { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵArithmeticOperation, ɵExpressionType } from '../../enums';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\nimport { ɵBaseExpression, ɵExpressionConfig } from '../base-expression';\nimport { ɵBaseExpressionParser } from '../expression-parser/base-expression-parser';\n\nexport type ɵArithmeticExpressionConfig = ɵExpressionConfig<ɵArithmeticExpression> &\n\tPick<ɵArithmeticExpression, 'arithmeticOperation' | 'leftArithmeticOperand' | 'rightArithmeticOperand'>;\n\nexport class ɵArithmeticExpression extends ɵBaseExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_ArithmeticExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly expressionType: ɵExpressionType = ɵExpressionType.ArithmeticOperation;\n\n\tpublic readonly arithmeticOperation: ɵArithmeticOperation;\n\n\tpublic readonly leftArithmeticOperand: ɵBaseExpression;\n\n\tpublic readonly rightArithmeticOperand: ɵBaseExpression;\n\n\tconstructor(config: ɵArithmeticExpressionConfig) {\n\t\tsuper(config);\n\t\tthis.arithmeticOperation = config?.arithmeticOperation;\n\t\tthis.leftArithmeticOperand = config?.leftArithmeticOperand.clone();\n\t\tthis.rightArithmeticOperand = config?.rightArithmeticOperand.clone();\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser?: TExpressionParser): ɵArithmeticExpression {\n\t\tconst leftArithmeticOperand = expressionParser?.fromJson(\n\t\t\tdto['leftArithmeticOperand'] as ɵJsonObject,\n\t\t\tfilterParser,\n\t\t) as ɵBaseExpression;\n\t\tconst rightArithmeticOperand = expressionParser?.fromJson(\n\t\t\tdto['rightArithmeticOperand'] as ɵJsonObject,\n\t\t\tfilterParser,\n\t\t) as ɵBaseExpression;\n\t\tconst config: ɵArithmeticExpressionConfig = {\n\t\t\tleftArithmeticOperand,\n\t\t\trightArithmeticOperand,\n\t\t\tarithmeticOperation: dto['arithmeticOperation'] as ɵArithmeticOperation,\n\t\t\tisBlock: dto['isBlock'] as boolean,\n\t\t};\n\t\treturn new ɵArithmeticExpression(config);\n\t}\n\n\tpublic clone(): ɵArithmeticExpression {\n\t\treturn new ɵArithmeticExpression(this);\n\t}\n}\n","import { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵExpressionType } from '../../enums';\nimport { ɵBaseExpression, ɵExpressionConfig } from '../base-expression';\n\nexport type ɵColumnExpressionConfig = ɵExpressionConfig<ɵColumnExpression> & Pick<ɵColumnExpression, 'columnPath'>;\n\nexport class ɵColumnExpression extends ɵBaseExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_ColumnExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly expressionType: ɵExpressionType = ɵExpressionType.SchemaColumn;\n\n\tpublic columnPath: string;\n\n\tconstructor(config: ɵColumnExpressionConfig) {\n\t\tsuper(config);\n\t\tthis.columnPath = config?.columnPath;\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson(dto: ɵJsonObject): ɵColumnExpression {\n\t\tconst expression = new ɵColumnExpression({ columnPath: dto['columnPath'] as string });\n\t\treturn expression;\n\t}\n\n\tpublic clone(): ɵColumnExpression {\n\t\treturn new ɵColumnExpression(this);\n\t}\n}\n","import { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\n\n/**\n * Expression parser interface\n * @public\n */\nexport class ɵBaseExpressionParser {\n\tpublic static fromJson(dto: ɵJsonObject, filterParser: typeof ɵBaseFilterParser): unknown {\n\t\tthrow new Error('not implemented');\n\t}\n}\n","import { ɵExpressionType, ɵFunctionType } from '../../enums';\nimport { ɵBaseExpression, ɵExpressionConfig } from '../base-expression';\n\nexport type ɵFunctionExpressionConfig<TExpression extends ɵFunctionExpression> = Omit<\n\tɵExpressionConfig<TExpression>,\n\t'functionType'\n>;\n\nexport abstract class ɵFunctionExpression extends ɵBaseExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_FunctionExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly expressionType: ɵExpressionType = ɵExpressionType.Function;\n\n\tpublic abstract readonly functionType: ɵFunctionType;\n\n\tprotected constructor(config: ɵFunctionExpressionConfig<ɵFunctionExpression>) {\n\t\tsuper(config);\n\t}\n\n\tpublic abstract clone(): ɵFunctionExpression;\n}\n","import { ɵFunctionExpression, ɵFunctionExpressionConfig } from './function-expression';\nimport { ɵJsonObject } from '../../../../types';\nimport { ɵBaseExpression } from '../base-expression';\n\nexport type ɵArgumentFunctionExpressionConfig<TExpression extends ɵArgumentFunctionExpression> =\n\tɵFunctionExpressionConfig<TExpression> & Pick<ɵArgumentFunctionExpression, 'functionArgument'>;\n\nexport abstract class ɵArgumentFunctionExpression extends ɵFunctionExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_ArgumentFunctionExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵFunctionExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly functionArgument: ɵBaseExpression;\n\n\tprotected constructor(config: ɵArgumentFunctionExpressionConfig<ɵArgumentFunctionExpression>) {\n\t\tsuper(config);\n\t\tthis.functionArgument = config?.functionArgument.clone();\n\t}\n\n\tpublic abstract clone(): ɵArgumentFunctionExpression;\n\n\tpublic toJson(): ɵJsonObject {\n\t\tconst result = super.toJson();\n\t\tif (this.functionArgument) {\n\t\t\tresult['functionArgument'] = this.serializeItem(this.functionArgument);\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { ɵArgumentFunctionExpression, ɵArgumentFunctionExpressionConfig } from './argument-function-expression';\nimport { ɵAggregationType } from '../../../../../public/enums';\nimport { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵAggregationEvalType, ɵFunctionType } from '../../enums';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\nimport { ɵBaseExpression } from '../base-expression';\nimport { ɵBaseExpressionParser } from '../expression-parser/base-expression-parser';\n\nexport type ɵAggregationFunctionExpressionConfig = ɵArgumentFunctionExpressionConfig<ɵAggregationFunctionExpression> &\n\tPick<ɵAggregationFunctionExpression, 'aggregationType' | 'aggregationEvalType'>;\n\nexport class ɵAggregationFunctionExpression extends ɵArgumentFunctionExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_AggregationFunctionExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵArgumentFunctionExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly functionType: ɵFunctionType = ɵFunctionType.Aggregation;\n\n\tpublic readonly aggregationType: ɵAggregationType;\n\n\tpublic readonly aggregationEvalType: ɵAggregationEvalType;\n\n\tconstructor(config: ɵAggregationFunctionExpressionConfig) {\n\t\tsuper(config);\n\t\tthis.aggregationType = config?.aggregationType;\n\t\tthis.aggregationEvalType = config?.aggregationEvalType;\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(\n\t\tdto: ɵJsonObject,\n\t\tfilterParser: TFilterParser,\n\t\texpressionParser?: TExpressionParser,\n\t): ɵAggregationFunctionExpression {\n\t\tconst functionArgument = expressionParser?.fromJson(\n\t\t\tdto['functionArgument'] as ɵJsonObject,\n\t\t\tfilterParser,\n\t\t) as ɵBaseExpression;\n\t\tconst aggregationType = dto['aggregationType'] as ɵAggregationType;\n\t\tconst aggregationEvalType = dto['aggregationEvalType'] as ɵAggregationEvalType;\n\t\treturn new ɵAggregationFunctionExpression({\n\t\t\tfunctionArgument,\n\t\t\taggregationType,\n\t\t\taggregationEvalType,\n\t\t\tisBlock: dto['isBlock'] as boolean,\n\t\t});\n\t}\n\n\tpublic clone(): ɵAggregationFunctionExpression {\n\t\treturn new ɵAggregationFunctionExpression(this);\n\t}\n}\n","import { ɵArgumentFunctionExpression, ɵArgumentFunctionExpressionConfig } from './argument-function-expression';\nimport { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵDatePartType, ɵFunctionType } from '../../enums';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\nimport { ɵBaseExpression } from '../base-expression';\nimport { ɵBaseExpressionParser } from '../expression-parser/base-expression-parser';\n\nexport type ɵDatePartFunctionExpressionConfig = ɵArgumentFunctionExpressionConfig<ɵDatePartFunctionExpression> &\n\tPick<ɵDatePartFunctionExpression, 'datePartType'>;\n\nexport class ɵDatePartFunctionExpression extends ɵArgumentFunctionExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_DatePartFunctionExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵArgumentFunctionExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly functionType: ɵFunctionType = ɵFunctionType.DatePart;\n\n\tpublic readonly datePartType: ɵDatePartType;\n\n\tconstructor(config: ɵDatePartFunctionExpressionConfig) {\n\t\tsuper(config);\n\t\tthis.datePartType = config?.datePartType;\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(\n\t\tdto: ɵJsonObject,\n\t\tfilterParser: TFilterParser,\n\t\texpressionParser?: TExpressionParser,\n\t): ɵDatePartFunctionExpression {\n\t\tconst functionArgument = expressionParser?.fromJson(\n\t\t\tdto['functionArgument'] as ɵJsonObject,\n\t\t\tfilterParser,\n\t\t) as ɵBaseExpression;\n\t\tconst datePartType = dto['datePartType'] as ɵDatePartType;\n\t\treturn new ɵDatePartFunctionExpression({ functionArgument, datePartType, isBlock: dto['isBlock'] as boolean });\n\t}\n\n\tpublic clone(): ɵDatePartFunctionExpression {\n\t\treturn new ɵDatePartFunctionExpression(this);\n\t}\n}\n","import { ɵArgumentFunctionExpression, ɵArgumentFunctionExpressionConfig } from './argument-function-expression';\nimport { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵFunctionType } from '../../enums';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\nimport { ɵColumnExpression } from '../columns/column-expression';\nimport { ɵBaseExpressionParser } from '../expression-parser/base-expression-parser';\n\nexport type ɵLengthFunctionExpressionConfig = ɵArgumentFunctionExpressionConfig<ɵLengthFunctionExpression>;\n\nexport class ɵLengthFunctionExpression extends ɵArgumentFunctionExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_LengthFunctionExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵArgumentFunctionExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly functionType: ɵFunctionType = ɵFunctionType.Length;\n\n\tpublic readonly functionArgument!: ɵColumnExpression;\n\n\tconstructor(config: ɵLengthFunctionExpressionConfig) {\n\t\tsuper(config);\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser?: TExpressionParser): ɵLengthFunctionExpression {\n\t\tconst functionArgument = expressionParser?.fromJson(\n\t\t\tdto['functionArgument'] as ɵJsonObject,\n\t\t\tfilterParser,\n\t\t) as ɵColumnExpression;\n\t\treturn new ɵLengthFunctionExpression({ functionArgument, isBlock: dto['isBlock'] as boolean });\n\t}\n\n\tpublic clone(): ɵLengthFunctionExpression {\n\t\treturn new ɵLengthFunctionExpression(this);\n\t}\n}\n","import { ɵFunctionExpression, ɵFunctionExpressionConfig } from './function-expression';\nimport { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵFunctionType, ɵQueryMacrosType } from '../../enums';\n\nexport type ɵMacrosFunctionExpressionConfig = ɵFunctionExpressionConfig<ɵMacrosFunctionExpression> &\n\tPick<ɵMacrosFunctionExpression, 'macrosType'>;\n\nexport class ɵMacrosFunctionExpression extends ɵFunctionExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_MacrosFunctionExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵFunctionExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly functionType: ɵFunctionType = ɵFunctionType.Macros;\n\n\tpublic readonly macrosType: ɵQueryMacrosType;\n\n\tconstructor(config: ɵMacrosFunctionExpressionConfig) {\n\t\tsuper(config);\n\t\tthis.macrosType = config?.macrosType;\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson(dto: ɵJsonObject): ɵMacrosFunctionExpression {\n\t\tconst expression = new ɵMacrosFunctionExpression({ macrosType: dto['macrosType'] as ɵQueryMacrosType });\n\t\treturn expression;\n\t}\n\n\tpublic clone(): ɵMacrosFunctionExpression {\n\t\treturn new ɵMacrosFunctionExpression(this);\n\t}\n}\n","import { ɵAggregationFunctionExpression } from './aggregation-function-expression';\nimport { ɵArgumentFunctionExpression, ɵArgumentFunctionExpressionConfig } from './argument-function-expression';\nimport { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵFunctionType } from '../../enums';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\nimport { ɵBaseExpressionParser } from '../expression-parser/base-expression-parser';\n\nexport type ɵWindowFunctionExpressionConfig = ɵArgumentFunctionExpressionConfig<ɵWindowFunctionExpression>;\n\nexport class ɵWindowFunctionExpression extends ɵArgumentFunctionExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_WindowFunctionExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵArgumentFunctionExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly functionType: ɵFunctionType = ɵFunctionType.Window;\n\n\tpublic readonly functionArgument!: ɵAggregationFunctionExpression;\n\n\tconstructor(config: ɵWindowFunctionExpressionConfig) {\n\t\tsuper(config);\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser?: TExpressionParser): ɵWindowFunctionExpression {\n\t\tconst functionArgument = expressionParser?.fromJson(\n\t\t\tdto['functionArgument'] as ɵJsonObject,\n\t\t\tfilterParser,\n\t\t) as ɵAggregationFunctionExpression;\n\t\treturn new ɵWindowFunctionExpression({ functionArgument, isBlock: dto['isBlock'] as boolean });\n\t}\n\n\tpublic clone(): ɵWindowFunctionExpression {\n\t\treturn new ɵWindowFunctionExpression(this);\n\t}\n}\n","import { Exclude } from 'class-transformer';\n\nimport { ɵencodeDate } from '../../../../../external/utils';\nimport { ɵDataValueType } from '../../../../../public/enums';\nimport { ɵLookupValue } from '../../../../../public/models';\nimport { ɵEntityColumnValue, ɵJsonObject } from '../../../../../public/types';\nimport { ɵExpressionType } from '../../enums';\nimport { ɵBaseExpression, ɵExpressionConfig } from '../base-expression';\n\nexport type ɵParameterExpressionConfig = ɵExpressionConfig<ɵParameterExpression> & Pick<ɵParameterExpression, 'value'>;\n\nexport class ɵParameterExpression extends ɵBaseExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_ParameterExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly expressionType: ɵExpressionType = ɵExpressionType.Parameter;\n\n\t@Exclude()\n\tpublic readonly value: ɵEntityColumnValue;\n\n\t@Exclude()\n\tpublic readonly dataValueType: ɵDataValueType;\n\n\tpublic readonly parameter: {\n\t\tvalue?: ɵEntityColumnValue;\n\t\tarrayValue?: string[];\n\t\tdataValueType: ɵDataValueType;\n\t};\n\n\tconstructor(config: ɵParameterExpressionConfig) {\n\t\tsuper(config);\n\t\tconst value = config?.value;\n\t\tif (value instanceof Date) {\n\t\t\tconst cloneDate = new Date();\n\t\t\tcloneDate.setTime(value.getTime());\n\t\t\tthis.value = cloneDate;\n\t\t} else if (!value) {\n\t\t\tthis.value = value;\n\t\t} else {\n\t\t\tthis.value = typeof value === 'object' ? { ...(value as ɵLookupValue) } : value;\n\t\t}\n\t\tthis.dataValueType = config?.dataValueType ?? ɵDataValueType.Text;\n\t\tthis.parameter = {\n\t\t\tdataValueType: this.dataValueType,\n\t\t\t...this._getParameterValueMetadata(),\n\t\t};\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson(dto: ɵJsonObject): ɵParameterExpression {\n\t\tconst expression = new ɵParameterExpression(dto['parameter'] as unknown as ɵParameterExpressionConfig);\n\t\treturn expression;\n\t}\n\n\tprivate _convertStringToBlobArray(str: string): string[] {\n\t\tconst out: string[] = [];\n\t\tlet position = 0;\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tconst code = str.charCodeAt(i);\n\t\t\tif (code < 128) {\n\t\t\t\tout[position++] = String.fromCharCode(code);\n\t\t\t} else if (code < 2048) {\n\t\t\t\t/* eslint-disable no-bitwise */\n\t\t\t\tout[position++] = String.fromCharCode((code >> 6) | 192);\n\t\t\t\tout[position++] = String.fromCharCode((code & 63) | 128);\n\t\t\t} else {\n\t\t\t\tout[position++] = String.fromCharCode((code >> 12) | 224);\n\t\t\t\tout[position++] = String.fromCharCode(((code >> 6) & 63) | 128);\n\t\t\t\tout[position++] = String.fromCharCode((code & 63) | 128);\n\t\t\t\t/* eslint-enable no-bitwise */\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\tprivate _getParameterValueMetadata(): {\n\t\tvalue?: ɵEntityColumnValue;\n\t\tarrayValue?: string[];\n\t} {\n\t\tif (this.dataValueType === ɵDataValueType.Blob) {\n\t\t\treturn {\n\t\t\t\tarrayValue: !this.value ? [] : this._convertStringToBlobArray(this.value as string),\n\t\t\t};\n\t\t} else if (this.value instanceof Date) {\n\t\t\treturn {\n\t\t\t\tvalue: ɵencodeDate(this.value),\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tvalue: this.value,\n\t\t\t};\n\t\t}\n\t}\n\n\tpublic clone(): ɵParameterExpression {\n\t\treturn new ɵParameterExpression(this);\n\t}\n}\n","import { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵExpressionType } from '../../enums';\nimport { ɵFilterGroup } from '../../filters/filter-group';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\nimport { ɵBaseExpression, ɵExpressionConfig } from '../base-expression';\n\nexport type ɵSubQueryExpressionConfig = ɵExpressionConfig<ɵSubQueryExpression> &\n\tPick<ɵSubQueryExpression, 'columnPath'>;\n\nexport class ɵSubQueryExpression extends ɵBaseExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_SubQueryExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly expressionType: ɵExpressionType = ɵExpressionType.SubQuery;\n\n\tpublic columnPath: string;\n\n\tpublic readonly subFilters: ɵFilterGroup;\n\tpublic readonly subOrderDirection?: number;\n\tpublic readonly subOrderColumn?: string;\n\n\tconstructor(config: ɵSubQueryExpressionConfig) {\n\t\tsuper(config);\n\t\tthis.columnPath = config?.columnPath;\n\t\tconst subFilter = <ɵFilterGroup>config?.subFilters;\n\t\tthis.subFilters = typeof subFilter?.clone === 'function' ? subFilter.clone() : subFilter;\n\t\tthis.subOrderDirection = config.subOrderDirection;\n\t\tthis.subOrderColumn = config.subOrderColumn;\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson<TFilterParser extends typeof ɵBaseFilterParser>(\n\t\tdto: ɵJsonObject,\n\t\tfilterParser: TFilterParser,\n\t): ɵSubQueryExpression {\n\t\tconst expression = new ɵSubQueryExpression({\n\t\t\tcolumnPath: dto['columnPath'] as string,\n\t\t\tsubFilters: filterParser.fromJson(dto['subFilters'] as ɵJsonObject) as ɵFilterGroup,\n\t\t\tsubOrderDirection: dto['subOrderDirection'] as number,\n\t\t\tsubOrderColumn: dto['subOrderColumn'] as string,\n\t\t});\n\t\treturn expression;\n\t}\n\n\tpublic clone(): ɵSubQueryExpression {\n\t\treturn new ɵSubQueryExpression(this);\n\t}\n\n\tpublic toJson(): ɵJsonObject {\n\t\tconst result = super.toJson();\n\t\tif (this.subFilters) {\n\t\t\tresult['subFilters'] = this.serializeItem(this.subFilters);\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { ɵSubQueryExpression, ɵSubQueryExpressionConfig } from './sub-query-expression';\nimport { ɵAggregationType } from '../../../../../public/enums';\nimport { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵFunctionType } from '../../enums';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\n\nexport type ɵAggregationSubQueryExpressionConfig = ɵSubQueryExpressionConfig &\n\tPick<ɵAggregationSubQueryExpression, 'aggregationType'> &\n\tPick<ɵAggregationSubQueryExpression, 'functionType'>;\n\nexport class ɵAggregationSubQueryExpression extends ɵSubQueryExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_AggregationSubQueryExpression';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵSubQueryExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly aggregationType: ɵAggregationType;\n\tpublic readonly functionType?: ɵFunctionType;\n\n\tconstructor(config: ɵAggregationSubQueryExpressionConfig) {\n\t\tsuper(config);\n\t\tthis.aggregationType = config?.aggregationType;\n\t\tthis.functionType = config?.functionType;\n\t}\n\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson<TFilterParser extends typeof ɵBaseFilterParser>(\n\t\tdto: ɵJsonObject,\n\t\tfilterParser: TFilterParser,\n\t): ɵAggregationSubQueryExpression {\n\t\tconst subQueryExpression = super.fromJson(dto, filterParser) as ɵSubQueryExpression;\n\t\tconst expression = new ɵAggregationSubQueryExpression({\n\t\t\taggregationType: dto['aggregationType'] as ɵAggregationType,\n\t\t\tfunctionType: dto['functionType'] as ɵFunctionType,\n\t\t\t...subQueryExpression,\n\t\t});\n\t\treturn expression;\n\t}\n\n\tpublic clone(): ɵAggregationSubQueryExpression {\n\t\treturn new ɵAggregationSubQueryExpression(this);\n\t}\n}\n","import { ɵJsonObject } from '../../../../types';\nimport { ɵExpressionType } from '../../enums/expression-type.enum';\nimport { ɵFunctionType } from '../../enums/function-type.enum';\nimport { ɵArithmeticExpression } from '../arithmetic';\nimport { ɵBaseExpression } from '../base-expression';\nimport { ɵColumnExpression } from '../columns/column-expression';\nimport {\n\tɵDatePartFunctionExpression,\n\tɵLengthFunctionExpression,\n\tɵMacrosFunctionExpression,\n\tɵWindowFunctionExpression,\n} from '../functions';\nimport { ɵParameterExpression } from '../parameters/parameter-expression';\nimport { ɵAggregationSubQueryExpression } from '../sub-queries/aggregation-sub-query-expression';\n\n/**\n * Function expression resolver.\n * @public\n */\nclass FunctionExpressionResolver {\n\tpublic static resolve(dto: ɵJsonObject): typeof ɵBaseExpression {\n\t\tconst expressionClass = {\n\t\t\t[ɵFunctionType.Macros]: ɵMacrosFunctionExpression,\n\t\t\t[ɵFunctionType.Length]: ɵLengthFunctionExpression,\n\t\t\t[ɵFunctionType.Window]: ɵWindowFunctionExpression,\n\t\t\t[ɵFunctionType.DatePart]: ɵDatePartFunctionExpression,\n\t\t\t[ɵFunctionType.DateAdd]: ɵDatePartFunctionExpression,\n\t\t\t[ɵFunctionType.DateDiff]: ɵDatePartFunctionExpression,\n\t\t};\n\t\treturn expressionClass[dto['functionType'] as ɵFunctionType];\n\t}\n}\n\n/**\n * Expression resolver.\n * @public\n */\nexport class ɵExpressionResolver {\n\tpublic static resolve(expressionType: ɵExpressionType, dto: ɵJsonObject): typeof ɵBaseExpression {\n\t\tconst expressionClass = {\n\t\t\t[ɵExpressionType.SchemaColumn]: ɵColumnExpression,\n\t\t\t[ɵExpressionType.Parameter]: ɵParameterExpression,\n\t\t\t[ɵExpressionType.SubQuery]: ɵAggregationSubQueryExpression,\n\t\t\t[ɵExpressionType.ArithmeticOperation]: ɵArithmeticExpression,\n\t\t\t[ɵExpressionType.Function]: FunctionExpressionResolver.resolve(dto),\n\t\t};\n\t\treturn expressionClass[expressionType];\n\t}\n}\n","import { ɵBaseExpressionParser } from './base-expression-parser';\nimport { ɵExpressionResolver } from './expression-resolver';\nimport { ɵJsonObject } from '../../../../types/json-data.type';\nimport { ɵExpressionType } from '../../enums/expression-type.enum';\nimport { ɵBaseFilterParser } from '../../filters/filter-parser/base-filter-parser';\nimport { ɵBaseExpression } from '../base-expression';\n\n/**\n * Expression parser.\n * @public\n */\nexport class ɵExpressionParser extends ɵBaseExpressionParser {\n\t/**\n\t * Parses expression from json.\n\t * @public\n\t */\n\tpublic static fromJson(dto: ɵJsonObject, filterParser: typeof ɵBaseFilterParser): ɵBaseExpression {\n\t\tconst expressionType = dto['expressionType'] as ɵExpressionType;\n\t\treturn ɵExpressionResolver.resolve(expressionType, dto).fromJson(dto, filterParser, ɵExpressionParser);\n\t}\n}\n","import { classToPlain } from 'class-transformer';\n\nimport { ɵExpressionType } from '../../enums';\nimport { ɵBaseExpression, ɵExpressionConfig } from '../base-expression';\n\nexport const ɵEXPRESSION_TYPE_MOCK: ɵExpressionType = -1;\n\nexport class ɵExpressionMock extends ɵBaseExpression {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_ExpressionMock';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly expressionType: ɵExpressionType = ɵEXPRESSION_TYPE_MOCK;\n\n\tconstructor(config?: ɵExpressionConfig<ɵExpressionMock>) {\n\t\tsuper(config || {});\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic get plainObject(): object {\n\t\treturn classToPlain(this, { exposeUnsetFields: false, excludePrefixes: ['_'] });\n\t}\n\n\tpublic clone(): ɵExpressionMock {\n\t\treturn new ɵExpressionMock(this);\n\t}\n}\n","import { classToPlain } from 'class-transformer';\n\nimport { ɵBaseFilterParser } from './filter-parser/base-filter-parser';\nimport { ɵSerializable } from '../../../interfaces';\nimport { ɵJsonObject } from '../../../types/json-data.type';\nimport { ɵFilterType } from '../enums/filter-type.enum';\nimport { ɵBaseExpressionParser } from '../expressions/expression-parser/base-expression-parser';\n\nexport abstract class ɵBaseFilter implements ɵSerializable {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_BaseFilter';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [this._instanceOfKey];\n\t}\n\n\tpublic readonly filterType: ɵFilterType;\n\n\tpublic isEnabled = true;\n\n\tpublic trimDateTimeParameterToDate = false;\n\n\tpublic static [Symbol.hasInstance](instance: ɵBaseFilter): boolean {\n\t\tconst instanceOfKeys = instance?.constructor?.['_instanceOfKeys'] ?? [];\n\t\treturn instanceOfKeys.includes(this._instanceOfKey);\n\t}\n\n\tprotected constructor(filterType: ɵFilterType) {\n\t\tthis.filterType = filterType;\n\t}\n\n\t/**\n\t * Parses filter from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser: TExpressionParser): ɵBaseFilter {\n\t\tthrow new Error(`fromJson not supported on filter type ${this.constructor.name}`);\n\t}\n\n\tprotected serializeItem(item: ɵSerializable): ɵJsonObject {\n\t\treturn typeof item.toJson === 'function'\n\t\t\t? item.toJson()\n\t\t\t: classToPlain(item, {\n\t\t\t\t\texposeUnsetFields: false,\n\t\t\t\t\texcludePrefixes: ['_'],\n\t\t\t  });\n\t}\n\n\tpublic abstract clone(): ɵBaseFilter;\n\n\t/**\n\t * Converts instance to json object.\n\t * @public\n\t */\n\tpublic toJson(): ɵJsonObject {\n\t\treturn classToPlain(this, {\n\t\t\texposeUnsetFields: false,\n\t\t\texcludePrefixes: ['_'],\n\t\t});\n\t}\n}\n","import { classToPlain } from 'class-transformer';\n\nimport { ɵFilterType } from '../../enums';\nimport { ɵBaseFilter } from '../base-filter';\n\nexport class ɵFilterMock extends ɵBaseFilter {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_FilterMock';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseFilter._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tconstructor(filterType: ɵFilterType = ɵFilterType.None) {\n\t\tsuper(filterType);\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic get plainObject(): object {\n\t\treturn classToPlain(this, { exposeUnsetFields: false, excludePrefixes: ['_'] });\n\t}\n\n\tpublic clone(): ɵFilterMock {\n\t\treturn new ɵFilterMock(this.filterType);\n\t}\n}\n","export const ɵparserMock = {\n\tfromJson: (data) => ({\n\t\t...data,\n\t\tclone: () => data,\n\t}),\n\tclone: () => this,\n};\n","import { ɵBaseFilter } from './base-filter';\nimport { ɵJsonObject } from '../../../types';\nimport { ɵComparisonType, ɵFilterType } from '../enums';\nimport { ɵBaseExpression } from '../expressions/base-expression';\n\nexport abstract class ɵSingleFilter extends ɵBaseFilter {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_SingleFilter';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseFilter._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly comparisonType: ɵComparisonType;\n\n\tpublic readonly leftExpression: ɵBaseExpression;\n\n\tprotected constructor(filterType: ɵFilterType, comparisonType: ɵComparisonType, leftExpression: ɵBaseExpression) {\n\t\tsuper(filterType);\n\t\tthis.comparisonType = comparisonType;\n\t\tthis.leftExpression = leftExpression.clone();\n\t}\n\n\tpublic toJson(): ɵJsonObject {\n\t\treturn {\n\t\t\t...super.toJson(),\n\t\t\tleftExpression: this.serializeItem(this.leftExpression),\n\t\t};\n\t}\n}\n","import { ɵBaseFilterParser } from './filter-parser/base-filter-parser';\nimport { ɵSingleFilter } from './single-filter';\nimport { ɵJsonObject } from '../../../types/json-data.type';\nimport { ɵComparisonType, ɵFilterType } from '../enums';\nimport { ɵBaseExpression } from '../expressions/base-expression';\nimport { ɵBaseExpressionParser } from '../expressions/expression-parser/base-expression-parser';\n\nexport class ɵCompareFilter extends ɵSingleFilter {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_CompareFilter';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly rightExpression: ɵBaseExpression;\n\n\tconstructor(comparisonType: ɵComparisonType, leftExpression: ɵBaseExpression, rightExpression: ɵBaseExpression) {\n\t\tsuper(ɵFilterType.Compare, comparisonType, leftExpression);\n\t\tthis.rightExpression = rightExpression.clone();\n\t}\n\n\t/**\n\t * Parses filter from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser: TExpressionParser): ɵCompareFilter {\n\t\tconst filter = new ɵCompareFilter(\n\t\t\tdto['comparisonType'] as ɵComparisonType,\n\t\t\texpressionParser.fromJson(dto['leftExpression'] as ɵJsonObject, filterParser) as ɵBaseExpression,\n\t\t\texpressionParser.fromJson(dto['rightExpression'] as ɵJsonObject, filterParser) as ɵBaseExpression,\n\t\t);\n\t\treturn filter;\n\t}\n\n\tpublic clone(): ɵCompareFilter {\n\t\treturn new ɵCompareFilter(this.comparisonType, this.leftExpression, this.rightExpression);\n\t}\n\n\tpublic toJson(): ɵJsonObject {\n\t\treturn {\n\t\t\t...super.toJson(),\n\t\t\trightExpression: this.serializeItem(this.rightExpression),\n\t\t};\n\t}\n}\n","import { ɵBaseFilterParser } from './filter-parser/base-filter-parser';\nimport { ɵSingleFilter } from './single-filter';\nimport { ɵJsonObject } from '../../../types/json-data.type';\nimport { ɵComparisonType, ɵFilterType } from '../enums';\nimport { ɵBaseExpression } from '../expressions/base-expression';\nimport { ɵBaseExpressionParser } from '../expressions/expression-parser/base-expression-parser';\n\nexport class ɵBetweenFilter extends ɵSingleFilter {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_BetweenFilter';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly rightLessExpression: ɵBaseExpression;\n\n\tpublic readonly rightGreaterExpression: ɵBaseExpression;\n\n\tconstructor(\n\t\tleftExpression: ɵBaseExpression,\n\t\trightLessExpression: ɵBaseExpression,\n\t\trightGreaterExpression: ɵBaseExpression,\n\t) {\n\t\tsuper(ɵFilterType.Between, ɵComparisonType.Between, leftExpression);\n\t\tthis.rightLessExpression = rightLessExpression.clone();\n\t\tthis.rightGreaterExpression = rightGreaterExpression.clone();\n\t}\n\n\t/**\n\t * Parses filter from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser: TExpressionParser): ɵBetweenFilter {\n\t\tconst filter = new ɵBetweenFilter(\n\t\t\texpressionParser.fromJson(dto['leftExpression'] as ɵJsonObject, filterParser) as ɵBaseExpression,\n\t\t\texpressionParser.fromJson(dto['rightLessExpression'] as ɵJsonObject, filterParser) as ɵBaseExpression,\n\t\t\texpressionParser.fromJson(dto['rightGreaterExpression'] as ɵJsonObject, filterParser) as ɵBaseExpression,\n\t\t);\n\t\treturn filter;\n\t}\n\n\tpublic clone(): ɵBetweenFilter {\n\t\treturn new ɵBetweenFilter(this.leftExpression, this.rightLessExpression, this.rightGreaterExpression);\n\t}\n\n\tpublic toJson(): ɵJsonObject {\n\t\treturn {\n\t\t\t...super.toJson(),\n\t\t\trightLessExpression: this.serializeItem(this.rightLessExpression),\n\t\t\trightGreaterExpression: this.serializeItem(this.rightGreaterExpression),\n\t\t};\n\t}\n}\n","import { ɵFilterGroup } from './filter-group';\nimport { ɵBaseFilterParser } from './filter-parser/base-filter-parser';\nimport { ɵSingleFilter } from './single-filter';\nimport { ɵJsonObject } from '../../../types';\nimport { ɵComparisonType, ɵFilterType } from '../enums';\nimport { ɵBaseExpression } from '../expressions';\nimport { ɵBaseExpressionParser } from '../expressions/expression-parser/base-expression-parser';\n\nexport class ɵExistsFilter extends ɵSingleFilter {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_ExistsFilter';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly subFilters?: ɵFilterGroup;\n\n\tpublic readonly isAggregative: boolean;\n\n\tconstructor(\n\t\tleftExpression: ɵBaseExpression,\n\t\tsubFilters?: ɵFilterGroup,\n\t\tcomparisonType: ɵComparisonType = ɵComparisonType.Exists,\n\t\tisAggregative = true,\n\t) {\n\t\tsuper(ɵFilterType.Exists, comparisonType, leftExpression);\n\t\tthis.subFilters = subFilters?.clone();\n\t\tthis.isAggregative = isAggregative;\n\t}\n\n\t/**\n\t * Parses filter from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser: TExpressionParser): ɵExistsFilter {\n\t\tconst leftExpression = expressionParser.fromJson(\n\t\t\tdto['leftExpression'] as ɵJsonObject,\n\t\t\tfilterParser,\n\t\t) as ɵBaseExpression;\n\t\tconst subFilters = filterParser.fromJson(dto['subFilters'] as ɵJsonObject) as ɵFilterGroup;\n\t\treturn new ɵExistsFilter(\n\t\t\tleftExpression,\n\t\t\tsubFilters,\n\t\t\tdto['comparisonType'] as ɵComparisonType,\n\t\t\tdto['isAggregative'] as boolean,\n\t\t);\n\t}\n\n\tpublic clone(): ɵExistsFilter {\n\t\treturn new ɵExistsFilter(this.leftExpression, this.subFilters, this.comparisonType, this.isAggregative);\n\t}\n\n\tpublic toJson(): ɵJsonObject {\n\t\tconst result = super.toJson();\n\t\tif (this.subFilters) {\n\t\t\tresult['subFilters'] = this.serializeItem(this.subFilters);\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { ɵBaseFilterParser } from './filter-parser/base-filter-parser';\nimport { ɵSingleFilter } from './single-filter';\nimport { ɵJsonArray, ɵJsonObject } from '../../../types/json-data.type';\nimport { ɵComparisonType, ɵFilterType } from '../enums';\nimport { ɵBaseExpression } from '../expressions/base-expression';\nimport { ɵBaseExpressionParser } from '../expressions/expression-parser/base-expression-parser';\n\nexport class ɵInFilter extends ɵSingleFilter {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_InFilter';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tpublic readonly rightExpressions: ɵBaseExpression[];\n\n\tconstructor(comparisonType: ɵComparisonType, leftExpression: ɵBaseExpression, rightExpressions: ɵBaseExpression[]) {\n\t\tsuper(ɵFilterType.In, comparisonType, leftExpression);\n\t\tthis.rightExpressions = rightExpressions.map((expression) => expression.clone());\n\t}\n\n\t/**\n\t * Parses in filter from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser: TExpressionParser): ɵInFilter {\n\t\tconst dtoRightExpressions = (dto['rightExpressions'] ?? []) as ɵJsonArray;\n\t\treturn new ɵInFilter(\n\t\t\tdto['comparisonType'] as ɵComparisonType,\n\t\t\texpressionParser.fromJson(dto['leftExpression'] as ɵJsonObject, filterParser) as ɵBaseExpression,\n\t\t\tdtoRightExpressions.map(\n\t\t\t\t(expression) => expressionParser.fromJson(expression as ɵJsonObject, filterParser) as ɵBaseExpression,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic clone(): ɵInFilter {\n\t\treturn new ɵInFilter(this.comparisonType, this.leftExpression, this.rightExpressions);\n\t}\n\n\tpublic toJson(): ɵJsonObject {\n\t\treturn {\n\t\t\t...super.toJson(),\n\t\t\trightExpressions: this.rightExpressions.map((expression) => this.serializeItem(expression)),\n\t\t};\n\t}\n}\n","import { Expose } from 'class-transformer';\n\nimport { ɵBaseFilterParser } from './filter-parser/base-filter-parser';\nimport { ɵSingleFilter } from './single-filter';\nimport { ɵJsonObject } from '../../../types';\nimport { ɵComparisonType, ɵFilterType } from '../enums';\nimport { ɵBaseExpression } from '../expressions/base-expression';\nimport { ɵBaseExpressionParser } from '../expressions/expression-parser/base-expression-parser';\n\nexport class ɵIsNullFilter extends ɵSingleFilter {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_IsNullFilter';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\tconstructor(comparisonType: ɵComparisonType, leftExpression: ɵBaseExpression) {\n\t\tsuper(ɵFilterType.IsNull, comparisonType, leftExpression);\n\t}\n\n\t@Expose()\n\tpublic get isNull(): boolean {\n\t\treturn this.comparisonType === ɵComparisonType.Is_null;\n\t}\n\n\t/**\n\t * Parses isNull filter from json.\n\t * @public\n\t */\n\tpublic static fromJson<\n\t\tTFilterParser extends typeof ɵBaseFilterParser,\n\t\tTExpressionParser extends typeof ɵBaseExpressionParser,\n\t>(dto: ɵJsonObject, filterParser: TFilterParser, expressionParser: TExpressionParser): ɵIsNullFilter {\n\t\treturn new ɵIsNullFilter(\n\t\t\tdto['comparisonType'] as ɵComparisonType,\n\t\t\texpressionParser.fromJson(dto['leftExpression'] as ɵJsonObject, filterParser) as ɵBaseExpression,\n\t\t);\n\t}\n\n\tpublic clone(): ɵIsNullFilter {\n\t\treturn new ɵIsNullFilter(this.comparisonType, this.leftExpression);\n\t}\n}\n","/**\n * Type for Guid value.\n * @public\n */\nexport type ɵGuid = string;\n\n/**\n * Empty Guid constant.\n * @public\n */\nexport const ɵEMPTY_GUID = '00000000-0000-0000-0000-000000000000';\n\n/**\n * Regular expression for Guid validation.\n * @public\n */\nconst validator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');\n\n/**\n * Generates guid part.\n * @param length Part length.\n * @public\n */\nfunction generateGuidPart(length: number): string {\n\tlet out = '';\n\tfor (let i = 0; i < length; i++) {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tout += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n\t}\n\treturn out;\n}\n\n/**\n * Generates new Guid.\n * @public\n */\nexport function ɵgenerateGuid(): ɵGuid {\n\treturn [\n\t\tgenerateGuidPart(2),\n\t\tgenerateGuidPart(1),\n\t\tgenerateGuidPart(1),\n\t\tgenerateGuidPart(1),\n\t\tgenerateGuidPart(3),\n\t].join('-');\n}\n\n/**\n * Checks if value is Guid.\n * @param value Value for check.\n * @public\n */\nexport function ɵisGuid(value: unknown): boolean {\n\treturn Boolean(value) && validator.test(value as string);\n}\n\n/**\n * Checks if Guid is empty value or equal to EMPTY_GUID.\n * @param guid Guid for check.\n * @public\n */\nexport function ɵisEmptyGuid(guid: ɵGuid | undefined): boolean {\n\treturn !guid || guid === ɵEMPTY_GUID;\n}\n","/**\n * @public\n */\nexport class ɵNextHandlerAlreadySpecifiedException extends Error {\n\tconstructor() {\n\t\tsuper('Next handler already specified');\n\t}\n}\n","export class ɵArgumentEmptyException extends Error {\n\t// region Constructors: Public\n\n\tconstructor(argumentName: string) {\n\t\tsuper(`Argument with name '${argumentName}' is empty.`);\n\t}\n\n\t// endregion\n}\n","export class ɵArgumentOutOfRangeException extends Error {\n\t// region Constructors: Public\n\n\tconstructor(argumentName: string) {\n\t\tsuper(`Argument with name '${argumentName}' is out of range.`);\n\t}\n\n\t// endregion\n}\n","export class ɵItemNotFoundException extends Error {\n\t// region Constructors: Public\n\n\tconstructor(key: string) {\n\t\tsuper(`Item with key '${key}' does not exist.`);\n\t}\n\n\t// endregion\n}\n","import { ɵArgumentEmptyException } from './argument-empty-exception';\nimport { ɵArgumentOutOfRangeException } from './argument-out-of-range-exception';\n\nexport class ɵValidationUtilities {\n\t// region Methods: Public\n\n\tpublic static checkArgumentEmpty<T>(\n\t\targumentName: string,\n\t\targumentValue: T | null | undefined,\n\t): asserts argumentValue is T {\n\t\tif (argumentValue === undefined || argumentValue === null) {\n\t\t\tthrow new ɵArgumentEmptyException(argumentName);\n\t\t}\n\t}\n\n\tpublic static checkArrayEmpty<T>(argumentName: string, argumentValue: ArrayLike<T>): void {\n\t\tɵValidationUtilities.checkArgumentEmpty(argumentName, argumentValue);\n\t\tif (argumentValue.length === 0) {\n\t\t\tthrow new ɵArgumentEmptyException(argumentName);\n\t\t}\n\t}\n\n\tpublic static checkStringIsNotEmpty(argumentName: string, argumentValue: string): string {\n\t\tthis.checkArgumentEmpty(argumentName, argumentValue);\n\t\tif (argumentValue === '') {\n\t\t\tthrow new ɵArgumentEmptyException(argumentName);\n\t\t}\n\t\treturn argumentValue;\n\t}\n\n\tpublic static checkArgumentOutOfRange(\n\t\targumentName: string,\n\t\targumentValue: number,\n\t\trange: { begin?: number; end?: number },\n\t): void {\n\t\tif (range.begin && argumentValue < range.begin) {\n\t\t\tthrow new ɵArgumentOutOfRangeException(argumentName);\n\t\t}\n\t\tif (range.end && argumentValue > range.end) {\n\t\t\tthrow new ɵArgumentOutOfRangeException(argumentName);\n\t\t}\n\t}\n\n\t// endregion\n}\n","import { Exclude, Expose } from 'class-transformer';\n\nimport { ɵBaseFilter } from './base-filter';\nimport { ɵBetweenFilter } from './between-filter';\nimport { ɵCompareFilter } from './compare-filter';\nimport { ɵExistsFilter } from './exists-filter';\nimport { ɵBaseFilterParser } from './filter-parser/base-filter-parser';\nimport { ɵInFilter } from './in-filter';\nimport { ɵIsNullFilter } from './isnull-filter';\nimport { ɵEntityColumnValue, ɵgenerateGuid, ɵGuid, ɵJsonObject } from '../../../../public/types';\nimport { ɵValidationUtilities } from '../../../exceptions';\nimport { ɵComparisonType } from '../enums/comparison-type.enum';\nimport { ɵFilterType } from '../enums/filter-type.enum';\nimport { ɵLogicalOperatorType } from '../enums/logical-operator-type.enum';\nimport { ɵColumnExpression } from '../expressions/columns/column-expression';\nimport { ɵParameterExpression } from '../expressions/parameters/parameter-expression';\n\nexport class ɵFilterGroup extends ɵBaseFilter {\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static readonly _instanceOfKey: string = 'devkit_FilterGroup';\n\n\t/**\n\t * @internal\n\t * @dontChange\n\t */\n\tprotected static get _instanceOfKeys(): string[] {\n\t\treturn [...ɵBaseFilter._instanceOfKeys, this._instanceOfKey];\n\t}\n\n\t@Exclude()\n\tpublic filters = new Map<ɵGuid, ɵBaseFilter>();\n\n\t@Expose()\n\tpublic get items(): { [key: string]: ɵBaseFilter } {\n\t\tconst result = {};\n\t\tthis.filters.forEach((filter, key) => {\n\t\t\tresult[key] = this.serializeItem(filter);\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic logicalOperation: ɵLogicalOperatorType;\n\n\tconstructor(logicalOperation = ɵLogicalOperatorType.And) {\n\t\tsuper(ɵFilterType.FilterGroup);\n\t\tthis.logicalOperation = logicalOperation;\n\t}\n\n\t/**\n\t * Parses filter group from json.\n\t * @public\n\t */\n\tpublic static fromJson<T extends typeof ɵBaseFilterParser>(dto: ɵJsonObject, filterParser: T): ɵFilterGroup {\n\t\tconst logicalOperation = dto['logicalOperation'] as ɵLogicalOperatorType;\n\t\tconst group = new ɵFilterGroup(logicalOperation || ɵLogicalOperatorType.And);\n\t\tObject.entries(dto['items'] as ɵJsonObject).forEach(([key, filterDTO]) => {\n\t\t\tgroup.add(filterParser.fromJson(filterDTO as ɵJsonObject) as ɵBaseFilter, key);\n\t\t});\n\t\treturn group;\n\t}\n\n\t/**\n\t * Returns filter item by index.\n\t * @param index Item index.\n\t * @returns Filter.\n\t */\n\tpublic getItemByIndex(index: number): ɵBaseFilter {\n\t\treturn this.items[Object.keys(this.items)[index]];\n\t}\n\n\t/**\n\t * Creates and adds compare filter by value.\n\t * @param comparisonType Comparison type.\n\t * @param columnPath Column path.\n\t * @param parameterValue Parameter value.\n\t * @param filterKey Filter key.\n\t */\n\tpublic addSchemaColumnFilterWithParameter(\n\t\tcomparisonType: ɵComparisonType,\n\t\tcolumnPath: string,\n\t\tparameterValue: ɵEntityColumnValue,\n\t\tfilterKey?: string,\n\t): void {\n\t\tconst leftExpression = new ɵColumnExpression({ columnPath });\n\t\tconst rightExpression = new ɵParameterExpression({ value: parameterValue });\n\t\tconst filter = new ɵCompareFilter(comparisonType, leftExpression, rightExpression);\n\t\tthis.add(filter, filterKey);\n\t}\n\n\t/**\n\t * Creates and adds in filter by values.\n\t * @param comparisonType Comparison type.\n\t * @param columnPath Column path.\n\t * @param parameterValues Parameter values.\n\t * @param filterKey Filter key.\n\t */\n\tpublic addSchemaColumnInFilterWithParameters(\n\t\tcomparisonType: ɵComparisonType,\n\t\tcolumnPath: string,\n\t\tparameterValues: ɵEntityColumnValue[],\n\t\tfilterKey?: string,\n\t): void {\n\t\tconst leftExpression = new ɵColumnExpression({ columnPath });\n\t\tconst expressions = parameterValues.map(\n\t\t\t(singleParameterValue) =>\n\t\t\t\tnew ɵParameterExpression({\n\t\t\t\t\tvalue: singleParameterValue,\n\t\t\t\t}),\n\t\t);\n\t\tconst filter = new ɵInFilter(comparisonType, leftExpression, expressions);\n\t\tthis.add(filter, filterKey);\n\t}\n\n\tpublic addSchemaColumnIsNullFilter(columnPath: string, filterKey?: string): void {\n\t\tconst leftExpression = new ɵColumnExpression({ columnPath });\n\t\tconst filter = new ɵIsNullFilter(ɵComparisonType.Is_null, leftExpression);\n\t\tthis.add(filter, filterKey);\n\t}\n\n\t/**\n\t * Creates and adds not null filter.\n\t * @param columnPath Column path.\n\t * @param filterKey Filter key.\n\t */\n\tpublic addSchemaColumnIsNotNullFilter(columnPath: string, filterKey?: string): void {\n\t\tconst leftExpression = new ɵColumnExpression({ columnPath });\n\t\tconst filter = new ɵIsNullFilter(ɵComparisonType.Is_not_null, leftExpression);\n\t\tthis.add(filter, filterKey);\n\t}\n\n\t/**\n\t * Creates and adds filter between less value and greater value.\n\t * @param columnPath Column path.\n\t * @param lessParamValue Less parameter value.\n\t * @param greaterParamValue Greater parameter value.\n\t * @param filterKey Filter key.\n\t */\n\tpublic addSchemaColumnBetweenFilterWithParameters(\n\t\tcolumnPath: string,\n\t\tlessParamValue: Date | number,\n\t\tgreaterParamValue: Date | number,\n\t\tfilterKey?: string,\n\t): void {\n\t\tconst leftExpression = new ɵColumnExpression({ columnPath });\n\t\tconst rightLessExpression = new ɵParameterExpression({ value: lessParamValue });\n\t\tconst rightGreaterExpression = new ɵParameterExpression({ value: greaterParamValue });\n\t\tconst filter = new ɵBetweenFilter(leftExpression, rightLessExpression, rightGreaterExpression);\n\t\tthis.add(filter, filterKey);\n\t}\n\n\tpublic addExistsFilter(columnPath: string, subFilters?: ɵFilterGroup, filterKey?: string): void {\n\t\tconst leftExpression = new ɵColumnExpression({ columnPath });\n\t\tconst filter = new ɵExistsFilter(leftExpression, <ɵFilterGroup>subFilters);\n\t\tthis.add(filter, filterKey);\n\t}\n\n\tpublic addNotExistsFilter(columnPath: string, subFilters?: ɵFilterGroup, filterKey?: string): void {\n\t\tconst leftExpression = new ɵColumnExpression({ columnPath });\n\t\tconst filter = new ɵExistsFilter(leftExpression, <ɵFilterGroup>subFilters, ɵComparisonType.Not_exists);\n\t\tthis.add(filter, filterKey);\n\t}\n\n\tpublic add(filter: ɵBaseFilter, filterKey?: string): void {\n\t\tɵValidationUtilities.checkArgumentEmpty('filter', filter);\n\t\tconst key = filterKey || ɵgenerateGuid();\n\t\tthis.filters.set(key, filter);\n\t}\n\n\tpublic clone(): ɵFilterGroup {\n\t\tconst filterGroup = new ɵFilterGroup(this.logicalOperation);\n\t\tthis.filters.forEach((filter, filterKey) => {\n\t\t\tfilterGroup.filters.set(filterKey, filter.clone());\n\t\t});\n\t\treturn filterGroup;\n\t}\n}\n","import { ɵJsonObject } from '../../../../types/json-data.type';\n\n/**\n * Filter parser interface\n * @public\n */\nexport class ɵBaseFilterParser {\n\tpublic static fromJson(dto: ɵJsonObject): unknown {\n\t\tthrow new Error('not implemented');\n\t}\n}\n","import { ɵFilterType } from '../../enums/filter-type.enum';\nimport { ɵBaseFilter } from '../base-filter';\nimport { ɵBetweenFilter } from '../between-filter';\nimport { ɵCompareFilter } from '../compare-filter';\nimport { ɵExistsFilter } from '../exists-filter';\nimport { ɵFilterGroup } from '../filter-group';\nimport { ɵInFilter } from '../in-filter';\nimport { ɵIsNullFilter } from '../isnull-filter';\n\n/**\n * Filter resolver.\n * @public\n */\nexport class ɵFilterResolver {\n\tpublic static resolve(filterType: ɵFilterType): typeof ɵBaseFilter {\n\t\tconst filterClass = {\n\t\t\t[ɵFilterType.Compare]: ɵCompareFilter,\n\t\t\t[ɵFilterType.FilterGroup]: ɵFilterGroup,\n\t\t\t[ɵFilterType.In]: ɵInFilter,\n\t\t\t[ɵFilterType.IsNull]: ɵIsNullFilter,\n\t\t\t[ɵFilterType.Exists]: ɵExistsFilter,\n\t\t\t[ɵFilterType.Between]: ɵBetweenFilter,\n\t\t};\n\t\treturn filterClass[filterType];\n\t}\n}\n","import { ɵBaseFilterParser } from './base-filter-parser';\nimport { ɵFilterResolver } from './filter-resolver';\nimport { ɵJsonObject } from '../../../../types';\nimport { ɵFilterType } from '../../enums';\nimport { ɵExpressionParser } from '../../expressions/expression-parser/expression-parser';\nimport { ɵBaseFilter } from '../base-filter';\n\n/**\n * Filter parser.\n * @public\n */\nexport class ɵFilterParser extends ɵBaseFilterParser {\n\tpublic static fromJson(dto: ɵJsonObject): ɵBaseFilter {\n\t\tconst filterType = dto['filterType'] as ɵFilterType;\n\t\treturn ɵFilterResolver.resolve(filterType).fromJson(dto, ɵFilterParser, ɵExpressionParser);\n\t}\n}\n","export const ɵDEFAULT_FILTER_PLAIN_OBJ: object = {\n\tisEnabled: true,\n\ttrimDateTimeParameterToDate: false,\n};\n\nexport function ɵgetFilterPlainObj(filterPlainObj?: object): object {\n\treturn {\n\t\t...ɵDEFAULT_FILTER_PLAIN_OBJ,\n\t\t...filterPlainObj,\n\t};\n}\n","import { ɵValidationUtilities } from '../../../../public/exceptions';\nimport { ɵOrderDirection } from '../enums';\nimport { ɵBaseExpression } from '../expressions';\n\nexport abstract class ɵBaseQueryColumn<TExpression extends ɵBaseExpression = ɵBaseExpression> {\n\tpublic orderDirection: ɵOrderDirection = ɵOrderDirection.None;\n\n\tpublic orderPosition = -1;\n\n\tpublic isVisible = true;\n\n\tpublic caption?: string;\n\n\tpublic readonly expression: TExpression;\n\n\tprotected constructor(expression: TExpression) {\n\t\tthis.expression = expression;\n\t}\n\n\t/**\n\t * Adds ordering options.\n\t * @param orderDirection Direction.\n\t * @param orderPosition Position.\n\t * @returns Self.\n\t */\n\tpublic withOrdering(orderDirection: ɵOrderDirection, orderPosition: number): this {\n\t\tɵValidationUtilities.checkArgumentEmpty('orderDirection', orderDirection);\n\t\tɵValidationUtilities.checkArgumentEmpty('orderPosition', orderPosition);\n\t\tɵValidationUtilities.checkArgumentOutOfRange('orderPosition', orderPosition, { begin: -1 });\n\t\tthis.orderDirection = orderDirection;\n\t\tthis.orderPosition = orderPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds options.\n\t * @param options Options.\n\t * @returns Self.\n\t */\n\tpublic withOptions(options: { isVisible?: boolean }): this {\n\t\tɵValidationUtilities.checkArgumentEmpty('options', options);\n\t\tthis.isVisible = options.isVisible ?? true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds caption.\n\t * @param caption Caption.\n\t * @returns Self.\n\t */\n\tpublic withCaption(caption: string): this {\n\t\tɵValidationUtilities.checkArgumentEmpty('caption', caption);\n\t\tthis.caption = caption;\n\t\treturn this;\n\t}\n}\n","import { ɵArithmeticOperation } from '../../enums';\nimport { ɵArithmeticExpression, ɵBaseExpression } from '../../expressions';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵArithmeticQueryColumn extends ɵBaseQueryColumn<ɵArithmeticExpression> {\n\t// region Constructors: Public\n\n\tconstructor(\n\t\tarithmeticOperation: ɵArithmeticOperation,\n\t\tleftArithmeticOperand: ɵBaseExpression,\n\t\trightArithmeticOperand: ɵBaseExpression,\n\t) {\n\t\tsuper(new ɵArithmeticExpression({ arithmeticOperation, leftArithmeticOperand, rightArithmeticOperand }));\n\t}\n\n\t// endregion\n}\n","import { ɵColumnExpression } from '../../expressions';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵEntityQueryColumn extends ɵBaseQueryColumn<ɵColumnExpression> {\n\t// region Constructors: Public\n\n\tconstructor(columnPath: string) {\n\t\tsuper(new ɵColumnExpression({ columnPath }));\n\t}\n\n\t// endregion\n}\n","import { ɵDataValueType } from '../../../../../public/enums';\nimport { ɵEntityColumnValue } from '../../../../../public/types';\nimport { ɵParameterExpression } from '../../expressions';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵParameterQueryColumn extends ɵBaseQueryColumn<ɵParameterExpression> {\n\t// region Constructors: Public\n\n\tconstructor(value: ɵEntityColumnValue, dataValueType?: ɵDataValueType) {\n\t\tsuper(new ɵParameterExpression({ value, dataValueType }));\n\t}\n\n\t// endregion\n}\n","import { ɵAggregationType } from '../../../../../public/enums';\nimport { ɵAggregationSubQueryExpression } from '../../expressions';\nimport { ɵFilterGroup } from '../../filters';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵAggregationSubQueryColumn extends ɵBaseQueryColumn<ɵAggregationSubQueryExpression> {\n\t// region Constructors: Public\n\n\tconstructor(\n\t\tcolumnPath: string,\n\t\taggregationType: ɵAggregationType,\n\t\tsubFilters?: ɵFilterGroup,\n\t\tsubOrderDirection?: number,\n\t\tsubOrderColumn?: string,\n\t) {\n\t\tsuper(\n\t\t\tnew ɵAggregationSubQueryExpression({\n\t\t\t\taggregationType,\n\t\t\t\tcolumnPath,\n\t\t\t\tsubFilters,\n\t\t\t\tsubOrderDirection,\n\t\t\t\tsubOrderColumn,\n\t\t\t}),\n\t\t);\n\t}\n\n\t// endregion\n}\n","import { ɵSubQueryExpression } from '../../expressions';\nimport { ɵFilterGroup } from '../../filters';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵSubQueryColumn extends ɵBaseQueryColumn<ɵSubQueryExpression> {\n\t// region Constructors: Public\n\n\tconstructor(columnPath: string, subFilters?: ɵFilterGroup) {\n\t\tsuper(new ɵSubQueryExpression({ columnPath, subFilters }));\n\t}\n\n\t// endregion\n}\n","import { ɵAggregationType } from '../../../../../public/enums';\nimport { ɵAggregationEvalType } from '../../enums';\nimport { ɵAggregationFunctionExpression, ɵBaseExpression } from '../../expressions';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵAggregationFunctionColumn extends ɵBaseQueryColumn<ɵAggregationFunctionExpression> {\n\t// region Constructors: Public\n\n\tconstructor(\n\t\taggregationType: ɵAggregationType,\n\t\taggregationEvalType: ɵAggregationEvalType,\n\t\tfunctionArgument: ɵBaseExpression,\n\t) {\n\t\tsuper(\n\t\t\tnew ɵAggregationFunctionExpression({\n\t\t\t\taggregationType,\n\t\t\t\taggregationEvalType,\n\t\t\t\tfunctionArgument,\n\t\t\t}),\n\t\t);\n\t}\n\n\t// endregion\n}\n","import { ɵDatePartType } from '../../enums';\nimport { ɵBaseExpression, ɵDatePartFunctionExpression } from '../../expressions';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵDatePartFunctionColumn extends ɵBaseQueryColumn<ɵDatePartFunctionExpression> {\n\t// region Constructors: Public\n\n\tconstructor(datePartType: ɵDatePartType, functionArgument: ɵBaseExpression) {\n\t\tsuper(\n\t\t\tnew ɵDatePartFunctionExpression({\n\t\t\t\tdatePartType,\n\t\t\t\tfunctionArgument,\n\t\t\t}),\n\t\t);\n\t}\n\n\t// endregion\n\n\t// region Properties: Public\n\n\tpublic get datePartType(): ɵDatePartType {\n\t\treturn this.expression?.datePartType;\n\t}\n\n\t// endregion\n}\n","import { ɵColumnExpression, ɵLengthFunctionExpression } from '../../expressions';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵLengthFunctionColumn extends ɵBaseQueryColumn<ɵLengthFunctionExpression> {\n\t// region Constructors: Public\n\n\tconstructor(functionArgument: ɵColumnExpression) {\n\t\tsuper(new ɵLengthFunctionExpression({ functionArgument }));\n\t}\n\n\t// endregion\n}\n","import { ɵQueryMacrosType } from '../../enums';\nimport { ɵMacrosFunctionExpression } from '../../expressions';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵMacrosFunctionColumn extends ɵBaseQueryColumn<ɵMacrosFunctionExpression> {\n\t// region Constructors: Public\n\n\tconstructor(macrosType: ɵQueryMacrosType) {\n\t\tsuper(new ɵMacrosFunctionExpression({ macrosType }));\n\t}\n\n\t// endregion\n}\n","import { ɵAggregationFunctionExpression, ɵWindowFunctionExpression } from '../../expressions';\nimport { ɵBaseQueryColumn } from '../base-query-column';\n\nexport class ɵWindowFunctionColumn extends ɵBaseQueryColumn<ɵWindowFunctionExpression> {\n\t// region Constructors: Public\n\n\tconstructor(functionArgument: ɵAggregationFunctionExpression) {\n\t\tsuper(new ɵWindowFunctionExpression({ functionArgument }));\n\t}\n\n\t// endregion\n}\n","import { ɵOrderDirection } from '../enums';\n\nexport const ɵDEFAULT_COLUMN_PLAIN_OBJ: object = {\n\tisVisible: true,\n\torderPosition: -1,\n\torderDirection: ɵOrderDirection.None,\n};\n\nexport function ɵgetColumnPlainObj(expressionPlainObj?: object): object {\n\treturn {\n\t\t...ɵDEFAULT_COLUMN_PLAIN_OBJ,\n\t\texpression: expressionPlainObj,\n\t};\n}\n","import { classToPlain } from 'class-transformer';\n\nimport { ɵQueryOperationType } from './query-operation-type';\nimport {ɵMetadataProvider} from '../metadata-provider/metadata-provider';\nimport {ɵValidationUtilities} from '../../../exceptions';\n\n/**\n * @public\n */\nexport abstract class ɵBaseQuery implements ɵMetadataProvider<Record<string, unknown>> {\n\t// region Constructors: Protected\n\n\tprotected constructor(public readonly operationType: ɵQueryOperationType, public readonly rootSchemaName: string) {\n\t\tɵValidationUtilities.checkArgumentEmpty('_operationType', operationType);\n\t\tɵValidationUtilities.checkArgumentEmpty('_rootSchemaName', rootSchemaName);\n\t}\n\n\t// endregion\n\n\t// region Methods: Public\n\n\tpublic getMetadata(): Record<string, unknown> {\n\t\treturn classToPlain(this, { exposeUnsetFields: false, excludePrefixes: ['_'] });\n\t}\n\n\t// endregion\n}\n","import { ɵBaseQuery } from './base-query';\nimport { ɵQueryOperationType } from './query-operation-type';\nimport { ɵFilterGroup } from '../filters/filter-group';\n\n/**\n * @public\n */\nexport abstract class ɵBaseFilterableQuery extends ɵBaseQuery {\n\tpublic readonly filters = new ɵFilterGroup();\n\n\tprotected constructor(operationType: ɵQueryOperationType, rootSchemaName: string) {\n\t\tsuper(operationType, rootSchemaName);\n\t}\n\n\tpublic clearFilters(): void {\n\t\tthis.filters.filters.clear();\n\t}\n\n\tpublic getMetadata(): Record<string, unknown> {\n\t\treturn {\n\t\t\t...super.getMetadata(),\n\t\t\tfilters: this.filters.toJson(),\n\t\t};\n\t}\n}\n","/**\n * @public\n */\nexport enum ɵQueryOperationType {\n\tSelect,\n\tInsert,\n\tUpdate,\n\tDelete,\n\t// Batch,\n\t// ListSelect,\n\t// FilteredSelect,\n\t// LookupSelect\n}\n","import { ɵBaseFilterableQuery } from './base-filterable-query';\nimport { ɵQueryOperationType } from './query-operation-type';\n\n/**\n * @public\n */\nexport class ɵDeleteQuery extends ɵBaseFilterableQuery {\n\t// region Constructors: Public\n\n\tconstructor(rootSchemaName: string) {\n\t\tsuper(ɵQueryOperationType.Delete, rootSchemaName);\n\t}\n\n\t// endregion\n}\n","import {classToPlain} from 'class-transformer';\n\nimport {ɵBaseFilterableQuery} from './base-filterable-query';\nimport {ɵQueryOperationType} from './query-operation-type';\nimport {ɵAggregationEvalType, ɵArithmeticOperation, ɵDatePartType, ɵExpressionType, ɵQueryMacrosType} from '../enums';\nimport {ɵAggregationType, ɵDataValueType} from '../../../enums';\nimport {\n\tɵAggregationFunctionColumn,\n\tɵAggregationSubQueryColumn,\n\tɵArithmeticQueryColumn,\n\tɵBaseQueryColumn, ɵDatePartFunctionColumn,\n\tɵEntityQueryColumn, ɵLengthFunctionColumn, ɵMacrosFunctionColumn,\n\tɵParameterQueryColumn, ɵWindowFunctionColumn\n} from '../columns';\nimport {ɵItemNotFoundException, ɵValidationUtilities} from '../../../exceptions';\nimport {ɵDataSourceAggregationConfig, ɵDataSourceInstanceConfig} from '../../../services';\nimport {ɵEntityColumnValue} from '../../../types';\nimport {ɵAggregationFunctionExpression, ɵBaseExpression, ɵColumnExpression} from '../expressions';\n\n\nexport interface ɵConditionalValueItem {\n\texpressionType: ɵExpressionType;\n\tparameter: {\n\t\tdataValueType: ɵDataValueType;\n\t\tvalue: string;\n\t};\n}\n\n/**\n * @public\n */\nexport class ɵEntitySchemaQuery extends ɵBaseFilterableQuery {\n\tprivate _columns = new Map<string, ɵBaseQueryColumn>();\n\n\tpublic isDistinct = false;\n\n\t/**\n\t * Number of rows to select.\n\t */\n\tpublic rowCount = -1;\n\n\t/**\n\t * Rows count to skip.\n\t */\n\tpublic rowsOffset = -1;\n\n\t/**\n\t * Query conditional values\n\t */\n\tpublic conditionalValues?: null | { items: unknown };\n\n\tpublic useLocalization = true;\n\n\tpublic useRecordDeactivation = false;\n\n\tconstructor(rootSchemaName: string) {\n\t\tsuper(ɵQueryOperationType.Select, rootSchemaName);\n\t}\n\n\tprivate _internalAddColumn(key: string, column: ɵBaseQueryColumn): void {\n\t\tif (!this._columns.has(key)) {\n\t\t\tthis._columns.set(key, column);\n\t\t}\n\t}\n\n\tprivate _getIsPageable = (): boolean => this.rowCount > 0 && this.rowsOffset > -1;\n\n\t// endregion\n\n\t// region Methods: Public\n\n\t/**\n\t * Returns column instance by column alias.\n\t * @param columnAlias Column alias.\n\t * @returns [BaseQueryColumn] Column instance.\n\t */\n\tpublic getColumn(columnAlias: string): ɵBaseQueryColumn {\n\t\tif (!this._columns.has(columnAlias)) {\n\t\t\tthrow new ɵItemNotFoundException(columnAlias);\n\t\t}\n\t\treturn this.findColumn(columnAlias);\n\t}\n\n\t/**\n\t * Returns column instance by column alias if not found returns null.\n\t */\n\tpublic findColumn(columnAlias: string): ɵBaseQueryColumn {\n\t\treturn this._columns.get(columnAlias) as ɵBaseQueryColumn;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getMetadata(): Record<string, unknown> {\n\t\treturn {\n\t\t\t...super.getMetadata(),\n\t\t\tcolumns: {\n\t\t\t\titems: classToPlain(this._columns, {exposeUnsetFields: false, excludePrefixes: ['_']}),\n\t\t\t},\n\t\t\tallColumns: false,\n\t\t\tisDistinct: this.isDistinct,\n\t\t\tignoreDisplayValues: false,\n\t\t\trowCount: this.rowCount,\n\t\t\trowsOffset: this.rowsOffset,\n\t\t\tisPageable: this._getIsPageable(),\n\t\t\tconditionalValues: this.conditionalValues ? this.conditionalValues : null,\n\t\t\tisHierarchical: false,\n\t\t\thierarchicalMaxDepth: 0,\n\t\t\thierarchicalColumnName: null,\n\t\t\thierarchicalColumnValue: null,\n\t\t\tuseLocalization: this.useLocalization,\n\t\t\tuseRecordDeactivation: this.useRecordDeactivation,\n\t\t};\n\t}\n\n\t/**\n\t * Add column.\n\t * @param column Column path.\n\t * @param columnAlias Column alias.\n\t * @returns [BaseQueryColumn] Column instance.\n\t */\n\tpublic addColumn(column: ɵBaseQueryColumn, columnAlias: string): ɵBaseQueryColumn {\n\t\tthis._internalAddColumn(columnAlias, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add column by column path.\n\t * @param columnPath Column path.\n\t * @param columnAlias Column alias.\n\t * @returns [EntityQueryColumn] Column instance.\n\t */\n\tpublic addSchemaColumn(columnPath: string, columnAlias?: string): ɵEntityQueryColumn {\n\t\tɵValidationUtilities.checkArgumentEmpty('columnPath', columnPath);\n\t\tconst column = new ɵEntityQueryColumn(columnPath);\n\t\tthis._internalAddColumn(columnAlias || columnPath, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add aggregation sub query column.\n\t * @param columnPath Column path.\n\t * @param aggregationType Aggregation type.\n\t * @param subFilters Sub query filters.\n\t * @param columnAlias Column alias.\n\t * @returns [AggregationSubQueryColumn] Column instance.\n\t */\n\tpublic addAggregationSubQueryColumn(\n\t\tcolumnPath: string,\n\t\taggregationType: ɵAggregationType,\n\t\taggregationConfig: ɵDataSourceAggregationConfig,\n\t\tcolumnAlias?: string,\n\t): ɵAggregationSubQueryColumn {\n\t\tconst column = new ɵAggregationSubQueryColumn(\n\t\t\tcolumnPath,\n\t\t\taggregationType,\n\t\t\taggregationConfig.filter,\n\t\t\taggregationConfig.sortByDirection,\n\t\t\taggregationConfig.sortByColumn,\n\t\t);\n\t\tthis._internalAddColumn(columnAlias || columnPath, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add parameter column.\n\t * @param value Parameter value.\n\t * @param dataValueType Parameter data value type.\n\t * @param columnAlias Column alias.\n\t * @returns [ParameterQueryColumn] Column instance.\n\t */\n\tpublic addParameterColumn(\n\t\tvalue: ɵEntityColumnValue,\n\t\tdataValueType: ɵDataValueType,\n\t\tcolumnAlias: string,\n\t): ɵParameterQueryColumn {\n\t\tconst column = new ɵParameterQueryColumn(value, dataValueType);\n\t\tthis._internalAddColumn(columnAlias, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add arithmetic column.\n\t * @param arithmeticOperation Arithmetic operation.\n\t * @param leftArithmeticOperand Left arithmetic operand expression.\n\t * @param rightArithmeticOperand Right arithmetic operand expression.\n\t * @param columnAlias Column alias.\n\t * @returns [ArithmeticQueryColumn] Column instance.\n\t */\n\tpublic addArithmeticColumn(\n\t\tarithmeticOperation: ɵArithmeticOperation,\n\t\tleftArithmeticOperand: ɵBaseExpression,\n\t\trightArithmeticOperand: ɵBaseExpression,\n\t\tcolumnAlias: string,\n\t): ɵArithmeticQueryColumn {\n\t\tconst column = new ɵArithmeticQueryColumn(arithmeticOperation, leftArithmeticOperand, rightArithmeticOperand);\n\t\tthis._internalAddColumn(columnAlias, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add macros function column.\n\t * @param queryMacrosType Macros type.\n\t * @param columnAlias Column alias.\n\t * @returns [MacrosFunctionColumn] Column instance.\n\t */\n\tpublic addMacrosFunctionColumn(queryMacrosType: ɵQueryMacrosType, columnAlias: string): ɵMacrosFunctionColumn {\n\t\tconst column = new ɵMacrosFunctionColumn(queryMacrosType);\n\t\tthis._internalAddColumn(columnAlias, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add date part function column.\n\t * @param columnPath Column path.\n\t * @param datePartType Date part type.\n\t * @param columnAlias Column alias.\n\t * @returns [DatePartFunctionColumn] Column instance.\n\t */\n\tpublic addDatePartFunctionColumn(\n\t\tcolumnPath: string,\n\t\tdatePartType: ɵDatePartType,\n\t\tcolumnAlias: string,\n\t): ɵDatePartFunctionColumn {\n\t\tconst functionArgument = new ɵColumnExpression({columnPath});\n\t\tconst column = new ɵDatePartFunctionColumn(datePartType, functionArgument);\n\t\tthis._internalAddColumn(columnAlias, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add aggregation function column.\n\t * @param columnPath Column path.\n\t * @param aggregationType Aggregation type.\n\t * @param columnAlias Column alias.\n\t * @param aggregationEvalType Aggregation eval type.\n\t * @returns [AggregationFunctionColumn] Column instance.\n\t */\n\tpublic addAggregationFunctionColumn(\n\t\tcolumnPath: string,\n\t\taggregationType: ɵAggregationType,\n\t\tcolumnAlias: string,\n\t\taggregationEvalType: ɵAggregationEvalType = ɵAggregationEvalType.None,\n\t): ɵAggregationFunctionColumn {\n\t\tconst functionArgument = new ɵColumnExpression({columnPath});\n\t\tconst column = new ɵAggregationFunctionColumn(aggregationType, aggregationEvalType, functionArgument);\n\t\tthis._internalAddColumn(columnAlias, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add length function column.\n\t * @param columnPath Column path.\n\t * @param columnAlias Column alias.\n\t * @returns [LengthFunctionColumn] Column instance.\n\t */\n\tpublic addLengthFunctionColumn(columnPath: string, columnAlias: string): ɵLengthFunctionColumn {\n\t\tconst functionArgument = new ɵColumnExpression({columnPath});\n\t\tconst column = new ɵLengthFunctionColumn(functionArgument);\n\t\tthis._internalAddColumn(columnAlias, column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * Add window function column.\n\t * @param columnPath Column path.\n\t * @param aggregationType Aggregation type.\n\t * @param columnAlias Column alias.\n\t * @param aggregationEvalType Aggregation eval type.\n\t * @returns [WindowFunctionColumn] Column instance.\n\t */\n\tpublic addWindowFunctionColumn(\n\t\tcolumnPath: string,\n\t\taggregationType: ɵAggregationType,\n\t\tcolumnAlias: string,\n\t\taggregationEvalType: ɵAggregationEvalType = ɵAggregationEvalType.None,\n\t): ɵWindowFunctionColumn {\n\t\tconst functionArgument = new ɵAggregationFunctionExpression({\n\t\t\taggregationType,\n\t\t\taggregationEvalType,\n\t\t\tfunctionArgument: new ɵColumnExpression({columnPath}),\n\t\t});\n\t\tconst column = new ɵWindowFunctionColumn(functionArgument);\n\t\tthis._internalAddColumn(columnAlias, column);\n\t\treturn column;\n\t}\n}\n","import {classToPlain, Expose} from 'class-transformer';\n\nimport {ɵBaseQuery} from './base-query';\nimport {ɵQueryOperationType} from './query-operation-type';\nimport {ɵParameterExpression} from '../expressions';\nimport {ɵEntityColumnValue} from '../../../types';\nimport {ɵDataValueType} from '../../../enums';\nimport {ɵValidationUtilities} from '../../../exceptions';\n\n/**\n * @public\n */\nexport class ɵInsertQuery extends ɵBaseQuery {\n\t// region Fields: Private\n\n\tprivate _columnValues = new Map<string, ɵParameterExpression>();\n\n\t// endregion\n\n\t// region Constructors: Public\n\n\tconstructor(rootSchemaName: string) {\n\t\tsuper(ɵQueryOperationType.Insert, rootSchemaName);\n\t}\n\n\t// endregion\n\n\t// region Properties: Public\n\n\t@Expose()\n\tpublic get columnValues(): { items: { [key: string]: ɵParameterExpression } } {\n\t\treturn {\n\t\t\titems: classToPlain(this._columnValues),\n\t\t};\n\t}\n\n\t// endregion\n\n\t// region Methods: Public\n\n\tpublic addColumn(columnName: string, columnValue: ɵEntityColumnValue, dataValueType: ɵDataValueType): void {\n\t\tɵValidationUtilities.checkArgumentEmpty('columnName', columnName);\n\t\tthis._columnValues.set(columnName, new ɵParameterExpression({value: columnValue, dataValueType}));\n\t}\n\n\t// endregion\n}\n","import {classToPlain, Expose} from 'class-transformer';\n\nimport {ɵBaseFilterableQuery} from './base-filterable-query';\nimport {ɵQueryOperationType} from './query-operation-type';\nimport {ɵParameterExpression} from '../expressions';\nimport {ɵEntityColumnValue} from '../../../types';\nimport {ɵDataValueType} from '../../../enums';\nimport {ɵValidationUtilities} from '../../../exceptions';\n\n/**\n * @public\n */\nexport class ɵUpdateQuery extends ɵBaseFilterableQuery {\n\t// region Fields: Private\n\n\tprivate _columnValues = new Map<string, ɵParameterExpression>();\n\n\t// endregion\n\n\t// region Fields: Public\n\n\t/**\n\t * Flag that indicates whether to force save data.\n\t */\n\tpublic isForceUpdate = false;\n\n\t// endregion\n\n\t// region Constructors: Public\n\n\tconstructor(rootSchemaName: string) {\n\t\tsuper(ɵQueryOperationType.Update, rootSchemaName);\n\t}\n\n\t// endregion\n\n\t// region Properties: Public\n\n\t@Expose()\n\tpublic get columnValues(): { items: { [key: string]: ɵParameterExpression } } {\n\t\treturn {\n\t\t\titems: classToPlain(this._columnValues),\n\t\t};\n\t}\n\n\t// endregion\n\n\t// region Methods: Public\n\n\tpublic addColumn(columnName: string, columnValue: ɵEntityColumnValue, dataValueType: ɵDataValueType): void {\n\t\tɵValidationUtilities.checkArgumentEmpty('columnName', columnName);\n\t\tthis._columnValues.set(columnName, new ɵParameterExpression({value: columnValue, dataValueType}));\n\t}\n\n\t// endregion\n}\n","import { ɵEntitySchemaQuery } from './entity-schema-query';\n\n/**\n * @public\n */\nexport class ɵSelectLocalizationQuery extends ɵEntitySchemaQuery {}\n","import { ɵViewModelContext } from '../view-model-context';\n\n/**\n * @public\n * @class ɵBaseRequest\n * @describe Base definition of request.\n * @template TEvent\n */\nexport class ɵBaseRequest<TEvent = unknown> {\n\t/**\n\t * The type of request.\n\t * @example\n\t * 'crt.RequestType'\n\t */\n\tpublic readonly type!: string;\n\n\t/**\n\t * @deprecated use event binding expression instead.\n\t *\n\t * The target event from which this request originated.\n\t */\n\tpublic readonly $initialEvent?: TEvent;\n\n\t/**\n\t * The context in which the requests were triggered.\n\t */\n\tpublic readonly $context!: ɵViewModelContext;\n\n\t/**\n\t * The scope of the request.\n\t */\n\tpublic scopes?: string[];\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * @public\n * @description Interface describes view model context.\n * Could contain any pair of key-value\n */\nexport interface ɵViewModelContext {\n\t[key: string]: any; // TODO RND-26026\n}\n","import { ɵComparisonType } from '../../../public/esq';\n\n/**\n * @public\n */\nexport enum ɵModelParameterType {\n\tPrimaryColumnValue = 'primaryColumnValue',\n\tFilter = 'filter',\n\tPrimaryDisplayValueFilter = 'primaryDisplayValueFilter',\n\tEmpty = 'empty',\n\tNever = 'never',\n}\n\n/**\n * @public\n */\nexport interface ɵBaseDataSourceParameter {\n\ttype: ɵModelParameterType;\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tvalue: any;\n\trelationsConfigs?: ɵDataSourceParameterRelationConfig[];\n}\n\n/**\n * @public\n */\nexport interface ɵPrimaryDisplayFilterDataSourceParameter extends ɵBaseDataSourceParameter {\n\ttype: ɵModelParameterType.PrimaryDisplayValueFilter;\n\tvalue: string;\n\tcomparisonType: ɵComparisonType;\n}\n\n/**\n * @public\n */\nexport interface ɵDataSourceParameterRelationConfig {\n\tdataSchemaName: string;\n\tattributePath: string;\n\trelationPath: string;\n\t/**\n\t * @public\n\t */\n\tuseAttributeValue?: boolean;\n\t/**\n\t * @public\n\t */\n\tvalue?: unknown;\n}\n\n/**\n * @public\n */\nexport type ɵDataSourceParameter = ɵBaseDataSourceParameter | ɵPrimaryDisplayFilterDataSourceParameter;\n\n/**\n * @public\n */\nexport type ɵDataSourceParameters = ɵDataSourceParameter[];\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["this"],"mappings":"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"}