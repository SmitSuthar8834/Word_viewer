import { ɵExpressionType } from '../../enums';
import { ɵBaseExpression } from '../base-expression';
export class ɵArithmeticExpression extends ɵBaseExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];
    }
    constructor(config) {
        super(config);
        this.expressionType = ɵExpressionType.ArithmeticOperation;
        this.arithmeticOperation = config?.arithmeticOperation;
        this.leftArithmeticOperand = config?.leftArithmeticOperand.clone();
        this.rightArithmeticOperand = config?.rightArithmeticOperand.clone();
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        const leftArithmeticOperand = expressionParser?.fromJson(dto['leftArithmeticOperand'], filterParser);
        const rightArithmeticOperand = expressionParser?.fromJson(dto['rightArithmeticOperand'], filterParser);
        const config = {
            leftArithmeticOperand,
            rightArithmeticOperand,
            arithmeticOperation: dto['arithmeticOperation'],
            isBlock: dto['isBlock'],
        };
        return new ɵArithmeticExpression(config);
    }
    clone() {
        return new ɵArithmeticExpression(this);
    }
}
/**
 * @internal
 * @dontChange
 */
ɵArithmeticExpression._instanceOfKey = 'devkit_ArithmeticExpression';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpdGhtZXRpYy1leHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvYmFzZS9zcmMvbGliL3B1YmxpYy9lc3EvZGF0YS1tb2RlbC9leHByZXNzaW9ucy9hcml0aG1ldGljL2FyaXRobWV0aWMtZXhwcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQXdCLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwRSxPQUFPLEVBQUUsZUFBZSxFQUFxQixNQUFNLG9CQUFvQixDQUFDO0FBTXhFLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxlQUFlO0lBT3pEOzs7T0FHRztJQUNPLE1BQU0sS0FBSyxlQUFlO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLGVBQWUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFVRCxZQUFZLE1BQW1DO1FBQzlDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQVRDLG1CQUFjLEdBQW9CLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQztRQVVyRixJQUFJLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxFQUFFLG1CQUFtQixDQUFDO1FBQ3ZELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLEVBQUUscUJBQXFCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbkUsSUFBSSxDQUFDLHNCQUFzQixHQUFHLE1BQU0sRUFBRSxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FHcEIsR0FBZ0IsRUFBRSxZQUEyQixFQUFFLGdCQUFvQztRQUNwRixNQUFNLHFCQUFxQixHQUFHLGdCQUFnQixFQUFFLFFBQVEsQ0FDdkQsR0FBRyxDQUFDLHVCQUF1QixDQUFnQixFQUMzQyxZQUFZLENBQ08sQ0FBQztRQUNyQixNQUFNLHNCQUFzQixHQUFHLGdCQUFnQixFQUFFLFFBQVEsQ0FDeEQsR0FBRyxDQUFDLHdCQUF3QixDQUFnQixFQUM1QyxZQUFZLENBQ08sQ0FBQztRQUNyQixNQUFNLE1BQU0sR0FBZ0M7WUFDM0MscUJBQXFCO1lBQ3JCLHNCQUFzQjtZQUN0QixtQkFBbUIsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQXlCO1lBQ3ZFLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFZO1NBQ2xDLENBQUM7UUFDRixPQUFPLElBQUkscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLEtBQUs7UUFDWCxPQUFPLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7QUF4REQ7OztHQUdHO0FBQ3VCLG9DQUFjLEdBQVcsNkJBQTZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyDJtUpzb25PYmplY3QgfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcy9qc29uLWRhdGEudHlwZSc7XG5pbXBvcnQgeyDJtUFyaXRobWV0aWNPcGVyYXRpb24sIMm1RXhwcmVzc2lvblR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcyc7XG5pbXBvcnQgeyDJtUJhc2VGaWx0ZXJQYXJzZXIgfSBmcm9tICcuLi8uLi9maWx0ZXJzL2ZpbHRlci1wYXJzZXIvYmFzZS1maWx0ZXItcGFyc2VyJztcbmltcG9ydCB7IMm1QmFzZUV4cHJlc3Npb24sIMm1RXhwcmVzc2lvbkNvbmZpZyB9IGZyb20gJy4uL2Jhc2UtZXhwcmVzc2lvbic7XG5pbXBvcnQgeyDJtUJhc2VFeHByZXNzaW9uUGFyc2VyIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi1wYXJzZXIvYmFzZS1leHByZXNzaW9uLXBhcnNlcic7XG5cbmV4cG9ydCB0eXBlIMm1QXJpdGhtZXRpY0V4cHJlc3Npb25Db25maWcgPSDJtUV4cHJlc3Npb25Db25maWc8ybVBcml0aG1ldGljRXhwcmVzc2lvbj4gJlxuXHRQaWNrPMm1QXJpdGhtZXRpY0V4cHJlc3Npb24sICdhcml0aG1ldGljT3BlcmF0aW9uJyB8ICdsZWZ0QXJpdGhtZXRpY09wZXJhbmQnIHwgJ3JpZ2h0QXJpdGhtZXRpY09wZXJhbmQnPjtcblxuZXhwb3J0IGNsYXNzIMm1QXJpdGhtZXRpY0V4cHJlc3Npb24gZXh0ZW5kcyDJtUJhc2VFeHByZXNzaW9uIHtcblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfaW5zdGFuY2VPZktleTogc3RyaW5nID0gJ2RldmtpdF9Bcml0aG1ldGljRXhwcmVzc2lvbic7XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyBnZXQgX2luc3RhbmNlT2ZLZXlzKCk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gWy4uLsm1QmFzZUV4cHJlc3Npb24uX2luc3RhbmNlT2ZLZXlzLCB0aGlzLl9pbnN0YW5jZU9mS2V5XTtcblx0fVxuXG5cdHB1YmxpYyByZWFkb25seSBleHByZXNzaW9uVHlwZTogybVFeHByZXNzaW9uVHlwZSA9IMm1RXhwcmVzc2lvblR5cGUuQXJpdGhtZXRpY09wZXJhdGlvbjtcblxuXHRwdWJsaWMgcmVhZG9ubHkgYXJpdGhtZXRpY09wZXJhdGlvbjogybVBcml0aG1ldGljT3BlcmF0aW9uO1xuXG5cdHB1YmxpYyByZWFkb25seSBsZWZ0QXJpdGhtZXRpY09wZXJhbmQ6IMm1QmFzZUV4cHJlc3Npb247XG5cblx0cHVibGljIHJlYWRvbmx5IHJpZ2h0QXJpdGhtZXRpY09wZXJhbmQ6IMm1QmFzZUV4cHJlc3Npb247XG5cblx0Y29uc3RydWN0b3IoY29uZmlnOiDJtUFyaXRobWV0aWNFeHByZXNzaW9uQ29uZmlnKSB7XG5cdFx0c3VwZXIoY29uZmlnKTtcblx0XHR0aGlzLmFyaXRobWV0aWNPcGVyYXRpb24gPSBjb25maWc/LmFyaXRobWV0aWNPcGVyYXRpb247XG5cdFx0dGhpcy5sZWZ0QXJpdGhtZXRpY09wZXJhbmQgPSBjb25maWc/LmxlZnRBcml0aG1ldGljT3BlcmFuZC5jbG9uZSgpO1xuXHRcdHRoaXMucmlnaHRBcml0aG1ldGljT3BlcmFuZCA9IGNvbmZpZz8ucmlnaHRBcml0aG1ldGljT3BlcmFuZC5jbG9uZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyBleHByZXNzaW9uIGZyb20ganNvbi5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0cHVibGljIHN0YXRpYyBmcm9tSnNvbjxcblx0XHRURmlsdGVyUGFyc2VyIGV4dGVuZHMgdHlwZW9mIMm1QmFzZUZpbHRlclBhcnNlcixcblx0XHRURXhwcmVzc2lvblBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VFeHByZXNzaW9uUGFyc2VyLFxuXHQ+KGR0bzogybVKc29uT2JqZWN0LCBmaWx0ZXJQYXJzZXI6IFRGaWx0ZXJQYXJzZXIsIGV4cHJlc3Npb25QYXJzZXI/OiBURXhwcmVzc2lvblBhcnNlcik6IMm1QXJpdGhtZXRpY0V4cHJlc3Npb24ge1xuXHRcdGNvbnN0IGxlZnRBcml0aG1ldGljT3BlcmFuZCA9IGV4cHJlc3Npb25QYXJzZXI/LmZyb21Kc29uKFxuXHRcdFx0ZHRvWydsZWZ0QXJpdGhtZXRpY09wZXJhbmQnXSBhcyDJtUpzb25PYmplY3QsXG5cdFx0XHRmaWx0ZXJQYXJzZXIsXG5cdFx0KSBhcyDJtUJhc2VFeHByZXNzaW9uO1xuXHRcdGNvbnN0IHJpZ2h0QXJpdGhtZXRpY09wZXJhbmQgPSBleHByZXNzaW9uUGFyc2VyPy5mcm9tSnNvbihcblx0XHRcdGR0b1sncmlnaHRBcml0aG1ldGljT3BlcmFuZCddIGFzIMm1SnNvbk9iamVjdCxcblx0XHRcdGZpbHRlclBhcnNlcixcblx0XHQpIGFzIMm1QmFzZUV4cHJlc3Npb247XG5cdFx0Y29uc3QgY29uZmlnOiDJtUFyaXRobWV0aWNFeHByZXNzaW9uQ29uZmlnID0ge1xuXHRcdFx0bGVmdEFyaXRobWV0aWNPcGVyYW5kLFxuXHRcdFx0cmlnaHRBcml0aG1ldGljT3BlcmFuZCxcblx0XHRcdGFyaXRobWV0aWNPcGVyYXRpb246IGR0b1snYXJpdGhtZXRpY09wZXJhdGlvbiddIGFzIMm1QXJpdGhtZXRpY09wZXJhdGlvbixcblx0XHRcdGlzQmxvY2s6IGR0b1snaXNCbG9jayddIGFzIGJvb2xlYW4sXG5cdFx0fTtcblx0XHRyZXR1cm4gbmV3IMm1QXJpdGhtZXRpY0V4cHJlc3Npb24oY29uZmlnKTtcblx0fVxuXG5cdHB1YmxpYyBjbG9uZSgpOiDJtUFyaXRobWV0aWNFeHByZXNzaW9uIHtcblx0XHRyZXR1cm4gbmV3IMm1QXJpdGhtZXRpY0V4cHJlc3Npb24odGhpcyk7XG5cdH1cbn1cbiJdfQ==