import { ɵArgumentFunctionExpression } from './argument-function-expression';
import { ɵFunctionType } from '../../enums';
export class ɵAggregationFunctionExpression extends ɵArgumentFunctionExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵArgumentFunctionExpression._instanceOfKeys, this._instanceOfKey];
    }
    constructor(config) {
        super(config);
        this.functionType = ɵFunctionType.Aggregation;
        this.aggregationType = config?.aggregationType;
        this.aggregationEvalType = config?.aggregationEvalType;
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        const functionArgument = expressionParser?.fromJson(dto['functionArgument'], filterParser);
        const aggregationType = dto['aggregationType'];
        const aggregationEvalType = dto['aggregationEvalType'];
        return new ɵAggregationFunctionExpression({
            functionArgument,
            aggregationType,
            aggregationEvalType,
            isBlock: dto['isBlock'],
        });
    }
    clone() {
        return new ɵAggregationFunctionExpression(this);
    }
}
/**
 * @internal
 * @dontChange
 */
ɵAggregationFunctionExpression._instanceOfKey = 'devkit_AggregationFunctionExpression';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRpb24tZnVuY3Rpb24tZXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvZGV2a2l0L2Jhc2Uvc3JjL2xpYi9wdWJsaWMvZXNxL2RhdGEtbW9kZWwvZXhwcmVzc2lvbnMvZnVuY3Rpb25zL2FnZ3JlZ2F0aW9uLWZ1bmN0aW9uLWV4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDJCQUEyQixFQUFxQyxNQUFNLGdDQUFnQyxDQUFDO0FBR2hILE9BQU8sRUFBd0IsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBUWxFLE1BQU0sT0FBTyw4QkFBK0IsU0FBUSwyQkFBMkI7SUFPOUU7OztPQUdHO0lBQ08sTUFBTSxLQUFLLGVBQWU7UUFDbkMsT0FBTyxDQUFDLEdBQUcsMkJBQTJCLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBUUQsWUFBWSxNQUE0QztRQUN2RCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFQQyxpQkFBWSxHQUFrQixhQUFhLENBQUMsV0FBVyxDQUFDO1FBUXZFLElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxFQUFFLGVBQWUsQ0FBQztRQUMvQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxFQUFFLG1CQUFtQixDQUFDO0lBQ3hELENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUlyQixHQUFnQixFQUNoQixZQUEyQixFQUMzQixnQkFBb0M7UUFFcEMsTUFBTSxnQkFBZ0IsR0FBRyxnQkFBZ0IsRUFBRSxRQUFRLENBQ2xELEdBQUcsQ0FBQyxrQkFBa0IsQ0FBZ0IsRUFDdEMsWUFBWSxDQUNPLENBQUM7UUFDckIsTUFBTSxlQUFlLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixDQUFxQixDQUFDO1FBQ25FLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxDQUFDLHFCQUFxQixDQUF5QixDQUFDO1FBQy9FLE9BQU8sSUFBSSw4QkFBOEIsQ0FBQztZQUN6QyxnQkFBZ0I7WUFDaEIsZUFBZTtZQUNmLG1CQUFtQjtZQUNuQixPQUFPLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBWTtTQUNsQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSztRQUNYLE9BQU8sSUFBSSw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDOztBQXRERDs7O0dBR0c7QUFDdUIsNkNBQWMsR0FBVyxzQ0FBc0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1QXJndW1lbnRGdW5jdGlvbkV4cHJlc3Npb24sIMm1QXJndW1lbnRGdW5jdGlvbkV4cHJlc3Npb25Db25maWcgfSBmcm9tICcuL2FyZ3VtZW50LWZ1bmN0aW9uLWV4cHJlc3Npb24nO1xuaW1wb3J0IHsgybVBZ2dyZWdhdGlvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9wdWJsaWMvZW51bXMnO1xuaW1wb3J0IHsgybVKc29uT2JqZWN0IH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvanNvbi1kYXRhLnR5cGUnO1xuaW1wb3J0IHsgybVBZ2dyZWdhdGlvbkV2YWxUeXBlLCDJtUZ1bmN0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zJztcbmltcG9ydCB7IMm1QmFzZUZpbHRlclBhcnNlciB9IGZyb20gJy4uLy4uL2ZpbHRlcnMvZmlsdGVyLXBhcnNlci9iYXNlLWZpbHRlci1wYXJzZXInO1xuaW1wb3J0IHsgybVCYXNlRXhwcmVzc2lvbiB9IGZyb20gJy4uL2Jhc2UtZXhwcmVzc2lvbic7XG5pbXBvcnQgeyDJtUJhc2VFeHByZXNzaW9uUGFyc2VyIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi1wYXJzZXIvYmFzZS1leHByZXNzaW9uLXBhcnNlcic7XG5cbmV4cG9ydCB0eXBlIMm1QWdncmVnYXRpb25GdW5jdGlvbkV4cHJlc3Npb25Db25maWcgPSDJtUFyZ3VtZW50RnVuY3Rpb25FeHByZXNzaW9uQ29uZmlnPMm1QWdncmVnYXRpb25GdW5jdGlvbkV4cHJlc3Npb24+ICZcblx0UGljazzJtUFnZ3JlZ2F0aW9uRnVuY3Rpb25FeHByZXNzaW9uLCAnYWdncmVnYXRpb25UeXBlJyB8ICdhZ2dyZWdhdGlvbkV2YWxUeXBlJz47XG5cbmV4cG9ydCBjbGFzcyDJtUFnZ3JlZ2F0aW9uRnVuY3Rpb25FeHByZXNzaW9uIGV4dGVuZHMgybVBcmd1bWVudEZ1bmN0aW9uRXhwcmVzc2lvbiB7XG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQGRvbnRDaGFuZ2Vcblx0ICovXG5cdHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2luc3RhbmNlT2ZLZXk6IHN0cmluZyA9ICdkZXZraXRfQWdncmVnYXRpb25GdW5jdGlvbkV4cHJlc3Npb24nO1xuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQGRvbnRDaGFuZ2Vcblx0ICovXG5cdHByb3RlY3RlZCBzdGF0aWMgZ2V0IF9pbnN0YW5jZU9mS2V5cygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIFsuLi7JtUFyZ3VtZW50RnVuY3Rpb25FeHByZXNzaW9uLl9pbnN0YW5jZU9mS2V5cywgdGhpcy5faW5zdGFuY2VPZktleV07XG5cdH1cblxuXHRwdWJsaWMgcmVhZG9ubHkgZnVuY3Rpb25UeXBlOiDJtUZ1bmN0aW9uVHlwZSA9IMm1RnVuY3Rpb25UeXBlLkFnZ3JlZ2F0aW9uO1xuXG5cdHB1YmxpYyByZWFkb25seSBhZ2dyZWdhdGlvblR5cGU6IMm1QWdncmVnYXRpb25UeXBlO1xuXG5cdHB1YmxpYyByZWFkb25seSBhZ2dyZWdhdGlvbkV2YWxUeXBlOiDJtUFnZ3JlZ2F0aW9uRXZhbFR5cGU7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnOiDJtUFnZ3JlZ2F0aW9uRnVuY3Rpb25FeHByZXNzaW9uQ29uZmlnKSB7XG5cdFx0c3VwZXIoY29uZmlnKTtcblx0XHR0aGlzLmFnZ3JlZ2F0aW9uVHlwZSA9IGNvbmZpZz8uYWdncmVnYXRpb25UeXBlO1xuXHRcdHRoaXMuYWdncmVnYXRpb25FdmFsVHlwZSA9IGNvbmZpZz8uYWdncmVnYXRpb25FdmFsVHlwZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZXhwcmVzc2lvbiBmcm9tIGpzb24uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZnJvbUpzb248XG5cdFx0VEZpbHRlclBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VGaWx0ZXJQYXJzZXIsXG5cdFx0VEV4cHJlc3Npb25QYXJzZXIgZXh0ZW5kcyB0eXBlb2YgybVCYXNlRXhwcmVzc2lvblBhcnNlcixcblx0Pihcblx0XHRkdG86IMm1SnNvbk9iamVjdCxcblx0XHRmaWx0ZXJQYXJzZXI6IFRGaWx0ZXJQYXJzZXIsXG5cdFx0ZXhwcmVzc2lvblBhcnNlcj86IFRFeHByZXNzaW9uUGFyc2VyLFxuXHQpOiDJtUFnZ3JlZ2F0aW9uRnVuY3Rpb25FeHByZXNzaW9uIHtcblx0XHRjb25zdCBmdW5jdGlvbkFyZ3VtZW50ID0gZXhwcmVzc2lvblBhcnNlcj8uZnJvbUpzb24oXG5cdFx0XHRkdG9bJ2Z1bmN0aW9uQXJndW1lbnQnXSBhcyDJtUpzb25PYmplY3QsXG5cdFx0XHRmaWx0ZXJQYXJzZXIsXG5cdFx0KSBhcyDJtUJhc2VFeHByZXNzaW9uO1xuXHRcdGNvbnN0IGFnZ3JlZ2F0aW9uVHlwZSA9IGR0b1snYWdncmVnYXRpb25UeXBlJ10gYXMgybVBZ2dyZWdhdGlvblR5cGU7XG5cdFx0Y29uc3QgYWdncmVnYXRpb25FdmFsVHlwZSA9IGR0b1snYWdncmVnYXRpb25FdmFsVHlwZSddIGFzIMm1QWdncmVnYXRpb25FdmFsVHlwZTtcblx0XHRyZXR1cm4gbmV3IMm1QWdncmVnYXRpb25GdW5jdGlvbkV4cHJlc3Npb24oe1xuXHRcdFx0ZnVuY3Rpb25Bcmd1bWVudCxcblx0XHRcdGFnZ3JlZ2F0aW9uVHlwZSxcblx0XHRcdGFnZ3JlZ2F0aW9uRXZhbFR5cGUsXG5cdFx0XHRpc0Jsb2NrOiBkdG9bJ2lzQmxvY2snXSBhcyBib29sZWFuLFxuXHRcdH0pO1xuXHR9XG5cblx0cHVibGljIGNsb25lKCk6IMm1QWdncmVnYXRpb25GdW5jdGlvbkV4cHJlc3Npb24ge1xuXHRcdHJldHVybiBuZXcgybVBZ2dyZWdhdGlvbkZ1bmN0aW9uRXhwcmVzc2lvbih0aGlzKTtcblx0fVxufVxuIl19