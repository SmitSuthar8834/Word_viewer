import { ɵSingleFilter } from './single-filter';
import { ɵComparisonType, ɵFilterType } from '../enums';
export class ɵBetweenFilter extends ɵSingleFilter {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];
    }
    constructor(leftExpression, rightLessExpression, rightGreaterExpression) {
        super(ɵFilterType.Between, ɵComparisonType.Between, leftExpression);
        this.rightLessExpression = rightLessExpression.clone();
        this.rightGreaterExpression = rightGreaterExpression.clone();
    }
    /**
     * Parses filter from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        const filter = new ɵBetweenFilter(expressionParser.fromJson(dto['leftExpression'], filterParser), expressionParser.fromJson(dto['rightLessExpression'], filterParser), expressionParser.fromJson(dto['rightGreaterExpression'], filterParser));
        return filter;
    }
    clone() {
        return new ɵBetweenFilter(this.leftExpression, this.rightLessExpression, this.rightGreaterExpression);
    }
    toJson() {
        return {
            ...super.toJson(),
            rightLessExpression: this.serializeItem(this.rightLessExpression),
            rightGreaterExpression: this.serializeItem(this.rightGreaterExpression),
        };
    }
}
/**
 * @internal
 * @dontChange
 */
ɵBetweenFilter._instanceOfKey = 'devkit_BetweenFilter';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmV0d2Vlbi1maWx0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2ZpbHRlcnMvYmV0d2Vlbi1maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBSXhELE1BQU0sT0FBTyxjQUFlLFNBQVEsYUFBYTtJQU9oRDs7O09BR0c7SUFDTyxNQUFNLEtBQUssZUFBZTtRQUNuQyxPQUFPLENBQUMsR0FBRyxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBTUQsWUFDQyxjQUErQixFQUMvQixtQkFBb0MsRUFDcEMsc0JBQXVDO1FBRXZDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FHcEIsR0FBZ0IsRUFBRSxZQUEyQixFQUFFLGdCQUFtQztRQUNuRixNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsQ0FDaEMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBZ0IsRUFBRSxZQUFZLENBQW9CLEVBQ2hHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQWdCLEVBQUUsWUFBWSxDQUFvQixFQUNyRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFnQixFQUFFLFlBQVksQ0FBb0IsQ0FDeEcsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVNLEtBQUs7UUFDWCxPQUFPLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7SUFFTSxNQUFNO1FBQ1osT0FBTztZQUNOLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNqQixtQkFBbUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUNqRSxzQkFBc0IsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztTQUN2RSxDQUFDO0lBQ0gsQ0FBQzs7QUF0REQ7OztHQUdHO0FBQ3VCLDZCQUFjLEdBQVcsc0JBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyDJtUJhc2VGaWx0ZXJQYXJzZXIgfSBmcm9tICcuL2ZpbHRlci1wYXJzZXIvYmFzZS1maWx0ZXItcGFyc2VyJztcbmltcG9ydCB7IMm1U2luZ2xlRmlsdGVyIH0gZnJvbSAnLi9zaW5nbGUtZmlsdGVyJztcbmltcG9ydCB7IMm1SnNvbk9iamVjdCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2pzb24tZGF0YS50eXBlJztcbmltcG9ydCB7IMm1Q29tcGFyaXNvblR5cGUsIMm1RmlsdGVyVHlwZSB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB7IMm1QmFzZUV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9ucy9iYXNlLWV4cHJlc3Npb24nO1xuaW1wb3J0IHsgybVCYXNlRXhwcmVzc2lvblBhcnNlciB9IGZyb20gJy4uL2V4cHJlc3Npb25zL2V4cHJlc3Npb24tcGFyc2VyL2Jhc2UtZXhwcmVzc2lvbi1wYXJzZXInO1xuXG5leHBvcnQgY2xhc3MgybVCZXR3ZWVuRmlsdGVyIGV4dGVuZHMgybVTaW5nbGVGaWx0ZXIge1xuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9pbnN0YW5jZU9mS2V5OiBzdHJpbmcgPSAnZGV2a2l0X0JldHdlZW5GaWx0ZXInO1xuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQGRvbnRDaGFuZ2Vcblx0ICovXG5cdHByb3RlY3RlZCBzdGF0aWMgZ2V0IF9pbnN0YW5jZU9mS2V5cygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIFsuLi7JtVNpbmdsZUZpbHRlci5faW5zdGFuY2VPZktleXMsIHRoaXMuX2luc3RhbmNlT2ZLZXldO1xuXHR9XG5cblx0cHVibGljIHJlYWRvbmx5IHJpZ2h0TGVzc0V4cHJlc3Npb246IMm1QmFzZUV4cHJlc3Npb247XG5cblx0cHVibGljIHJlYWRvbmx5IHJpZ2h0R3JlYXRlckV4cHJlc3Npb246IMm1QmFzZUV4cHJlc3Npb247XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0bGVmdEV4cHJlc3Npb246IMm1QmFzZUV4cHJlc3Npb24sXG5cdFx0cmlnaHRMZXNzRXhwcmVzc2lvbjogybVCYXNlRXhwcmVzc2lvbixcblx0XHRyaWdodEdyZWF0ZXJFeHByZXNzaW9uOiDJtUJhc2VFeHByZXNzaW9uLFxuXHQpIHtcblx0XHRzdXBlcijJtUZpbHRlclR5cGUuQmV0d2VlbiwgybVDb21wYXJpc29uVHlwZS5CZXR3ZWVuLCBsZWZ0RXhwcmVzc2lvbik7XG5cdFx0dGhpcy5yaWdodExlc3NFeHByZXNzaW9uID0gcmlnaHRMZXNzRXhwcmVzc2lvbi5jbG9uZSgpO1xuXHRcdHRoaXMucmlnaHRHcmVhdGVyRXhwcmVzc2lvbiA9IHJpZ2h0R3JlYXRlckV4cHJlc3Npb24uY2xvbmUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZmlsdGVyIGZyb20ganNvbi5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0cHVibGljIHN0YXRpYyBmcm9tSnNvbjxcblx0XHRURmlsdGVyUGFyc2VyIGV4dGVuZHMgdHlwZW9mIMm1QmFzZUZpbHRlclBhcnNlcixcblx0XHRURXhwcmVzc2lvblBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VFeHByZXNzaW9uUGFyc2VyLFxuXHQ+KGR0bzogybVKc29uT2JqZWN0LCBmaWx0ZXJQYXJzZXI6IFRGaWx0ZXJQYXJzZXIsIGV4cHJlc3Npb25QYXJzZXI6IFRFeHByZXNzaW9uUGFyc2VyKTogybVCZXR3ZWVuRmlsdGVyIHtcblx0XHRjb25zdCBmaWx0ZXIgPSBuZXcgybVCZXR3ZWVuRmlsdGVyKFxuXHRcdFx0ZXhwcmVzc2lvblBhcnNlci5mcm9tSnNvbihkdG9bJ2xlZnRFeHByZXNzaW9uJ10gYXMgybVKc29uT2JqZWN0LCBmaWx0ZXJQYXJzZXIpIGFzIMm1QmFzZUV4cHJlc3Npb24sXG5cdFx0XHRleHByZXNzaW9uUGFyc2VyLmZyb21Kc29uKGR0b1sncmlnaHRMZXNzRXhwcmVzc2lvbiddIGFzIMm1SnNvbk9iamVjdCwgZmlsdGVyUGFyc2VyKSBhcyDJtUJhc2VFeHByZXNzaW9uLFxuXHRcdFx0ZXhwcmVzc2lvblBhcnNlci5mcm9tSnNvbihkdG9bJ3JpZ2h0R3JlYXRlckV4cHJlc3Npb24nXSBhcyDJtUpzb25PYmplY3QsIGZpbHRlclBhcnNlcikgYXMgybVCYXNlRXhwcmVzc2lvbixcblx0XHQpO1xuXHRcdHJldHVybiBmaWx0ZXI7XG5cdH1cblxuXHRwdWJsaWMgY2xvbmUoKTogybVCZXR3ZWVuRmlsdGVyIHtcblx0XHRyZXR1cm4gbmV3IMm1QmV0d2VlbkZpbHRlcih0aGlzLmxlZnRFeHByZXNzaW9uLCB0aGlzLnJpZ2h0TGVzc0V4cHJlc3Npb24sIHRoaXMucmlnaHRHcmVhdGVyRXhwcmVzc2lvbik7XG5cdH1cblxuXHRwdWJsaWMgdG9Kc29uKCk6IMm1SnNvbk9iamVjdCB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLnN1cGVyLnRvSnNvbigpLFxuXHRcdFx0cmlnaHRMZXNzRXhwcmVzc2lvbjogdGhpcy5zZXJpYWxpemVJdGVtKHRoaXMucmlnaHRMZXNzRXhwcmVzc2lvbiksXG5cdFx0XHRyaWdodEdyZWF0ZXJFeHByZXNzaW9uOiB0aGlzLnNlcmlhbGl6ZUl0ZW0odGhpcy5yaWdodEdyZWF0ZXJFeHByZXNzaW9uKSxcblx0XHR9O1xuXHR9XG59XG4iXX0=