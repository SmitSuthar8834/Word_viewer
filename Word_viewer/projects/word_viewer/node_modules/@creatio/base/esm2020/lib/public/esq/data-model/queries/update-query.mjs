import { __decorate, __metadata } from "tslib";
import { classToPlain, Expose } from 'class-transformer';
import { ɵBaseFilterableQuery } from './base-filterable-query';
import { ɵQueryOperationType } from './query-operation-type';
import { ɵParameterExpression } from '../expressions';
import { ɵValidationUtilities } from '../../../exceptions';
/**
 * @public
 */
export class ɵUpdateQuery extends ɵBaseFilterableQuery {
    // endregion
    // region Constructors: Public
    constructor(rootSchemaName) {
        super(ɵQueryOperationType.Update, rootSchemaName);
        // region Fields: Private
        this._columnValues = new Map();
        // endregion
        // region Fields: Public
        /**
         * Flag that indicates whether to force save data.
         */
        this.isForceUpdate = false;
    }
    // endregion
    // region Properties: Public
    get columnValues() {
        return {
            items: classToPlain(this._columnValues),
        };
    }
    // endregion
    // region Methods: Public
    addColumn(columnName, columnValue, dataValueType) {
        ɵValidationUtilities.checkArgumentEmpty('columnName', columnName);
        this._columnValues.set(columnName, new ɵParameterExpression({ value: columnValue, dataValueType }));
    }
}
__decorate([
    Expose(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], ɵUpdateQuery.prototype, "columnValues", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXF1ZXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvYmFzZS9zcmMvbGliL3B1YmxpYy9lc3EvZGF0YS1tb2RlbC9xdWVyaWVzL3VwZGF0ZS1xdWVyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUV2RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUMzRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUdwRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUV6RDs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFhLFNBQVEsb0JBQW9CO0lBY3JELFlBQVk7SUFFWiw4QkFBOEI7SUFFOUIsWUFBWSxjQUFzQjtRQUNqQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBbEJuRCx5QkFBeUI7UUFFakIsa0JBQWEsR0FBRyxJQUFJLEdBQUcsRUFBZ0MsQ0FBQztRQUVoRSxZQUFZO1FBRVosd0JBQXdCO1FBRXhCOztXQUVHO1FBQ0ksa0JBQWEsR0FBRyxLQUFLLENBQUM7SUFRN0IsQ0FBQztJQUVELFlBQVk7SUFFWiw0QkFBNEI7SUFFNUIsSUFDVyxZQUFZO1FBQ3RCLE9BQU87WUFDTixLQUFLLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDdkMsQ0FBQztJQUNILENBQUM7SUFFRCxZQUFZO0lBRVoseUJBQXlCO0lBRWxCLFNBQVMsQ0FBQyxVQUFrQixFQUFFLFdBQStCLEVBQUUsYUFBNkI7UUFDbEcsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEVBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQztDQUdEO0FBakJBO0lBQUMsTUFBTSxFQUFFOzs7Z0RBS1IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NsYXNzVG9QbGFpbiwgRXhwb3NlfSBmcm9tICdjbGFzcy10cmFuc2Zvcm1lcic7XG5cbmltcG9ydCB7ybVCYXNlRmlsdGVyYWJsZVF1ZXJ5fSBmcm9tICcuL2Jhc2UtZmlsdGVyYWJsZS1xdWVyeSc7XG5pbXBvcnQge8m1UXVlcnlPcGVyYXRpb25UeXBlfSBmcm9tICcuL3F1ZXJ5LW9wZXJhdGlvbi10eXBlJztcbmltcG9ydCB7ybVQYXJhbWV0ZXJFeHByZXNzaW9ufSBmcm9tICcuLi9leHByZXNzaW9ucyc7XG5pbXBvcnQge8m1RW50aXR5Q29sdW1uVmFsdWV9IGZyb20gJy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCB7ybVEYXRhVmFsdWVUeXBlfSBmcm9tICcuLi8uLi8uLi9lbnVtcyc7XG5pbXBvcnQge8m1VmFsaWRhdGlvblV0aWxpdGllc30gZnJvbSAnLi4vLi4vLi4vZXhjZXB0aW9ucyc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgybVVcGRhdGVRdWVyeSBleHRlbmRzIMm1QmFzZUZpbHRlcmFibGVRdWVyeSB7XG5cdC8vIHJlZ2lvbiBGaWVsZHM6IFByaXZhdGVcblxuXHRwcml2YXRlIF9jb2x1bW5WYWx1ZXMgPSBuZXcgTWFwPHN0cmluZywgybVQYXJhbWV0ZXJFeHByZXNzaW9uPigpO1xuXG5cdC8vIGVuZHJlZ2lvblxuXG5cdC8vIHJlZ2lvbiBGaWVsZHM6IFB1YmxpY1xuXG5cdC8qKlxuXHQgKiBGbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdG8gZm9yY2Ugc2F2ZSBkYXRhLlxuXHQgKi9cblx0cHVibGljIGlzRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuXHQvLyBlbmRyZWdpb25cblxuXHQvLyByZWdpb24gQ29uc3RydWN0b3JzOiBQdWJsaWNcblxuXHRjb25zdHJ1Y3Rvcihyb290U2NoZW1hTmFtZTogc3RyaW5nKSB7XG5cdFx0c3VwZXIoybVRdWVyeU9wZXJhdGlvblR5cGUuVXBkYXRlLCByb290U2NoZW1hTmFtZSk7XG5cdH1cblxuXHQvLyBlbmRyZWdpb25cblxuXHQvLyByZWdpb24gUHJvcGVydGllczogUHVibGljXG5cblx0QEV4cG9zZSgpXG5cdHB1YmxpYyBnZXQgY29sdW1uVmFsdWVzKCk6IHsgaXRlbXM6IHsgW2tleTogc3RyaW5nXTogybVQYXJhbWV0ZXJFeHByZXNzaW9uIH0gfSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGl0ZW1zOiBjbGFzc1RvUGxhaW4odGhpcy5fY29sdW1uVmFsdWVzKSxcblx0XHR9O1xuXHR9XG5cblx0Ly8gZW5kcmVnaW9uXG5cblx0Ly8gcmVnaW9uIE1ldGhvZHM6IFB1YmxpY1xuXG5cdHB1YmxpYyBhZGRDb2x1bW4oY29sdW1uTmFtZTogc3RyaW5nLCBjb2x1bW5WYWx1ZTogybVFbnRpdHlDb2x1bW5WYWx1ZSwgZGF0YVZhbHVlVHlwZTogybVEYXRhVmFsdWVUeXBlKTogdm9pZCB7XG5cdFx0ybVWYWxpZGF0aW9uVXRpbGl0aWVzLmNoZWNrQXJndW1lbnRFbXB0eSgnY29sdW1uTmFtZScsIGNvbHVtbk5hbWUpO1xuXHRcdHRoaXMuX2NvbHVtblZhbHVlcy5zZXQoY29sdW1uTmFtZSwgbmV3IMm1UGFyYW1ldGVyRXhwcmVzc2lvbih7dmFsdWU6IGNvbHVtblZhbHVlLCBkYXRhVmFsdWVUeXBlfSkpO1xuXHR9XG5cblx0Ly8gZW5kcmVnaW9uXG59XG4iXX0=