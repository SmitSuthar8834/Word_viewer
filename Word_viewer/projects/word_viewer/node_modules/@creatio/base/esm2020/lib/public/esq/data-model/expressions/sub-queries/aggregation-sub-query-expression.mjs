import { ɵSubQueryExpression } from './sub-query-expression';
export class ɵAggregationSubQueryExpression extends ɵSubQueryExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵSubQueryExpression._instanceOfKeys, this._instanceOfKey];
    }
    constructor(config) {
        super(config);
        this.aggregationType = config?.aggregationType;
        this.functionType = config?.functionType;
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto, filterParser) {
        const subQueryExpression = super.fromJson(dto, filterParser);
        const expression = new ɵAggregationSubQueryExpression({
            aggregationType: dto['aggregationType'],
            functionType: dto['functionType'],
            ...subQueryExpression,
        });
        return expression;
    }
    clone() {
        return new ɵAggregationSubQueryExpression(this);
    }
}
/**
 * @internal
 * @dontChange
 */
ɵAggregationSubQueryExpression._instanceOfKey = 'devkit_AggregationSubQueryExpression';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRpb24tc3ViLXF1ZXJ5LWV4cHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2V4cHJlc3Npb25zL3N1Yi1xdWVyaWVzL2FnZ3JlZ2F0aW9uLXN1Yi1xdWVyeS1leHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBNkIsTUFBTSx3QkFBd0IsQ0FBQztBQVV4RixNQUFNLE9BQU8sOEJBQStCLFNBQVEsbUJBQW1CO0lBT3RFOzs7T0FHRztJQUNPLE1BQU0sS0FBSyxlQUFlO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLG1CQUFtQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUtELFlBQVksTUFBNEM7UUFDdkQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLEVBQUUsZUFBZSxDQUFDO1FBQy9DLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxFQUFFLFlBQVksQ0FBQztJQUMxQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FDckIsR0FBZ0IsRUFDaEIsWUFBMkI7UUFFM0IsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQXdCLENBQUM7UUFDcEYsTUFBTSxVQUFVLEdBQUcsSUFBSSw4QkFBOEIsQ0FBQztZQUNyRCxlQUFlLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFxQjtZQUMzRCxZQUFZLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBa0I7WUFDbEQsR0FBRyxrQkFBa0I7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVNLEtBQUs7UUFDWCxPQUFPLElBQUksOEJBQThCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQzs7QUExQ0Q7OztHQUdHO0FBQ3VCLDZDQUFjLEdBQVcsc0NBQXNDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyDJtVN1YlF1ZXJ5RXhwcmVzc2lvbiwgybVTdWJRdWVyeUV4cHJlc3Npb25Db25maWcgfSBmcm9tICcuL3N1Yi1xdWVyeS1leHByZXNzaW9uJztcbmltcG9ydCB7IMm1QWdncmVnYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcHVibGljL2VudW1zJztcbmltcG9ydCB7IMm1SnNvbk9iamVjdCB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzL2pzb24tZGF0YS50eXBlJztcbmltcG9ydCB7IMm1RnVuY3Rpb25UeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMnO1xuaW1wb3J0IHsgybVCYXNlRmlsdGVyUGFyc2VyIH0gZnJvbSAnLi4vLi4vZmlsdGVycy9maWx0ZXItcGFyc2VyL2Jhc2UtZmlsdGVyLXBhcnNlcic7XG5cbmV4cG9ydCB0eXBlIMm1QWdncmVnYXRpb25TdWJRdWVyeUV4cHJlc3Npb25Db25maWcgPSDJtVN1YlF1ZXJ5RXhwcmVzc2lvbkNvbmZpZyAmXG5cdFBpY2s8ybVBZ2dyZWdhdGlvblN1YlF1ZXJ5RXhwcmVzc2lvbiwgJ2FnZ3JlZ2F0aW9uVHlwZSc+ICZcblx0UGljazzJtUFnZ3JlZ2F0aW9uU3ViUXVlcnlFeHByZXNzaW9uLCAnZnVuY3Rpb25UeXBlJz47XG5cbmV4cG9ydCBjbGFzcyDJtUFnZ3JlZ2F0aW9uU3ViUXVlcnlFeHByZXNzaW9uIGV4dGVuZHMgybVTdWJRdWVyeUV4cHJlc3Npb24ge1xuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9pbnN0YW5jZU9mS2V5OiBzdHJpbmcgPSAnZGV2a2l0X0FnZ3JlZ2F0aW9uU3ViUXVlcnlFeHByZXNzaW9uJztcblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIGdldCBfaW5zdGFuY2VPZktleXMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiBbLi4uybVTdWJRdWVyeUV4cHJlc3Npb24uX2luc3RhbmNlT2ZLZXlzLCB0aGlzLl9pbnN0YW5jZU9mS2V5XTtcblx0fVxuXG5cdHB1YmxpYyByZWFkb25seSBhZ2dyZWdhdGlvblR5cGU6IMm1QWdncmVnYXRpb25UeXBlO1xuXHRwdWJsaWMgcmVhZG9ubHkgZnVuY3Rpb25UeXBlPzogybVGdW5jdGlvblR5cGU7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnOiDJtUFnZ3JlZ2F0aW9uU3ViUXVlcnlFeHByZXNzaW9uQ29uZmlnKSB7XG5cdFx0c3VwZXIoY29uZmlnKTtcblx0XHR0aGlzLmFnZ3JlZ2F0aW9uVHlwZSA9IGNvbmZpZz8uYWdncmVnYXRpb25UeXBlO1xuXHRcdHRoaXMuZnVuY3Rpb25UeXBlID0gY29uZmlnPy5mdW5jdGlvblR5cGU7XG5cdH1cblxuXHQvKipcblx0ICogUGFyc2VzIGV4cHJlc3Npb24gZnJvbSBqc29uLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIGZyb21Kc29uPFRGaWx0ZXJQYXJzZXIgZXh0ZW5kcyB0eXBlb2YgybVCYXNlRmlsdGVyUGFyc2VyPihcblx0XHRkdG86IMm1SnNvbk9iamVjdCxcblx0XHRmaWx0ZXJQYXJzZXI6IFRGaWx0ZXJQYXJzZXIsXG5cdCk6IMm1QWdncmVnYXRpb25TdWJRdWVyeUV4cHJlc3Npb24ge1xuXHRcdGNvbnN0IHN1YlF1ZXJ5RXhwcmVzc2lvbiA9IHN1cGVyLmZyb21Kc29uKGR0bywgZmlsdGVyUGFyc2VyKSBhcyDJtVN1YlF1ZXJ5RXhwcmVzc2lvbjtcblx0XHRjb25zdCBleHByZXNzaW9uID0gbmV3IMm1QWdncmVnYXRpb25TdWJRdWVyeUV4cHJlc3Npb24oe1xuXHRcdFx0YWdncmVnYXRpb25UeXBlOiBkdG9bJ2FnZ3JlZ2F0aW9uVHlwZSddIGFzIMm1QWdncmVnYXRpb25UeXBlLFxuXHRcdFx0ZnVuY3Rpb25UeXBlOiBkdG9bJ2Z1bmN0aW9uVHlwZSddIGFzIMm1RnVuY3Rpb25UeXBlLFxuXHRcdFx0Li4uc3ViUXVlcnlFeHByZXNzaW9uLFxuXHRcdH0pO1xuXHRcdHJldHVybiBleHByZXNzaW9uO1xuXHR9XG5cblx0cHVibGljIGNsb25lKCk6IMm1QWdncmVnYXRpb25TdWJRdWVyeUV4cHJlc3Npb24ge1xuXHRcdHJldHVybiBuZXcgybVBZ2dyZWdhdGlvblN1YlF1ZXJ5RXhwcmVzc2lvbih0aGlzKTtcblx0fVxufVxuIl19