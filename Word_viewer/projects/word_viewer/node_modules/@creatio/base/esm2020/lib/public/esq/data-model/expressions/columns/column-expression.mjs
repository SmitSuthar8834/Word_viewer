import { ɵExpressionType } from '../../enums';
import { ɵBaseExpression } from '../base-expression';
export class ɵColumnExpression extends ɵBaseExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];
    }
    constructor(config) {
        super(config);
        this.expressionType = ɵExpressionType.SchemaColumn;
        this.columnPath = config?.columnPath;
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto) {
        const expression = new ɵColumnExpression({ columnPath: dto['columnPath'] });
        return expression;
    }
    clone() {
        return new ɵColumnExpression(this);
    }
}
/**
 * @internal
 * @dontChange
 */
ɵColumnExpression._instanceOfKey = 'devkit_ColumnExpression';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWV4cHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2V4cHJlc3Npb25zL2NvbHVtbnMvY29sdW1uLWV4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZUFBZSxFQUFxQixNQUFNLG9CQUFvQixDQUFDO0FBSXhFLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxlQUFlO0lBT3JEOzs7T0FHRztJQUNPLE1BQU0sS0FBSyxlQUFlO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLGVBQWUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFNRCxZQUFZLE1BQStCO1FBQzFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUxDLG1CQUFjLEdBQW9CLGVBQWUsQ0FBQyxZQUFZLENBQUM7UUFNOUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLEVBQUUsVUFBVSxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWdCO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLElBQUksaUJBQWlCLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBVyxFQUFFLENBQUMsQ0FBQztRQUN0RixPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRU0sS0FBSztRQUNYLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDOztBQWxDRDs7O0dBR0c7QUFDdUIsZ0NBQWMsR0FBVyx5QkFBeUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1SnNvbk9iamVjdCB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzL2pzb24tZGF0YS50eXBlJztcbmltcG9ydCB7IMm1RXhwcmVzc2lvblR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcyc7XG5pbXBvcnQgeyDJtUJhc2VFeHByZXNzaW9uLCDJtUV4cHJlc3Npb25Db25maWcgfSBmcm9tICcuLi9iYXNlLWV4cHJlc3Npb24nO1xuXG5leHBvcnQgdHlwZSDJtUNvbHVtbkV4cHJlc3Npb25Db25maWcgPSDJtUV4cHJlc3Npb25Db25maWc8ybVDb2x1bW5FeHByZXNzaW9uPiAmIFBpY2s8ybVDb2x1bW5FeHByZXNzaW9uLCAnY29sdW1uUGF0aCc+O1xuXG5leHBvcnQgY2xhc3MgybVDb2x1bW5FeHByZXNzaW9uIGV4dGVuZHMgybVCYXNlRXhwcmVzc2lvbiB7XG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQGRvbnRDaGFuZ2Vcblx0ICovXG5cdHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2luc3RhbmNlT2ZLZXk6IHN0cmluZyA9ICdkZXZraXRfQ29sdW1uRXhwcmVzc2lvbic7XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyBnZXQgX2luc3RhbmNlT2ZLZXlzKCk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gWy4uLsm1QmFzZUV4cHJlc3Npb24uX2luc3RhbmNlT2ZLZXlzLCB0aGlzLl9pbnN0YW5jZU9mS2V5XTtcblx0fVxuXG5cdHB1YmxpYyByZWFkb25seSBleHByZXNzaW9uVHlwZTogybVFeHByZXNzaW9uVHlwZSA9IMm1RXhwcmVzc2lvblR5cGUuU2NoZW1hQ29sdW1uO1xuXG5cdHB1YmxpYyBjb2x1bW5QYXRoOiBzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnOiDJtUNvbHVtbkV4cHJlc3Npb25Db25maWcpIHtcblx0XHRzdXBlcihjb25maWcpO1xuXHRcdHRoaXMuY29sdW1uUGF0aCA9IGNvbmZpZz8uY29sdW1uUGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZXhwcmVzc2lvbiBmcm9tIGpzb24uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZnJvbUpzb24oZHRvOiDJtUpzb25PYmplY3QpOiDJtUNvbHVtbkV4cHJlc3Npb24ge1xuXHRcdGNvbnN0IGV4cHJlc3Npb24gPSBuZXcgybVDb2x1bW5FeHByZXNzaW9uKHsgY29sdW1uUGF0aDogZHRvWydjb2x1bW5QYXRoJ10gYXMgc3RyaW5nIH0pO1xuXHRcdHJldHVybiBleHByZXNzaW9uO1xuXHR9XG5cblx0cHVibGljIGNsb25lKCk6IMm1Q29sdW1uRXhwcmVzc2lvbiB7XG5cdFx0cmV0dXJuIG5ldyDJtUNvbHVtbkV4cHJlc3Npb24odGhpcyk7XG5cdH1cbn1cbiJdfQ==