/**
 * Empty Guid constant.
 * @public
 */
export const ɵEMPTY_GUID = '00000000-0000-0000-0000-000000000000';
/**
 * Regular expression for Guid validation.
 * @public
 */
const validator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');
/**
 * Generates guid part.
 * @param length Part length.
 * @public
 */
function generateGuidPart(length) {
    let out = '';
    for (let i = 0; i < length; i++) {
        // eslint-disable-next-line no-bitwise
        out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return out;
}
/**
 * Generates new Guid.
 * @public
 */
export function ɵgenerateGuid() {
    return [
        generateGuidPart(2),
        generateGuidPart(1),
        generateGuidPart(1),
        generateGuidPart(1),
        generateGuidPart(3),
    ].join('-');
}
/**
 * Checks if value is Guid.
 * @param value Value for check.
 * @public
 */
export function ɵisGuid(value) {
    return Boolean(value) && validator.test(value);
}
/**
 * Checks if Guid is empty value or equal to EMPTY_GUID.
 * @param guid Guid for check.
 * @public
 */
export function ɵisEmptyGuid(guid) {
    return !guid || guid === ɵEMPTY_GUID;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZC50eXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvYmFzZS9zcmMvbGliL3B1YmxpYy90eXBlcy9ndWlkLnR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUE7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLHNDQUFzQyxDQUFDO0FBRWxFOzs7R0FHRztBQUNILE1BQU0sU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLGdFQUFnRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRXBHOzs7O0dBSUc7QUFDSCxTQUFTLGdCQUFnQixDQUFDLE1BQWM7SUFDdkMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNoQyxzQ0FBc0M7UUFDdEMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZFO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGFBQWE7SUFDNUIsT0FBTztRQUNOLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUNuQixnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDbkIsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ25CLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUNuQixnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7S0FDbkIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxPQUFPLENBQUMsS0FBYztJQUNyQyxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQWUsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUF1QjtJQUNuRCxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxXQUFXLENBQUM7QUFDdEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHlwZSBmb3IgR3VpZCB2YWx1ZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgybVHdWlkID0gc3RyaW5nO1xuXG4vKipcbiAqIEVtcHR5IEd1aWQgY29uc3RhbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCDJtUVNUFRZX0dVSUQgPSAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJztcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIEd1aWQgdmFsaWRhdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgdmFsaWRhdG9yID0gbmV3IFJlZ0V4cCgnXlthLXowLTldezh9LVthLXowLTldezR9LVthLXowLTldezR9LVthLXowLTldezR9LVthLXowLTldezEyfSQnLCAnaScpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBndWlkIHBhcnQuXG4gKiBAcGFyYW0gbGVuZ3RoIFBhcnQgbGVuZ3RoLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUd1aWRQYXJ0KGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcblx0bGV0IG91dCA9ICcnO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2Vcblx0XHRvdXQgKz0gKCgoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xuXHR9XG5cdHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIG5ldyBHdWlkLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gybVnZW5lcmF0ZUd1aWQoKTogybVHdWlkIHtcblx0cmV0dXJuIFtcblx0XHRnZW5lcmF0ZUd1aWRQYXJ0KDIpLFxuXHRcdGdlbmVyYXRlR3VpZFBhcnQoMSksXG5cdFx0Z2VuZXJhdGVHdWlkUGFydCgxKSxcblx0XHRnZW5lcmF0ZUd1aWRQYXJ0KDEpLFxuXHRcdGdlbmVyYXRlR3VpZFBhcnQoMyksXG5cdF0uam9pbignLScpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyBHdWlkLlxuICogQHBhcmFtIHZhbHVlIFZhbHVlIGZvciBjaGVjay5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIMm1aXNHdWlkKHZhbHVlOiB1bmtub3duKTogYm9vbGVhbiB7XG5cdHJldHVybiBCb29sZWFuKHZhbHVlKSAmJiB2YWxpZGF0b3IudGVzdCh2YWx1ZSBhcyBzdHJpbmcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBHdWlkIGlzIGVtcHR5IHZhbHVlIG9yIGVxdWFsIHRvIEVNUFRZX0dVSUQuXG4gKiBAcGFyYW0gZ3VpZCBHdWlkIGZvciBjaGVjay5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIMm1aXNFbXB0eUd1aWQoZ3VpZDogybVHdWlkIHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG5cdHJldHVybiAhZ3VpZCB8fCBndWlkID09PSDJtUVNUFRZX0dVSUQ7XG59XG4iXX0=