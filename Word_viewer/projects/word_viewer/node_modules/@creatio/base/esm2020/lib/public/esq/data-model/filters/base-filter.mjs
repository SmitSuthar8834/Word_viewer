import { classToPlain } from 'class-transformer';
export class ɵBaseFilter {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [this._instanceOfKey];
    }
    static [Symbol.hasInstance](instance) {
        const instanceOfKeys = instance?.constructor?.['_instanceOfKeys'] ?? [];
        return instanceOfKeys.includes(this._instanceOfKey);
    }
    constructor(filterType) {
        this.isEnabled = true;
        this.trimDateTimeParameterToDate = false;
        this.filterType = filterType;
    }
    /**
     * Parses filter from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        throw new Error(`fromJson not supported on filter type ${this.constructor.name}`);
    }
    serializeItem(item) {
        return typeof item.toJson === 'function'
            ? item.toJson()
            : classToPlain(item, {
                exposeUnsetFields: false,
                excludePrefixes: ['_'],
            });
    }
    /**
     * Converts instance to json object.
     * @public
     */
    toJson() {
        return classToPlain(this, {
            exposeUnsetFields: false,
            excludePrefixes: ['_'],
        });
    }
}
/**
 * @internal
 * @dontChange
 */
ɵBaseFilter._instanceOfKey = 'devkit_BaseFilter';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1maWx0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2ZpbHRlcnMvYmFzZS1maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBUWpELE1BQU0sT0FBZ0IsV0FBVztJQU9oQzs7O09BR0c7SUFDTyxNQUFNLEtBQUssZUFBZTtRQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFRTSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBcUI7UUFDdkQsTUFBTSxjQUFjLEdBQUcsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hFLE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELFlBQXNCLFVBQXVCO1FBVHRDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFFakIsZ0NBQTJCLEdBQUcsS0FBSyxDQUFDO1FBUTFDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQzlCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUdwQixHQUFnQixFQUFFLFlBQTJCLEVBQUUsZ0JBQW1DO1FBQ25GLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRVMsYUFBYSxDQUFDLElBQW1CO1FBQzFDLE9BQU8sT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFVBQVU7WUFDdkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRTtnQkFDbkIsaUJBQWlCLEVBQUUsS0FBSztnQkFDeEIsZUFBZSxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ3JCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFJRDs7O09BR0c7SUFDSSxNQUFNO1FBQ1osT0FBTyxZQUFZLENBQUMsSUFBSSxFQUFFO1lBQ3pCLGlCQUFpQixFQUFFLEtBQUs7WUFDeEIsZUFBZSxFQUFFLENBQUMsR0FBRyxDQUFDO1NBQ3RCLENBQUMsQ0FBQztJQUNKLENBQUM7O0FBNUREOzs7R0FHRztBQUN1QiwwQkFBYyxHQUFXLG1CQUFtQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xhc3NUb1BsYWluIH0gZnJvbSAnY2xhc3MtdHJhbnNmb3JtZXInO1xuXG5pbXBvcnQgeyDJtUJhc2VGaWx0ZXJQYXJzZXIgfSBmcm9tICcuL2ZpbHRlci1wYXJzZXIvYmFzZS1maWx0ZXItcGFyc2VyJztcbmltcG9ydCB7IMm1U2VyaWFsaXphYmxlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyDJtUpzb25PYmplY3QgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9qc29uLWRhdGEudHlwZSc7XG5pbXBvcnQgeyDJtUZpbHRlclR5cGUgfSBmcm9tICcuLi9lbnVtcy9maWx0ZXItdHlwZS5lbnVtJztcbmltcG9ydCB7IMm1QmFzZUV4cHJlc3Npb25QYXJzZXIgfSBmcm9tICcuLi9leHByZXNzaW9ucy9leHByZXNzaW9uLXBhcnNlci9iYXNlLWV4cHJlc3Npb24tcGFyc2VyJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIMm1QmFzZUZpbHRlciBpbXBsZW1lbnRzIMm1U2VyaWFsaXphYmxlIHtcblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfaW5zdGFuY2VPZktleTogc3RyaW5nID0gJ2RldmtpdF9CYXNlRmlsdGVyJztcblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIGdldCBfaW5zdGFuY2VPZktleXMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiBbdGhpcy5faW5zdGFuY2VPZktleV07XG5cdH1cblxuXHRwdWJsaWMgcmVhZG9ubHkgZmlsdGVyVHlwZTogybVGaWx0ZXJUeXBlO1xuXG5cdHB1YmxpYyBpc0VuYWJsZWQgPSB0cnVlO1xuXG5cdHB1YmxpYyB0cmltRGF0ZVRpbWVQYXJhbWV0ZXJUb0RhdGUgPSBmYWxzZTtcblxuXHRwdWJsaWMgc3RhdGljIFtTeW1ib2wuaGFzSW5zdGFuY2VdKGluc3RhbmNlOiDJtUJhc2VGaWx0ZXIpOiBib29sZWFuIHtcblx0XHRjb25zdCBpbnN0YW5jZU9mS2V5cyA9IGluc3RhbmNlPy5jb25zdHJ1Y3Rvcj8uWydfaW5zdGFuY2VPZktleXMnXSA/PyBbXTtcblx0XHRyZXR1cm4gaW5zdGFuY2VPZktleXMuaW5jbHVkZXModGhpcy5faW5zdGFuY2VPZktleSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgY29uc3RydWN0b3IoZmlsdGVyVHlwZTogybVGaWx0ZXJUeXBlKSB7XG5cdFx0dGhpcy5maWx0ZXJUeXBlID0gZmlsdGVyVHlwZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZmlsdGVyIGZyb20ganNvbi5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0cHVibGljIHN0YXRpYyBmcm9tSnNvbjxcblx0XHRURmlsdGVyUGFyc2VyIGV4dGVuZHMgdHlwZW9mIMm1QmFzZUZpbHRlclBhcnNlcixcblx0XHRURXhwcmVzc2lvblBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VFeHByZXNzaW9uUGFyc2VyLFxuXHQ+KGR0bzogybVKc29uT2JqZWN0LCBmaWx0ZXJQYXJzZXI6IFRGaWx0ZXJQYXJzZXIsIGV4cHJlc3Npb25QYXJzZXI6IFRFeHByZXNzaW9uUGFyc2VyKTogybVCYXNlRmlsdGVyIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGZyb21Kc29uIG5vdCBzdXBwb3J0ZWQgb24gZmlsdGVyIHR5cGUgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgc2VyaWFsaXplSXRlbShpdGVtOiDJtVNlcmlhbGl6YWJsZSk6IMm1SnNvbk9iamVjdCB7XG5cdFx0cmV0dXJuIHR5cGVvZiBpdGVtLnRvSnNvbiA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0PyBpdGVtLnRvSnNvbigpXG5cdFx0XHQ6IGNsYXNzVG9QbGFpbihpdGVtLCB7XG5cdFx0XHRcdFx0ZXhwb3NlVW5zZXRGaWVsZHM6IGZhbHNlLFxuXHRcdFx0XHRcdGV4Y2x1ZGVQcmVmaXhlczogWydfJ10sXG5cdFx0XHQgIH0pO1xuXHR9XG5cblx0cHVibGljIGFic3RyYWN0IGNsb25lKCk6IMm1QmFzZUZpbHRlcjtcblxuXHQvKipcblx0ICogQ29udmVydHMgaW5zdGFuY2UgdG8ganNvbiBvYmplY3QuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHB1YmxpYyB0b0pzb24oKTogybVKc29uT2JqZWN0IHtcblx0XHRyZXR1cm4gY2xhc3NUb1BsYWluKHRoaXMsIHtcblx0XHRcdGV4cG9zZVVuc2V0RmllbGRzOiBmYWxzZSxcblx0XHRcdGV4Y2x1ZGVQcmVmaXhlczogWydfJ10sXG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==