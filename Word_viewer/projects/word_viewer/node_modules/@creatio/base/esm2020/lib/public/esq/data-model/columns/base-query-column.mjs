import { ɵValidationUtilities } from '../../../../public/exceptions';
import { ɵOrderDirection } from '../enums';
export class ɵBaseQueryColumn {
    constructor(expression) {
        this.orderDirection = ɵOrderDirection.None;
        this.orderPosition = -1;
        this.isVisible = true;
        this.expression = expression;
    }
    /**
     * Adds ordering options.
     * @param orderDirection Direction.
     * @param orderPosition Position.
     * @returns Self.
     */
    withOrdering(orderDirection, orderPosition) {
        ɵValidationUtilities.checkArgumentEmpty('orderDirection', orderDirection);
        ɵValidationUtilities.checkArgumentEmpty('orderPosition', orderPosition);
        ɵValidationUtilities.checkArgumentOutOfRange('orderPosition', orderPosition, { begin: -1 });
        this.orderDirection = orderDirection;
        this.orderPosition = orderPosition;
        return this;
    }
    /**
     * Adds options.
     * @param options Options.
     * @returns Self.
     */
    withOptions(options) {
        ɵValidationUtilities.checkArgumentEmpty('options', options);
        this.isVisible = options.isVisible ?? true;
        return this;
    }
    /**
     * Adds caption.
     * @param caption Caption.
     * @returns Self.
     */
    withCaption(caption) {
        ɵValidationUtilities.checkArgumentEmpty('caption', caption);
        this.caption = caption;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1xdWVyeS1jb2x1bW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2NvbHVtbnMvYmFzZS1xdWVyeS1jb2x1bW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUczQyxNQUFNLE9BQWdCLGdCQUFnQjtJQVdyQyxZQUFzQixVQUF1QjtRQVZ0QyxtQkFBYyxHQUFvQixlQUFlLENBQUMsSUFBSSxDQUFDO1FBRXZELGtCQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFbkIsY0FBUyxHQUFHLElBQUksQ0FBQztRQU92QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxZQUFZLENBQUMsY0FBK0IsRUFBRSxhQUFxQjtRQUN6RSxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMxRSxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDeEUsb0JBQW9CLENBQUMsdUJBQXVCLENBQUMsZUFBZSxFQUFFLGFBQWEsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUYsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLFdBQVcsQ0FBQyxPQUFnQztRQUNsRCxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQztRQUMzQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksV0FBVyxDQUFDLE9BQWU7UUFDakMsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVWYWxpZGF0aW9uVXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vcHVibGljL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHsgybVPcmRlckRpcmVjdGlvbiB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB7IMm1QmFzZUV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9ucyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyDJtUJhc2VRdWVyeUNvbHVtbjxURXhwcmVzc2lvbiBleHRlbmRzIMm1QmFzZUV4cHJlc3Npb24gPSDJtUJhc2VFeHByZXNzaW9uPiB7XG5cdHB1YmxpYyBvcmRlckRpcmVjdGlvbjogybVPcmRlckRpcmVjdGlvbiA9IMm1T3JkZXJEaXJlY3Rpb24uTm9uZTtcblxuXHRwdWJsaWMgb3JkZXJQb3NpdGlvbiA9IC0xO1xuXG5cdHB1YmxpYyBpc1Zpc2libGUgPSB0cnVlO1xuXG5cdHB1YmxpYyBjYXB0aW9uPzogc3RyaW5nO1xuXG5cdHB1YmxpYyByZWFkb25seSBleHByZXNzaW9uOiBURXhwcmVzc2lvbjtcblxuXHRwcm90ZWN0ZWQgY29uc3RydWN0b3IoZXhwcmVzc2lvbjogVEV4cHJlc3Npb24pIHtcblx0XHR0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgb3JkZXJpbmcgb3B0aW9ucy5cblx0ICogQHBhcmFtIG9yZGVyRGlyZWN0aW9uIERpcmVjdGlvbi5cblx0ICogQHBhcmFtIG9yZGVyUG9zaXRpb24gUG9zaXRpb24uXG5cdCAqIEByZXR1cm5zIFNlbGYuXG5cdCAqL1xuXHRwdWJsaWMgd2l0aE9yZGVyaW5nKG9yZGVyRGlyZWN0aW9uOiDJtU9yZGVyRGlyZWN0aW9uLCBvcmRlclBvc2l0aW9uOiBudW1iZXIpOiB0aGlzIHtcblx0XHTJtVZhbGlkYXRpb25VdGlsaXRpZXMuY2hlY2tBcmd1bWVudEVtcHR5KCdvcmRlckRpcmVjdGlvbicsIG9yZGVyRGlyZWN0aW9uKTtcblx0XHTJtVZhbGlkYXRpb25VdGlsaXRpZXMuY2hlY2tBcmd1bWVudEVtcHR5KCdvcmRlclBvc2l0aW9uJywgb3JkZXJQb3NpdGlvbik7XG5cdFx0ybVWYWxpZGF0aW9uVXRpbGl0aWVzLmNoZWNrQXJndW1lbnRPdXRPZlJhbmdlKCdvcmRlclBvc2l0aW9uJywgb3JkZXJQb3NpdGlvbiwgeyBiZWdpbjogLTEgfSk7XG5cdFx0dGhpcy5vcmRlckRpcmVjdGlvbiA9IG9yZGVyRGlyZWN0aW9uO1xuXHRcdHRoaXMub3JkZXJQb3NpdGlvbiA9IG9yZGVyUG9zaXRpb247XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBvcHRpb25zLlxuXHQgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zLlxuXHQgKiBAcmV0dXJucyBTZWxmLlxuXHQgKi9cblx0cHVibGljIHdpdGhPcHRpb25zKG9wdGlvbnM6IHsgaXNWaXNpYmxlPzogYm9vbGVhbiB9KTogdGhpcyB7XG5cdFx0ybVWYWxpZGF0aW9uVXRpbGl0aWVzLmNoZWNrQXJndW1lbnRFbXB0eSgnb3B0aW9ucycsIG9wdGlvbnMpO1xuXHRcdHRoaXMuaXNWaXNpYmxlID0gb3B0aW9ucy5pc1Zpc2libGUgPz8gdHJ1ZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGNhcHRpb24uXG5cdCAqIEBwYXJhbSBjYXB0aW9uIENhcHRpb24uXG5cdCAqIEByZXR1cm5zIFNlbGYuXG5cdCAqL1xuXHRwdWJsaWMgd2l0aENhcHRpb24oY2FwdGlvbjogc3RyaW5nKTogdGhpcyB7XG5cdFx0ybVWYWxpZGF0aW9uVXRpbGl0aWVzLmNoZWNrQXJndW1lbnRFbXB0eSgnY2FwdGlvbicsIGNhcHRpb24pO1xuXHRcdHRoaXMuY2FwdGlvbiA9IGNhcHRpb247XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn1cbiJdfQ==