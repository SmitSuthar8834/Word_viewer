import { classToPlain } from 'class-transformer';
export class ɵBaseExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [this._instanceOfKey];
    }
    static [Symbol.hasInstance](instance) {
        const instanceOfKeys = instance?.constructor?.['_instanceOfKeys'] ?? [];
        return instanceOfKeys.includes(this._instanceOfKey);
    }
    constructor(config) {
        this.isBlock = false;
        this.isBlock = config?.isBlock;
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        throw new Error(`fromJson not supported on expression type ${this.constructor.name}`);
    }
    serializeItem(item) {
        return typeof item.toJson === 'function'
            ? item.toJson()
            : classToPlain(item, {
                exposeUnsetFields: false,
                excludePrefixes: ['_'],
            });
    }
    /**
     * Converts instance to json object.
     * @public
     */
    toJson() {
        return classToPlain(this, {
            exposeUnsetFields: false,
            excludePrefixes: ['_'],
        });
    }
}
/**
 * @internal
 * @dontChange
 */
ɵBaseExpression._instanceOfKey = 'devkit_BaseExpression';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1leHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvYmFzZS9zcmMvbGliL3B1YmxpYy9lc3EvZGF0YS1tb2RlbC9leHByZXNzaW9ucy9iYXNlLWV4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBVWpELE1BQU0sT0FBZ0IsZUFBZTtJQU9wQzs7O09BR0c7SUFDTyxNQUFNLEtBQUssZUFBZTtRQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFJTSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBeUI7UUFDM0QsTUFBTSxjQUFjLEdBQUcsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hFLE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUlELFlBQXNCLE1BQTBDO1FBVGhELFlBQU8sR0FBWSxLQUFLLENBQUM7UUFVeEMsSUFBSSxDQUFDLE9BQU8sR0FBWSxNQUFNLEVBQUUsT0FBTyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUdwQixHQUFnQixFQUFFLFlBQTJCLEVBQUUsZ0JBQW9DO1FBQ3BGLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRVMsYUFBYSxDQUFDLElBQW1CO1FBQzFDLE9BQU8sT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFVBQVU7WUFDdkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRTtnQkFDbkIsaUJBQWlCLEVBQUUsS0FBSztnQkFDeEIsZUFBZSxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ3JCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFJRDs7O09BR0c7SUFDSSxNQUFNO1FBQ1osT0FBTyxZQUFZLENBQUMsSUFBSSxFQUFFO1lBQ3pCLGlCQUFpQixFQUFFLEtBQUs7WUFDeEIsZUFBZSxFQUFFLENBQUMsR0FBRyxDQUFDO1NBQ3RCLENBQUMsQ0FBQztJQUNKLENBQUM7O0FBMUREOzs7R0FHRztBQUN1Qiw4QkFBYyxHQUFXLHVCQUF1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xhc3NUb1BsYWluIH0gZnJvbSAnY2xhc3MtdHJhbnNmb3JtZXInO1xuXG5pbXBvcnQgeyDJtUJhc2VFeHByZXNzaW9uUGFyc2VyIH0gZnJvbSAnLi9leHByZXNzaW9uLXBhcnNlci9iYXNlLWV4cHJlc3Npb24tcGFyc2VyJztcbmltcG9ydCB7IMm1U2VyaWFsaXphYmxlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyDJtUpzb25PYmplY3QgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9qc29uLWRhdGEudHlwZSc7XG5pbXBvcnQgeyDJtUV4cHJlc3Npb25UeXBlIH0gZnJvbSAnLi4vZW51bXMvZXhwcmVzc2lvbi10eXBlLmVudW0nO1xuaW1wb3J0IHsgybVCYXNlRmlsdGVyUGFyc2VyIH0gZnJvbSAnLi4vZmlsdGVycy9maWx0ZXItcGFyc2VyL2Jhc2UtZmlsdGVyLXBhcnNlcic7XG5cbmV4cG9ydCB0eXBlIMm1RXhwcmVzc2lvbkNvbmZpZzxURXhwcmVzc2lvbiBleHRlbmRzIMm1QmFzZUV4cHJlc3Npb24+ID0gUGFydGlhbDxPbWl0PFRFeHByZXNzaW9uLCAnZXhwcmVzc2lvblR5cGUnPj47XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyDJtUJhc2VFeHByZXNzaW9uIGltcGxlbWVudHMgybVTZXJpYWxpemFibGUge1xuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9pbnN0YW5jZU9mS2V5OiBzdHJpbmcgPSAnZGV2a2l0X0Jhc2VFeHByZXNzaW9uJztcblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIGdldCBfaW5zdGFuY2VPZktleXMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiBbdGhpcy5faW5zdGFuY2VPZktleV07XG5cdH1cblxuXHRwdWJsaWMgcmVhZG9ubHkgaXNCbG9jazogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdHB1YmxpYyBzdGF0aWMgW1N5bWJvbC5oYXNJbnN0YW5jZV0oaW5zdGFuY2U6IMm1QmFzZUV4cHJlc3Npb24pOiBib29sZWFuIHtcblx0XHRjb25zdCBpbnN0YW5jZU9mS2V5cyA9IGluc3RhbmNlPy5jb25zdHJ1Y3Rvcj8uWydfaW5zdGFuY2VPZktleXMnXSA/PyBbXTtcblx0XHRyZXR1cm4gaW5zdGFuY2VPZktleXMuaW5jbHVkZXModGhpcy5faW5zdGFuY2VPZktleSk7XG5cdH1cblxuXHRwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgZXhwcmVzc2lvblR5cGU6IMm1RXhwcmVzc2lvblR5cGU7XG5cblx0cHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbmZpZzogybVFeHByZXNzaW9uQ29uZmlnPMm1QmFzZUV4cHJlc3Npb24+KSB7XG5cdFx0dGhpcy5pc0Jsb2NrID0gPGJvb2xlYW4+Y29uZmlnPy5pc0Jsb2NrO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyBleHByZXNzaW9uIGZyb20ganNvbi5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0cHVibGljIHN0YXRpYyBmcm9tSnNvbjxcblx0XHRURmlsdGVyUGFyc2VyIGV4dGVuZHMgdHlwZW9mIMm1QmFzZUZpbHRlclBhcnNlcixcblx0XHRURXhwcmVzc2lvblBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VFeHByZXNzaW9uUGFyc2VyLFxuXHQ+KGR0bzogybVKc29uT2JqZWN0LCBmaWx0ZXJQYXJzZXI6IFRGaWx0ZXJQYXJzZXIsIGV4cHJlc3Npb25QYXJzZXI/OiBURXhwcmVzc2lvblBhcnNlcik6IMm1QmFzZUV4cHJlc3Npb24ge1xuXHRcdHRocm93IG5ldyBFcnJvcihgZnJvbUpzb24gbm90IHN1cHBvcnRlZCBvbiBleHByZXNzaW9uIHR5cGUgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgc2VyaWFsaXplSXRlbShpdGVtOiDJtVNlcmlhbGl6YWJsZSk6IMm1SnNvbk9iamVjdCB7XG5cdFx0cmV0dXJuIHR5cGVvZiBpdGVtLnRvSnNvbiA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0PyBpdGVtLnRvSnNvbigpXG5cdFx0XHQ6IGNsYXNzVG9QbGFpbihpdGVtLCB7XG5cdFx0XHRcdFx0ZXhwb3NlVW5zZXRGaWVsZHM6IGZhbHNlLFxuXHRcdFx0XHRcdGV4Y2x1ZGVQcmVmaXhlczogWydfJ10sXG5cdFx0XHQgIH0pO1xuXHR9XG5cblx0cHVibGljIGFic3RyYWN0IGNsb25lKCk6IMm1QmFzZUV4cHJlc3Npb247XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGluc3RhbmNlIHRvIGpzb24gb2JqZWN0LlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRwdWJsaWMgdG9Kc29uKCk6IMm1SnNvbk9iamVjdCB7XG5cdFx0cmV0dXJuIGNsYXNzVG9QbGFpbih0aGlzLCB7XG5cdFx0XHRleHBvc2VVbnNldEZpZWxkczogZmFsc2UsXG5cdFx0XHRleGNsdWRlUHJlZml4ZXM6IFsnXyddLFxuXHRcdH0pO1xuXHR9XG59XG4iXX0=