import { __decorate, __metadata } from "tslib";
import { Expose } from 'class-transformer';
import { ɵSingleFilter } from './single-filter';
import { ɵComparisonType, ɵFilterType } from '../enums';
export class ɵIsNullFilter extends ɵSingleFilter {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];
    }
    constructor(comparisonType, leftExpression) {
        super(ɵFilterType.IsNull, comparisonType, leftExpression);
    }
    get isNull() {
        return this.comparisonType === ɵComparisonType.Is_null;
    }
    /**
     * Parses isNull filter from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        return new ɵIsNullFilter(dto['comparisonType'], expressionParser.fromJson(dto['leftExpression'], filterParser));
    }
    clone() {
        return new ɵIsNullFilter(this.comparisonType, this.leftExpression);
    }
}
/**
 * @internal
 * @dontChange
 */
ɵIsNullFilter._instanceOfKey = 'devkit_IsNullFilter';
__decorate([
    Expose(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ɵIsNullFilter.prototype, "isNull", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNudWxsLWZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvZGV2a2l0L2Jhc2Uvc3JjL2xpYi9wdWJsaWMvZXNxL2RhdGEtbW9kZWwvZmlsdGVycy9pc251bGwtZmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBSXhELE1BQU0sT0FBTyxhQUFjLFNBQVEsYUFBYTtJQU8vQzs7O09BR0c7SUFDTyxNQUFNLEtBQUssZUFBZTtRQUNuQyxPQUFPLENBQUMsR0FBRyxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsWUFBWSxjQUErQixFQUFFLGNBQStCO1FBQzNFLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsSUFDVyxNQUFNO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxlQUFlLENBQUMsT0FBTyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUdwQixHQUFnQixFQUFFLFlBQTJCLEVBQUUsZ0JBQW1DO1FBQ25GLE9BQU8sSUFBSSxhQUFhLENBQ3ZCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBb0IsRUFDeEMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBZ0IsRUFBRSxZQUFZLENBQW9CLENBQ2hHLENBQUM7SUFDSCxDQUFDO0lBRU0sS0FBSztRQUNYLE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7QUF2Q0Q7OztHQUdHO0FBQ3VCLDRCQUFjLEdBQVcscUJBQXFCLENBQUM7QUFjekU7SUFBQyxNQUFNLEVBQUU7OzsyQ0FHUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cG9zZSB9IGZyb20gJ2NsYXNzLXRyYW5zZm9ybWVyJztcblxuaW1wb3J0IHsgybVCYXNlRmlsdGVyUGFyc2VyIH0gZnJvbSAnLi9maWx0ZXItcGFyc2VyL2Jhc2UtZmlsdGVyLXBhcnNlcic7XG5pbXBvcnQgeyDJtVNpbmdsZUZpbHRlciB9IGZyb20gJy4vc2luZ2xlLWZpbHRlcic7XG5pbXBvcnQgeyDJtUpzb25PYmplY3QgfSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5pbXBvcnQgeyDJtUNvbXBhcmlzb25UeXBlLCDJtUZpbHRlclR5cGUgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyDJtUJhc2VFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbnMvYmFzZS1leHByZXNzaW9uJztcbmltcG9ydCB7IMm1QmFzZUV4cHJlc3Npb25QYXJzZXIgfSBmcm9tICcuLi9leHByZXNzaW9ucy9leHByZXNzaW9uLXBhcnNlci9iYXNlLWV4cHJlc3Npb24tcGFyc2VyJztcblxuZXhwb3J0IGNsYXNzIMm1SXNOdWxsRmlsdGVyIGV4dGVuZHMgybVTaW5nbGVGaWx0ZXIge1xuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9pbnN0YW5jZU9mS2V5OiBzdHJpbmcgPSAnZGV2a2l0X0lzTnVsbEZpbHRlcic7XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyBnZXQgX2luc3RhbmNlT2ZLZXlzKCk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gWy4uLsm1U2luZ2xlRmlsdGVyLl9pbnN0YW5jZU9mS2V5cywgdGhpcy5faW5zdGFuY2VPZktleV07XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihjb21wYXJpc29uVHlwZTogybVDb21wYXJpc29uVHlwZSwgbGVmdEV4cHJlc3Npb246IMm1QmFzZUV4cHJlc3Npb24pIHtcblx0XHRzdXBlcijJtUZpbHRlclR5cGUuSXNOdWxsLCBjb21wYXJpc29uVHlwZSwgbGVmdEV4cHJlc3Npb24pO1xuXHR9XG5cblx0QEV4cG9zZSgpXG5cdHB1YmxpYyBnZXQgaXNOdWxsKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmNvbXBhcmlzb25UeXBlID09PSDJtUNvbXBhcmlzb25UeXBlLklzX251bGw7XG5cdH1cblxuXHQvKipcblx0ICogUGFyc2VzIGlzTnVsbCBmaWx0ZXIgZnJvbSBqc29uLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIGZyb21Kc29uPFxuXHRcdFRGaWx0ZXJQYXJzZXIgZXh0ZW5kcyB0eXBlb2YgybVCYXNlRmlsdGVyUGFyc2VyLFxuXHRcdFRFeHByZXNzaW9uUGFyc2VyIGV4dGVuZHMgdHlwZW9mIMm1QmFzZUV4cHJlc3Npb25QYXJzZXIsXG5cdD4oZHRvOiDJtUpzb25PYmplY3QsIGZpbHRlclBhcnNlcjogVEZpbHRlclBhcnNlciwgZXhwcmVzc2lvblBhcnNlcjogVEV4cHJlc3Npb25QYXJzZXIpOiDJtUlzTnVsbEZpbHRlciB7XG5cdFx0cmV0dXJuIG5ldyDJtUlzTnVsbEZpbHRlcihcblx0XHRcdGR0b1snY29tcGFyaXNvblR5cGUnXSBhcyDJtUNvbXBhcmlzb25UeXBlLFxuXHRcdFx0ZXhwcmVzc2lvblBhcnNlci5mcm9tSnNvbihkdG9bJ2xlZnRFeHByZXNzaW9uJ10gYXMgybVKc29uT2JqZWN0LCBmaWx0ZXJQYXJzZXIpIGFzIMm1QmFzZUV4cHJlc3Npb24sXG5cdFx0KTtcblx0fVxuXG5cdHB1YmxpYyBjbG9uZSgpOiDJtUlzTnVsbEZpbHRlciB7XG5cdFx0cmV0dXJuIG5ldyDJtUlzTnVsbEZpbHRlcih0aGlzLmNvbXBhcmlzb25UeXBlLCB0aGlzLmxlZnRFeHByZXNzaW9uKTtcblx0fVxufVxuIl19