import { ɵSingleFilter } from './single-filter';
import { ɵFilterType } from '../enums';
export class ɵCompareFilter extends ɵSingleFilter {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];
    }
    constructor(comparisonType, leftExpression, rightExpression) {
        super(ɵFilterType.Compare, comparisonType, leftExpression);
        this.rightExpression = rightExpression.clone();
    }
    /**
     * Parses filter from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        const filter = new ɵCompareFilter(dto['comparisonType'], expressionParser.fromJson(dto['leftExpression'], filterParser), expressionParser.fromJson(dto['rightExpression'], filterParser));
        return filter;
    }
    clone() {
        return new ɵCompareFilter(this.comparisonType, this.leftExpression, this.rightExpression);
    }
    toJson() {
        return {
            ...super.toJson(),
            rightExpression: this.serializeItem(this.rightExpression),
        };
    }
}
/**
 * @internal
 * @dontChange
 */
ɵCompareFilter._instanceOfKey = 'devkit_CompareFilter';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZS1maWx0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2ZpbHRlcnMvY29tcGFyZS1maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE9BQU8sRUFBbUIsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBSXhELE1BQU0sT0FBTyxjQUFlLFNBQVEsYUFBYTtJQU9oRDs7O09BR0c7SUFDTyxNQUFNLEtBQUssZUFBZTtRQUNuQyxPQUFPLENBQUMsR0FBRyxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBSUQsWUFBWSxjQUErQixFQUFFLGNBQStCLEVBQUUsZUFBZ0M7UUFDN0csS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUdwQixHQUFnQixFQUFFLFlBQTJCLEVBQUUsZ0JBQW1DO1FBQ25GLE1BQU0sTUFBTSxHQUFHLElBQUksY0FBYyxDQUNoQyxHQUFHLENBQUMsZ0JBQWdCLENBQW9CLEVBQ3hDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQWdCLEVBQUUsWUFBWSxDQUFvQixFQUNoRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFnQixFQUFFLFlBQVksQ0FBb0IsQ0FDakcsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVNLEtBQUs7UUFDWCxPQUFPLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVNLE1BQU07UUFDWixPQUFPO1lBQ04sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pCLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7U0FDekQsQ0FBQztJQUNILENBQUM7O0FBOUNEOzs7R0FHRztBQUN1Qiw2QkFBYyxHQUFXLHNCQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVCYXNlRmlsdGVyUGFyc2VyIH0gZnJvbSAnLi9maWx0ZXItcGFyc2VyL2Jhc2UtZmlsdGVyLXBhcnNlcic7XG5pbXBvcnQgeyDJtVNpbmdsZUZpbHRlciB9IGZyb20gJy4vc2luZ2xlLWZpbHRlcic7XG5pbXBvcnQgeyDJtUpzb25PYmplY3QgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9qc29uLWRhdGEudHlwZSc7XG5pbXBvcnQgeyDJtUNvbXBhcmlzb25UeXBlLCDJtUZpbHRlclR5cGUgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyDJtUJhc2VFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbnMvYmFzZS1leHByZXNzaW9uJztcbmltcG9ydCB7IMm1QmFzZUV4cHJlc3Npb25QYXJzZXIgfSBmcm9tICcuLi9leHByZXNzaW9ucy9leHByZXNzaW9uLXBhcnNlci9iYXNlLWV4cHJlc3Npb24tcGFyc2VyJztcblxuZXhwb3J0IGNsYXNzIMm1Q29tcGFyZUZpbHRlciBleHRlbmRzIMm1U2luZ2xlRmlsdGVyIHtcblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfaW5zdGFuY2VPZktleTogc3RyaW5nID0gJ2RldmtpdF9Db21wYXJlRmlsdGVyJztcblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIGdldCBfaW5zdGFuY2VPZktleXMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiBbLi4uybVTaW5nbGVGaWx0ZXIuX2luc3RhbmNlT2ZLZXlzLCB0aGlzLl9pbnN0YW5jZU9mS2V5XTtcblx0fVxuXG5cdHB1YmxpYyByZWFkb25seSByaWdodEV4cHJlc3Npb246IMm1QmFzZUV4cHJlc3Npb247XG5cblx0Y29uc3RydWN0b3IoY29tcGFyaXNvblR5cGU6IMm1Q29tcGFyaXNvblR5cGUsIGxlZnRFeHByZXNzaW9uOiDJtUJhc2VFeHByZXNzaW9uLCByaWdodEV4cHJlc3Npb246IMm1QmFzZUV4cHJlc3Npb24pIHtcblx0XHRzdXBlcijJtUZpbHRlclR5cGUuQ29tcGFyZSwgY29tcGFyaXNvblR5cGUsIGxlZnRFeHByZXNzaW9uKTtcblx0XHR0aGlzLnJpZ2h0RXhwcmVzc2lvbiA9IHJpZ2h0RXhwcmVzc2lvbi5jbG9uZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyBmaWx0ZXIgZnJvbSBqc29uLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIGZyb21Kc29uPFxuXHRcdFRGaWx0ZXJQYXJzZXIgZXh0ZW5kcyB0eXBlb2YgybVCYXNlRmlsdGVyUGFyc2VyLFxuXHRcdFRFeHByZXNzaW9uUGFyc2VyIGV4dGVuZHMgdHlwZW9mIMm1QmFzZUV4cHJlc3Npb25QYXJzZXIsXG5cdD4oZHRvOiDJtUpzb25PYmplY3QsIGZpbHRlclBhcnNlcjogVEZpbHRlclBhcnNlciwgZXhwcmVzc2lvblBhcnNlcjogVEV4cHJlc3Npb25QYXJzZXIpOiDJtUNvbXBhcmVGaWx0ZXIge1xuXHRcdGNvbnN0IGZpbHRlciA9IG5ldyDJtUNvbXBhcmVGaWx0ZXIoXG5cdFx0XHRkdG9bJ2NvbXBhcmlzb25UeXBlJ10gYXMgybVDb21wYXJpc29uVHlwZSxcblx0XHRcdGV4cHJlc3Npb25QYXJzZXIuZnJvbUpzb24oZHRvWydsZWZ0RXhwcmVzc2lvbiddIGFzIMm1SnNvbk9iamVjdCwgZmlsdGVyUGFyc2VyKSBhcyDJtUJhc2VFeHByZXNzaW9uLFxuXHRcdFx0ZXhwcmVzc2lvblBhcnNlci5mcm9tSnNvbihkdG9bJ3JpZ2h0RXhwcmVzc2lvbiddIGFzIMm1SnNvbk9iamVjdCwgZmlsdGVyUGFyc2VyKSBhcyDJtUJhc2VFeHByZXNzaW9uLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZpbHRlcjtcblx0fVxuXG5cdHB1YmxpYyBjbG9uZSgpOiDJtUNvbXBhcmVGaWx0ZXIge1xuXHRcdHJldHVybiBuZXcgybVDb21wYXJlRmlsdGVyKHRoaXMuY29tcGFyaXNvblR5cGUsIHRoaXMubGVmdEV4cHJlc3Npb24sIHRoaXMucmlnaHRFeHByZXNzaW9uKTtcblx0fVxuXG5cdHB1YmxpYyB0b0pzb24oKTogybVKc29uT2JqZWN0IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4uc3VwZXIudG9Kc29uKCksXG5cdFx0XHRyaWdodEV4cHJlc3Npb246IHRoaXMuc2VyaWFsaXplSXRlbSh0aGlzLnJpZ2h0RXhwcmVzc2lvbiksXG5cdFx0fTtcblx0fVxufVxuIl19