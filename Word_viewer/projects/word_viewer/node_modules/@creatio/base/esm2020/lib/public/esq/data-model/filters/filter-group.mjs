import { __decorate, __metadata } from "tslib";
import { Exclude, Expose } from 'class-transformer';
import { ɵBaseFilter } from './base-filter';
import { ɵBetweenFilter } from './between-filter';
import { ɵCompareFilter } from './compare-filter';
import { ɵExistsFilter } from './exists-filter';
import { ɵInFilter } from './in-filter';
import { ɵIsNullFilter } from './isnull-filter';
import { ɵgenerateGuid } from '../../../../public/types';
import { ɵValidationUtilities } from '../../../exceptions';
import { ɵComparisonType } from '../enums/comparison-type.enum';
import { ɵFilterType } from '../enums/filter-type.enum';
import { ɵLogicalOperatorType } from '../enums/logical-operator-type.enum';
import { ɵColumnExpression } from '../expressions/columns/column-expression';
import { ɵParameterExpression } from '../expressions/parameters/parameter-expression';
export class ɵFilterGroup extends ɵBaseFilter {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵBaseFilter._instanceOfKeys, this._instanceOfKey];
    }
    get items() {
        const result = {};
        this.filters.forEach((filter, key) => {
            result[key] = this.serializeItem(filter);
        });
        return result;
    }
    constructor(logicalOperation = ɵLogicalOperatorType.And) {
        super(ɵFilterType.FilterGroup);
        this.filters = new Map();
        this.logicalOperation = logicalOperation;
    }
    /**
     * Parses filter group from json.
     * @public
     */
    static fromJson(dto, filterParser) {
        const logicalOperation = dto['logicalOperation'];
        const group = new ɵFilterGroup(logicalOperation || ɵLogicalOperatorType.And);
        Object.entries(dto['items']).forEach(([key, filterDTO]) => {
            group.add(filterParser.fromJson(filterDTO), key);
        });
        return group;
    }
    /**
     * Returns filter item by index.
     * @param index Item index.
     * @returns Filter.
     */
    getItemByIndex(index) {
        return this.items[Object.keys(this.items)[index]];
    }
    /**
     * Creates and adds compare filter by value.
     * @param comparisonType Comparison type.
     * @param columnPath Column path.
     * @param parameterValue Parameter value.
     * @param filterKey Filter key.
     */
    addSchemaColumnFilterWithParameter(comparisonType, columnPath, parameterValue, filterKey) {
        const leftExpression = new ɵColumnExpression({ columnPath });
        const rightExpression = new ɵParameterExpression({ value: parameterValue });
        const filter = new ɵCompareFilter(comparisonType, leftExpression, rightExpression);
        this.add(filter, filterKey);
    }
    /**
     * Creates and adds in filter by values.
     * @param comparisonType Comparison type.
     * @param columnPath Column path.
     * @param parameterValues Parameter values.
     * @param filterKey Filter key.
     */
    addSchemaColumnInFilterWithParameters(comparisonType, columnPath, parameterValues, filterKey) {
        const leftExpression = new ɵColumnExpression({ columnPath });
        const expressions = parameterValues.map((singleParameterValue) => new ɵParameterExpression({
            value: singleParameterValue,
        }));
        const filter = new ɵInFilter(comparisonType, leftExpression, expressions);
        this.add(filter, filterKey);
    }
    addSchemaColumnIsNullFilter(columnPath, filterKey) {
        const leftExpression = new ɵColumnExpression({ columnPath });
        const filter = new ɵIsNullFilter(ɵComparisonType.Is_null, leftExpression);
        this.add(filter, filterKey);
    }
    /**
     * Creates and adds not null filter.
     * @param columnPath Column path.
     * @param filterKey Filter key.
     */
    addSchemaColumnIsNotNullFilter(columnPath, filterKey) {
        const leftExpression = new ɵColumnExpression({ columnPath });
        const filter = new ɵIsNullFilter(ɵComparisonType.Is_not_null, leftExpression);
        this.add(filter, filterKey);
    }
    /**
     * Creates and adds filter between less value and greater value.
     * @param columnPath Column path.
     * @param lessParamValue Less parameter value.
     * @param greaterParamValue Greater parameter value.
     * @param filterKey Filter key.
     */
    addSchemaColumnBetweenFilterWithParameters(columnPath, lessParamValue, greaterParamValue, filterKey) {
        const leftExpression = new ɵColumnExpression({ columnPath });
        const rightLessExpression = new ɵParameterExpression({ value: lessParamValue });
        const rightGreaterExpression = new ɵParameterExpression({ value: greaterParamValue });
        const filter = new ɵBetweenFilter(leftExpression, rightLessExpression, rightGreaterExpression);
        this.add(filter, filterKey);
    }
    addExistsFilter(columnPath, subFilters, filterKey) {
        const leftExpression = new ɵColumnExpression({ columnPath });
        const filter = new ɵExistsFilter(leftExpression, subFilters);
        this.add(filter, filterKey);
    }
    addNotExistsFilter(columnPath, subFilters, filterKey) {
        const leftExpression = new ɵColumnExpression({ columnPath });
        const filter = new ɵExistsFilter(leftExpression, subFilters, ɵComparisonType.Not_exists);
        this.add(filter, filterKey);
    }
    add(filter, filterKey) {
        ɵValidationUtilities.checkArgumentEmpty('filter', filter);
        const key = filterKey || ɵgenerateGuid();
        this.filters.set(key, filter);
    }
    clone() {
        const filterGroup = new ɵFilterGroup(this.logicalOperation);
        this.filters.forEach((filter, filterKey) => {
            filterGroup.filters.set(filterKey, filter.clone());
        });
        return filterGroup;
    }
}
/**
 * @internal
 * @dontChange
 */
ɵFilterGroup._instanceOfKey = 'devkit_FilterGroup';
__decorate([
    Exclude(),
    __metadata("design:type", Object)
], ɵFilterGroup.prototype, "filters", void 0);
__decorate([
    Expose(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], ɵFilterGroup.prototype, "items", null);
//# sourceMappingURL=data:application/json;base64,