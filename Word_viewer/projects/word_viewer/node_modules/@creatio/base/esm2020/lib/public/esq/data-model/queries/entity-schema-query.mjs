import { classToPlain } from 'class-transformer';
import { ɵBaseFilterableQuery } from './base-filterable-query';
import { ɵQueryOperationType } from './query-operation-type';
import { ɵAggregationEvalType } from '../enums';
import { ɵAggregationFunctionColumn, ɵAggregationSubQueryColumn, ɵArithmeticQueryColumn, ɵDatePartFunctionColumn, ɵEntityQueryColumn, ɵLengthFunctionColumn, ɵMacrosFunctionColumn, ɵParameterQueryColumn, ɵWindowFunctionColumn } from '../columns';
import { ɵItemNotFoundException, ɵValidationUtilities } from '../../../exceptions';
import { ɵAggregationFunctionExpression, ɵColumnExpression } from '../expressions';
/**
 * @public
 */
export class ɵEntitySchemaQuery extends ɵBaseFilterableQuery {
    constructor(rootSchemaName) {
        super(ɵQueryOperationType.Select, rootSchemaName);
        this._columns = new Map();
        this.isDistinct = false;
        /**
         * Number of rows to select.
         */
        this.rowCount = -1;
        /**
         * Rows count to skip.
         */
        this.rowsOffset = -1;
        this.useLocalization = true;
        this.useRecordDeactivation = false;
        this._getIsPageable = () => this.rowCount > 0 && this.rowsOffset > -1;
    }
    _internalAddColumn(key, column) {
        if (!this._columns.has(key)) {
            this._columns.set(key, column);
        }
    }
    // endregion
    // region Methods: Public
    /**
     * Returns column instance by column alias.
     * @param columnAlias Column alias.
     * @returns [BaseQueryColumn] Column instance.
     */
    getColumn(columnAlias) {
        if (!this._columns.has(columnAlias)) {
            throw new ɵItemNotFoundException(columnAlias);
        }
        return this.findColumn(columnAlias);
    }
    /**
     * Returns column instance by column alias if not found returns null.
     */
    findColumn(columnAlias) {
        return this._columns.get(columnAlias);
    }
    /**
     * @inheritDoc
     */
    getMetadata() {
        return {
            ...super.getMetadata(),
            columns: {
                items: classToPlain(this._columns, { exposeUnsetFields: false, excludePrefixes: ['_'] }),
            },
            allColumns: false,
            isDistinct: this.isDistinct,
            ignoreDisplayValues: false,
            rowCount: this.rowCount,
            rowsOffset: this.rowsOffset,
            isPageable: this._getIsPageable(),
            conditionalValues: this.conditionalValues ? this.conditionalValues : null,
            isHierarchical: false,
            hierarchicalMaxDepth: 0,
            hierarchicalColumnName: null,
            hierarchicalColumnValue: null,
            useLocalization: this.useLocalization,
            useRecordDeactivation: this.useRecordDeactivation,
        };
    }
    /**
     * Add column.
     * @param column Column path.
     * @param columnAlias Column alias.
     * @returns [BaseQueryColumn] Column instance.
     */
    addColumn(column, columnAlias) {
        this._internalAddColumn(columnAlias, column);
        return column;
    }
    /**
     * Add column by column path.
     * @param columnPath Column path.
     * @param columnAlias Column alias.
     * @returns [EntityQueryColumn] Column instance.
     */
    addSchemaColumn(columnPath, columnAlias) {
        ɵValidationUtilities.checkArgumentEmpty('columnPath', columnPath);
        const column = new ɵEntityQueryColumn(columnPath);
        this._internalAddColumn(columnAlias || columnPath, column);
        return column;
    }
    /**
     * Add aggregation sub query column.
     * @param columnPath Column path.
     * @param aggregationType Aggregation type.
     * @param subFilters Sub query filters.
     * @param columnAlias Column alias.
     * @returns [AggregationSubQueryColumn] Column instance.
     */
    addAggregationSubQueryColumn(columnPath, aggregationType, aggregationConfig, columnAlias) {
        const column = new ɵAggregationSubQueryColumn(columnPath, aggregationType, aggregationConfig.filter, aggregationConfig.sortByDirection, aggregationConfig.sortByColumn);
        this._internalAddColumn(columnAlias || columnPath, column);
        return column;
    }
    /**
     * Add parameter column.
     * @param value Parameter value.
     * @param dataValueType Parameter data value type.
     * @param columnAlias Column alias.
     * @returns [ParameterQueryColumn] Column instance.
     */
    addParameterColumn(value, dataValueType, columnAlias) {
        const column = new ɵParameterQueryColumn(value, dataValueType);
        this._internalAddColumn(columnAlias, column);
        return column;
    }
    /**
     * Add arithmetic column.
     * @param arithmeticOperation Arithmetic operation.
     * @param leftArithmeticOperand Left arithmetic operand expression.
     * @param rightArithmeticOperand Right arithmetic operand expression.
     * @param columnAlias Column alias.
     * @returns [ArithmeticQueryColumn] Column instance.
     */
    addArithmeticColumn(arithmeticOperation, leftArithmeticOperand, rightArithmeticOperand, columnAlias) {
        const column = new ɵArithmeticQueryColumn(arithmeticOperation, leftArithmeticOperand, rightArithmeticOperand);
        this._internalAddColumn(columnAlias, column);
        return column;
    }
    /**
     * Add macros function column.
     * @param queryMacrosType Macros type.
     * @param columnAlias Column alias.
     * @returns [MacrosFunctionColumn] Column instance.
     */
    addMacrosFunctionColumn(queryMacrosType, columnAlias) {
        const column = new ɵMacrosFunctionColumn(queryMacrosType);
        this._internalAddColumn(columnAlias, column);
        return column;
    }
    /**
     * Add date part function column.
     * @param columnPath Column path.
     * @param datePartType Date part type.
     * @param columnAlias Column alias.
     * @returns [DatePartFunctionColumn] Column instance.
     */
    addDatePartFunctionColumn(columnPath, datePartType, columnAlias) {
        const functionArgument = new ɵColumnExpression({ columnPath });
        const column = new ɵDatePartFunctionColumn(datePartType, functionArgument);
        this._internalAddColumn(columnAlias, column);
        return column;
    }
    /**
     * Add aggregation function column.
     * @param columnPath Column path.
     * @param aggregationType Aggregation type.
     * @param columnAlias Column alias.
     * @param aggregationEvalType Aggregation eval type.
     * @returns [AggregationFunctionColumn] Column instance.
     */
    addAggregationFunctionColumn(columnPath, aggregationType, columnAlias, aggregationEvalType = ɵAggregationEvalType.None) {
        const functionArgument = new ɵColumnExpression({ columnPath });
        const column = new ɵAggregationFunctionColumn(aggregationType, aggregationEvalType, functionArgument);
        this._internalAddColumn(columnAlias, column);
        return column;
    }
    /**
     * Add length function column.
     * @param columnPath Column path.
     * @param columnAlias Column alias.
     * @returns [LengthFunctionColumn] Column instance.
     */
    addLengthFunctionColumn(columnPath, columnAlias) {
        const functionArgument = new ɵColumnExpression({ columnPath });
        const column = new ɵLengthFunctionColumn(functionArgument);
        this._internalAddColumn(columnAlias, column);
        return column;
    }
    /**
     * Add window function column.
     * @param columnPath Column path.
     * @param aggregationType Aggregation type.
     * @param columnAlias Column alias.
     * @param aggregationEvalType Aggregation eval type.
     * @returns [WindowFunctionColumn] Column instance.
     */
    addWindowFunctionColumn(columnPath, aggregationType, columnAlias, aggregationEvalType = ɵAggregationEvalType.None) {
        const functionArgument = new ɵAggregationFunctionExpression({
            aggregationType,
            aggregationEvalType,
            functionArgument: new ɵColumnExpression({ columnPath }),
        });
        const column = new ɵWindowFunctionColumn(functionArgument);
        this._internalAddColumn(columnAlias, column);
        return column;
    }
}
//# sourceMappingURL=data:application/json;base64,