import { ɵArgumentFunctionExpression } from './argument-function-expression';
import { ɵFunctionType } from '../../enums';
export class ɵLengthFunctionExpression extends ɵArgumentFunctionExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵArgumentFunctionExpression._instanceOfKeys, this._instanceOfKey];
    }
    constructor(config) {
        super(config);
        this.functionType = ɵFunctionType.Length;
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        const functionArgument = expressionParser?.fromJson(dto['functionArgument'], filterParser);
        return new ɵLengthFunctionExpression({ functionArgument, isBlock: dto['isBlock'] });
    }
    clone() {
        return new ɵLengthFunctionExpression(this);
    }
}
/**
 * @internal
 * @dontChange
 */
ɵLengthFunctionExpression._instanceOfKey = 'devkit_LengthFunctionExpression';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVuZ3RoLWZ1bmN0aW9uLWV4cHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2V4cHJlc3Npb25zL2Z1bmN0aW9ucy9sZW5ndGgtZnVuY3Rpb24tZXhwcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsMkJBQTJCLEVBQXFDLE1BQU0sZ0NBQWdDLENBQUM7QUFFaEgsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQU81QyxNQUFNLE9BQU8seUJBQTBCLFNBQVEsMkJBQTJCO0lBT3pFOzs7T0FHRztJQUNPLE1BQU0sS0FBSyxlQUFlO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLDJCQUEyQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQU1ELFlBQVksTUFBdUM7UUFDbEQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBTEMsaUJBQVksR0FBa0IsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQU1uRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FHcEIsR0FBZ0IsRUFBRSxZQUEyQixFQUFFLGdCQUFvQztRQUNwRixNQUFNLGdCQUFnQixHQUFHLGdCQUFnQixFQUFFLFFBQVEsQ0FDbEQsR0FBRyxDQUFDLGtCQUFrQixDQUFnQixFQUN0QyxZQUFZLENBQ1MsQ0FBQztRQUN2QixPQUFPLElBQUkseUJBQXlCLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBWSxFQUFFLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRU0sS0FBSztRQUNYLE9BQU8sSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDOztBQXZDRDs7O0dBR0c7QUFDdUIsd0NBQWMsR0FBVyxpQ0FBaUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1QXJndW1lbnRGdW5jdGlvbkV4cHJlc3Npb24sIMm1QXJndW1lbnRGdW5jdGlvbkV4cHJlc3Npb25Db25maWcgfSBmcm9tICcuL2FyZ3VtZW50LWZ1bmN0aW9uLWV4cHJlc3Npb24nO1xuaW1wb3J0IHsgybVKc29uT2JqZWN0IH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvanNvbi1kYXRhLnR5cGUnO1xuaW1wb3J0IHsgybVGdW5jdGlvblR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcyc7XG5pbXBvcnQgeyDJtUJhc2VGaWx0ZXJQYXJzZXIgfSBmcm9tICcuLi8uLi9maWx0ZXJzL2ZpbHRlci1wYXJzZXIvYmFzZS1maWx0ZXItcGFyc2VyJztcbmltcG9ydCB7IMm1Q29sdW1uRXhwcmVzc2lvbiB9IGZyb20gJy4uL2NvbHVtbnMvY29sdW1uLWV4cHJlc3Npb24nO1xuaW1wb3J0IHsgybVCYXNlRXhwcmVzc2lvblBhcnNlciB9IGZyb20gJy4uL2V4cHJlc3Npb24tcGFyc2VyL2Jhc2UtZXhwcmVzc2lvbi1wYXJzZXInO1xuXG5leHBvcnQgdHlwZSDJtUxlbmd0aEZ1bmN0aW9uRXhwcmVzc2lvbkNvbmZpZyA9IMm1QXJndW1lbnRGdW5jdGlvbkV4cHJlc3Npb25Db25maWc8ybVMZW5ndGhGdW5jdGlvbkV4cHJlc3Npb24+O1xuXG5leHBvcnQgY2xhc3MgybVMZW5ndGhGdW5jdGlvbkV4cHJlc3Npb24gZXh0ZW5kcyDJtUFyZ3VtZW50RnVuY3Rpb25FeHByZXNzaW9uIHtcblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfaW5zdGFuY2VPZktleTogc3RyaW5nID0gJ2RldmtpdF9MZW5ndGhGdW5jdGlvbkV4cHJlc3Npb24nO1xuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQGRvbnRDaGFuZ2Vcblx0ICovXG5cdHByb3RlY3RlZCBzdGF0aWMgZ2V0IF9pbnN0YW5jZU9mS2V5cygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIFsuLi7JtUFyZ3VtZW50RnVuY3Rpb25FeHByZXNzaW9uLl9pbnN0YW5jZU9mS2V5cywgdGhpcy5faW5zdGFuY2VPZktleV07XG5cdH1cblxuXHRwdWJsaWMgcmVhZG9ubHkgZnVuY3Rpb25UeXBlOiDJtUZ1bmN0aW9uVHlwZSA9IMm1RnVuY3Rpb25UeXBlLkxlbmd0aDtcblxuXHRwdWJsaWMgcmVhZG9ubHkgZnVuY3Rpb25Bcmd1bWVudCE6IMm1Q29sdW1uRXhwcmVzc2lvbjtcblxuXHRjb25zdHJ1Y3Rvcihjb25maWc6IMm1TGVuZ3RoRnVuY3Rpb25FeHByZXNzaW9uQ29uZmlnKSB7XG5cdFx0c3VwZXIoY29uZmlnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZXhwcmVzc2lvbiBmcm9tIGpzb24uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZnJvbUpzb248XG5cdFx0VEZpbHRlclBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VGaWx0ZXJQYXJzZXIsXG5cdFx0VEV4cHJlc3Npb25QYXJzZXIgZXh0ZW5kcyB0eXBlb2YgybVCYXNlRXhwcmVzc2lvblBhcnNlcixcblx0PihkdG86IMm1SnNvbk9iamVjdCwgZmlsdGVyUGFyc2VyOiBURmlsdGVyUGFyc2VyLCBleHByZXNzaW9uUGFyc2VyPzogVEV4cHJlc3Npb25QYXJzZXIpOiDJtUxlbmd0aEZ1bmN0aW9uRXhwcmVzc2lvbiB7XG5cdFx0Y29uc3QgZnVuY3Rpb25Bcmd1bWVudCA9IGV4cHJlc3Npb25QYXJzZXI/LmZyb21Kc29uKFxuXHRcdFx0ZHRvWydmdW5jdGlvbkFyZ3VtZW50J10gYXMgybVKc29uT2JqZWN0LFxuXHRcdFx0ZmlsdGVyUGFyc2VyLFxuXHRcdCkgYXMgybVDb2x1bW5FeHByZXNzaW9uO1xuXHRcdHJldHVybiBuZXcgybVMZW5ndGhGdW5jdGlvbkV4cHJlc3Npb24oeyBmdW5jdGlvbkFyZ3VtZW50LCBpc0Jsb2NrOiBkdG9bJ2lzQmxvY2snXSBhcyBib29sZWFuIH0pO1xuXHR9XG5cblx0cHVibGljIGNsb25lKCk6IMm1TGVuZ3RoRnVuY3Rpb25FeHByZXNzaW9uIHtcblx0XHRyZXR1cm4gbmV3IMm1TGVuZ3RoRnVuY3Rpb25FeHByZXNzaW9uKHRoaXMpO1xuXHR9XG59XG4iXX0=