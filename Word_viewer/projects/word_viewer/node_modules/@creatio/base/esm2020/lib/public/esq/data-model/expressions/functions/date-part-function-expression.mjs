import { ɵArgumentFunctionExpression } from './argument-function-expression';
import { ɵFunctionType } from '../../enums';
export class ɵDatePartFunctionExpression extends ɵArgumentFunctionExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵArgumentFunctionExpression._instanceOfKeys, this._instanceOfKey];
    }
    constructor(config) {
        super(config);
        this.functionType = ɵFunctionType.DatePart;
        this.datePartType = config?.datePartType;
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        const functionArgument = expressionParser?.fromJson(dto['functionArgument'], filterParser);
        const datePartType = dto['datePartType'];
        return new ɵDatePartFunctionExpression({ functionArgument, datePartType, isBlock: dto['isBlock'] });
    }
    clone() {
        return new ɵDatePartFunctionExpression(this);
    }
}
/**
 * @internal
 * @dontChange
 */
ɵDatePartFunctionExpression._instanceOfKey = 'devkit_DatePartFunctionExpression';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1wYXJ0LWZ1bmN0aW9uLWV4cHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2V4cHJlc3Npb25zL2Z1bmN0aW9ucy9kYXRlLXBhcnQtZnVuY3Rpb24tZXhwcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsMkJBQTJCLEVBQXFDLE1BQU0sZ0NBQWdDLENBQUM7QUFFaEgsT0FBTyxFQUFpQixhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFRM0QsTUFBTSxPQUFPLDJCQUE0QixTQUFRLDJCQUEyQjtJQU8zRTs7O09BR0c7SUFDTyxNQUFNLEtBQUssZUFBZTtRQUNuQyxPQUFPLENBQUMsR0FBRywyQkFBMkIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFNRCxZQUFZLE1BQXlDO1FBQ3BELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUxDLGlCQUFZLEdBQWtCLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFNcEUsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLEVBQUUsWUFBWSxDQUFDO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUlyQixHQUFnQixFQUNoQixZQUEyQixFQUMzQixnQkFBb0M7UUFFcEMsTUFBTSxnQkFBZ0IsR0FBRyxnQkFBZ0IsRUFBRSxRQUFRLENBQ2xELEdBQUcsQ0FBQyxrQkFBa0IsQ0FBZ0IsRUFDdEMsWUFBWSxDQUNPLENBQUM7UUFDckIsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBa0IsQ0FBQztRQUMxRCxPQUFPLElBQUksMkJBQTJCLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQVksRUFBRSxDQUFDLENBQUM7SUFDaEgsQ0FBQztJQUVNLEtBQUs7UUFDWCxPQUFPLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7QUE3Q0Q7OztHQUdHO0FBQ3VCLDBDQUFjLEdBQVcsbUNBQW1DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyDJtUFyZ3VtZW50RnVuY3Rpb25FeHByZXNzaW9uLCDJtUFyZ3VtZW50RnVuY3Rpb25FeHByZXNzaW9uQ29uZmlnIH0gZnJvbSAnLi9hcmd1bWVudC1mdW5jdGlvbi1leHByZXNzaW9uJztcbmltcG9ydCB7IMm1SnNvbk9iamVjdCB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzL2pzb24tZGF0YS50eXBlJztcbmltcG9ydCB7IMm1RGF0ZVBhcnRUeXBlLCDJtUZ1bmN0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zJztcbmltcG9ydCB7IMm1QmFzZUZpbHRlclBhcnNlciB9IGZyb20gJy4uLy4uL2ZpbHRlcnMvZmlsdGVyLXBhcnNlci9iYXNlLWZpbHRlci1wYXJzZXInO1xuaW1wb3J0IHsgybVCYXNlRXhwcmVzc2lvbiB9IGZyb20gJy4uL2Jhc2UtZXhwcmVzc2lvbic7XG5pbXBvcnQgeyDJtUJhc2VFeHByZXNzaW9uUGFyc2VyIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi1wYXJzZXIvYmFzZS1leHByZXNzaW9uLXBhcnNlcic7XG5cbmV4cG9ydCB0eXBlIMm1RGF0ZVBhcnRGdW5jdGlvbkV4cHJlc3Npb25Db25maWcgPSDJtUFyZ3VtZW50RnVuY3Rpb25FeHByZXNzaW9uQ29uZmlnPMm1RGF0ZVBhcnRGdW5jdGlvbkV4cHJlc3Npb24+ICZcblx0UGljazzJtURhdGVQYXJ0RnVuY3Rpb25FeHByZXNzaW9uLCAnZGF0ZVBhcnRUeXBlJz47XG5cbmV4cG9ydCBjbGFzcyDJtURhdGVQYXJ0RnVuY3Rpb25FeHByZXNzaW9uIGV4dGVuZHMgybVBcmd1bWVudEZ1bmN0aW9uRXhwcmVzc2lvbiB7XG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQGRvbnRDaGFuZ2Vcblx0ICovXG5cdHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX2luc3RhbmNlT2ZLZXk6IHN0cmluZyA9ICdkZXZraXRfRGF0ZVBhcnRGdW5jdGlvbkV4cHJlc3Npb24nO1xuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQGRvbnRDaGFuZ2Vcblx0ICovXG5cdHByb3RlY3RlZCBzdGF0aWMgZ2V0IF9pbnN0YW5jZU9mS2V5cygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIFsuLi7JtUFyZ3VtZW50RnVuY3Rpb25FeHByZXNzaW9uLl9pbnN0YW5jZU9mS2V5cywgdGhpcy5faW5zdGFuY2VPZktleV07XG5cdH1cblxuXHRwdWJsaWMgcmVhZG9ubHkgZnVuY3Rpb25UeXBlOiDJtUZ1bmN0aW9uVHlwZSA9IMm1RnVuY3Rpb25UeXBlLkRhdGVQYXJ0O1xuXG5cdHB1YmxpYyByZWFkb25seSBkYXRlUGFydFR5cGU6IMm1RGF0ZVBhcnRUeXBlO1xuXG5cdGNvbnN0cnVjdG9yKGNvbmZpZzogybVEYXRlUGFydEZ1bmN0aW9uRXhwcmVzc2lvbkNvbmZpZykge1xuXHRcdHN1cGVyKGNvbmZpZyk7XG5cdFx0dGhpcy5kYXRlUGFydFR5cGUgPSBjb25maWc/LmRhdGVQYXJ0VHlwZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZXhwcmVzc2lvbiBmcm9tIGpzb24uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZnJvbUpzb248XG5cdFx0VEZpbHRlclBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VGaWx0ZXJQYXJzZXIsXG5cdFx0VEV4cHJlc3Npb25QYXJzZXIgZXh0ZW5kcyB0eXBlb2YgybVCYXNlRXhwcmVzc2lvblBhcnNlcixcblx0Pihcblx0XHRkdG86IMm1SnNvbk9iamVjdCxcblx0XHRmaWx0ZXJQYXJzZXI6IFRGaWx0ZXJQYXJzZXIsXG5cdFx0ZXhwcmVzc2lvblBhcnNlcj86IFRFeHByZXNzaW9uUGFyc2VyLFxuXHQpOiDJtURhdGVQYXJ0RnVuY3Rpb25FeHByZXNzaW9uIHtcblx0XHRjb25zdCBmdW5jdGlvbkFyZ3VtZW50ID0gZXhwcmVzc2lvblBhcnNlcj8uZnJvbUpzb24oXG5cdFx0XHRkdG9bJ2Z1bmN0aW9uQXJndW1lbnQnXSBhcyDJtUpzb25PYmplY3QsXG5cdFx0XHRmaWx0ZXJQYXJzZXIsXG5cdFx0KSBhcyDJtUJhc2VFeHByZXNzaW9uO1xuXHRcdGNvbnN0IGRhdGVQYXJ0VHlwZSA9IGR0b1snZGF0ZVBhcnRUeXBlJ10gYXMgybVEYXRlUGFydFR5cGU7XG5cdFx0cmV0dXJuIG5ldyDJtURhdGVQYXJ0RnVuY3Rpb25FeHByZXNzaW9uKHsgZnVuY3Rpb25Bcmd1bWVudCwgZGF0ZVBhcnRUeXBlLCBpc0Jsb2NrOiBkdG9bJ2lzQmxvY2snXSBhcyBib29sZWFuIH0pO1xuXHR9XG5cblx0cHVibGljIGNsb25lKCk6IMm1RGF0ZVBhcnRGdW5jdGlvbkV4cHJlc3Npb24ge1xuXHRcdHJldHVybiBuZXcgybVEYXRlUGFydEZ1bmN0aW9uRXhwcmVzc2lvbih0aGlzKTtcblx0fVxufVxuIl19