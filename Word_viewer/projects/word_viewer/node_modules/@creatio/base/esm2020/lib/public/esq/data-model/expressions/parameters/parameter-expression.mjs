import { __decorate, __metadata } from "tslib";
import { Exclude } from 'class-transformer';
import { ɵencodeDate } from '../../../../../external/utils';
import { ɵDataValueType } from '../../../../../public/enums';
import { ɵExpressionType } from '../../enums';
import { ɵBaseExpression } from '../base-expression';
export class ɵParameterExpression extends ɵBaseExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];
    }
    constructor(config) {
        super(config);
        this.expressionType = ɵExpressionType.Parameter;
        const value = config?.value;
        if (value instanceof Date) {
            const cloneDate = new Date();
            cloneDate.setTime(value.getTime());
            this.value = cloneDate;
        }
        else if (!value) {
            this.value = value;
        }
        else {
            this.value = typeof value === 'object' ? { ...value } : value;
        }
        this.dataValueType = config?.dataValueType ?? ɵDataValueType.Text;
        this.parameter = {
            dataValueType: this.dataValueType,
            ...this._getParameterValueMetadata(),
        };
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto) {
        const expression = new ɵParameterExpression(dto['parameter']);
        return expression;
    }
    _convertStringToBlobArray(str) {
        const out = [];
        let position = 0;
        for (let i = 0; i < str.length; i++) {
            const code = str.charCodeAt(i);
            if (code < 128) {
                out[position++] = String.fromCharCode(code);
            }
            else if (code < 2048) {
                /* eslint-disable no-bitwise */
                out[position++] = String.fromCharCode((code >> 6) | 192);
                out[position++] = String.fromCharCode((code & 63) | 128);
            }
            else {
                out[position++] = String.fromCharCode((code >> 12) | 224);
                out[position++] = String.fromCharCode(((code >> 6) & 63) | 128);
                out[position++] = String.fromCharCode((code & 63) | 128);
                /* eslint-enable no-bitwise */
            }
        }
        return out;
    }
    _getParameterValueMetadata() {
        if (this.dataValueType === ɵDataValueType.Blob) {
            return {
                arrayValue: !this.value ? [] : this._convertStringToBlobArray(this.value),
            };
        }
        else if (this.value instanceof Date) {
            return {
                value: ɵencodeDate(this.value),
            };
        }
        else {
            return {
                value: this.value,
            };
        }
    }
    clone() {
        return new ɵParameterExpression(this);
    }
}
/**
 * @internal
 * @dontChange
 */
ɵParameterExpression._instanceOfKey = 'devkit_ParameterExpression';
__decorate([
    Exclude(),
    __metadata("design:type", Object)
], ɵParameterExpression.prototype, "value", void 0);
__decorate([
    Exclude(),
    __metadata("design:type", Number)
], ɵParameterExpression.prototype, "dataValueType", void 0);
//# sourceMappingURL=data:application/json;base64,