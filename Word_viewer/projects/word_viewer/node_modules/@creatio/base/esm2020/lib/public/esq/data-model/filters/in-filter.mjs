import { ɵSingleFilter } from './single-filter';
import { ɵFilterType } from '../enums';
export class ɵInFilter extends ɵSingleFilter {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];
    }
    constructor(comparisonType, leftExpression, rightExpressions) {
        super(ɵFilterType.In, comparisonType, leftExpression);
        this.rightExpressions = rightExpressions.map((expression) => expression.clone());
    }
    /**
     * Parses in filter from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        const dtoRightExpressions = (dto['rightExpressions'] ?? []);
        return new ɵInFilter(dto['comparisonType'], expressionParser.fromJson(dto['leftExpression'], filterParser), dtoRightExpressions.map((expression) => expressionParser.fromJson(expression, filterParser)));
    }
    clone() {
        return new ɵInFilter(this.comparisonType, this.leftExpression, this.rightExpressions);
    }
    toJson() {
        return {
            ...super.toJson(),
            rightExpressions: this.rightExpressions.map((expression) => this.serializeItem(expression)),
        };
    }
}
/**
 * @internal
 * @dontChange
 */
ɵInFilter._instanceOfKey = 'devkit_InFilter';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9kZXZraXQvYmFzZS9zcmMvbGliL3B1YmxpYy9lc3EvZGF0YS1tb2RlbC9maWx0ZXJzL2luLWZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsT0FBTyxFQUFtQixXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFJeEQsTUFBTSxPQUFPLFNBQVUsU0FBUSxhQUFhO0lBTzNDOzs7T0FHRztJQUNPLE1BQU0sS0FBSyxlQUFlO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFJRCxZQUFZLGNBQStCLEVBQUUsY0FBK0IsRUFBRSxnQkFBbUM7UUFDaEgsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUdwQixHQUFnQixFQUFFLFlBQTJCLEVBQUUsZ0JBQW1DO1FBQ25GLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQWUsQ0FBQztRQUMxRSxPQUFPLElBQUksU0FBUyxDQUNuQixHQUFHLENBQUMsZ0JBQWdCLENBQW9CLEVBQ3hDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQWdCLEVBQUUsWUFBWSxDQUFvQixFQUNoRyxtQkFBbUIsQ0FBQyxHQUFHLENBQ3RCLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBeUIsRUFBRSxZQUFZLENBQW9CLENBQ3JHLENBQ0QsQ0FBQztJQUNILENBQUM7SUFFTSxLQUFLO1FBQ1gsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVNLE1BQU07UUFDWixPQUFPO1lBQ04sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pCLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0YsQ0FBQztJQUNILENBQUM7O0FBaEREOzs7R0FHRztBQUN1Qix3QkFBYyxHQUFXLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVCYXNlRmlsdGVyUGFyc2VyIH0gZnJvbSAnLi9maWx0ZXItcGFyc2VyL2Jhc2UtZmlsdGVyLXBhcnNlcic7XG5pbXBvcnQgeyDJtVNpbmdsZUZpbHRlciB9IGZyb20gJy4vc2luZ2xlLWZpbHRlcic7XG5pbXBvcnQgeyDJtUpzb25BcnJheSwgybVKc29uT2JqZWN0IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvanNvbi1kYXRhLnR5cGUnO1xuaW1wb3J0IHsgybVDb21wYXJpc29uVHlwZSwgybVGaWx0ZXJUeXBlIH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHsgybVCYXNlRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb25zL2Jhc2UtZXhwcmVzc2lvbic7XG5pbXBvcnQgeyDJtUJhc2VFeHByZXNzaW9uUGFyc2VyIH0gZnJvbSAnLi4vZXhwcmVzc2lvbnMvZXhwcmVzc2lvbi1wYXJzZXIvYmFzZS1leHByZXNzaW9uLXBhcnNlcic7XG5cbmV4cG9ydCBjbGFzcyDJtUluRmlsdGVyIGV4dGVuZHMgybVTaW5nbGVGaWx0ZXIge1xuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9pbnN0YW5jZU9mS2V5OiBzdHJpbmcgPSAnZGV2a2l0X0luRmlsdGVyJztcblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIGdldCBfaW5zdGFuY2VPZktleXMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiBbLi4uybVTaW5nbGVGaWx0ZXIuX2luc3RhbmNlT2ZLZXlzLCB0aGlzLl9pbnN0YW5jZU9mS2V5XTtcblx0fVxuXG5cdHB1YmxpYyByZWFkb25seSByaWdodEV4cHJlc3Npb25zOiDJtUJhc2VFeHByZXNzaW9uW107XG5cblx0Y29uc3RydWN0b3IoY29tcGFyaXNvblR5cGU6IMm1Q29tcGFyaXNvblR5cGUsIGxlZnRFeHByZXNzaW9uOiDJtUJhc2VFeHByZXNzaW9uLCByaWdodEV4cHJlc3Npb25zOiDJtUJhc2VFeHByZXNzaW9uW10pIHtcblx0XHRzdXBlcijJtUZpbHRlclR5cGUuSW4sIGNvbXBhcmlzb25UeXBlLCBsZWZ0RXhwcmVzc2lvbik7XG5cdFx0dGhpcy5yaWdodEV4cHJlc3Npb25zID0gcmlnaHRFeHByZXNzaW9ucy5tYXAoKGV4cHJlc3Npb24pID0+IGV4cHJlc3Npb24uY2xvbmUoKSk7XG5cdH1cblxuXHQvKipcblx0ICogUGFyc2VzIGluIGZpbHRlciBmcm9tIGpzb24uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZnJvbUpzb248XG5cdFx0VEZpbHRlclBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VGaWx0ZXJQYXJzZXIsXG5cdFx0VEV4cHJlc3Npb25QYXJzZXIgZXh0ZW5kcyB0eXBlb2YgybVCYXNlRXhwcmVzc2lvblBhcnNlcixcblx0PihkdG86IMm1SnNvbk9iamVjdCwgZmlsdGVyUGFyc2VyOiBURmlsdGVyUGFyc2VyLCBleHByZXNzaW9uUGFyc2VyOiBURXhwcmVzc2lvblBhcnNlcik6IMm1SW5GaWx0ZXIge1xuXHRcdGNvbnN0IGR0b1JpZ2h0RXhwcmVzc2lvbnMgPSAoZHRvWydyaWdodEV4cHJlc3Npb25zJ10gPz8gW10pIGFzIMm1SnNvbkFycmF5O1xuXHRcdHJldHVybiBuZXcgybVJbkZpbHRlcihcblx0XHRcdGR0b1snY29tcGFyaXNvblR5cGUnXSBhcyDJtUNvbXBhcmlzb25UeXBlLFxuXHRcdFx0ZXhwcmVzc2lvblBhcnNlci5mcm9tSnNvbihkdG9bJ2xlZnRFeHByZXNzaW9uJ10gYXMgybVKc29uT2JqZWN0LCBmaWx0ZXJQYXJzZXIpIGFzIMm1QmFzZUV4cHJlc3Npb24sXG5cdFx0XHRkdG9SaWdodEV4cHJlc3Npb25zLm1hcChcblx0XHRcdFx0KGV4cHJlc3Npb24pID0+IGV4cHJlc3Npb25QYXJzZXIuZnJvbUpzb24oZXhwcmVzc2lvbiBhcyDJtUpzb25PYmplY3QsIGZpbHRlclBhcnNlcikgYXMgybVCYXNlRXhwcmVzc2lvbixcblx0XHRcdCksXG5cdFx0KTtcblx0fVxuXG5cdHB1YmxpYyBjbG9uZSgpOiDJtUluRmlsdGVyIHtcblx0XHRyZXR1cm4gbmV3IMm1SW5GaWx0ZXIodGhpcy5jb21wYXJpc29uVHlwZSwgdGhpcy5sZWZ0RXhwcmVzc2lvbiwgdGhpcy5yaWdodEV4cHJlc3Npb25zKTtcblx0fVxuXG5cdHB1YmxpYyB0b0pzb24oKTogybVKc29uT2JqZWN0IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4uc3VwZXIudG9Kc29uKCksXG5cdFx0XHRyaWdodEV4cHJlc3Npb25zOiB0aGlzLnJpZ2h0RXhwcmVzc2lvbnMubWFwKChleHByZXNzaW9uKSA9PiB0aGlzLnNlcmlhbGl6ZUl0ZW0oZXhwcmVzc2lvbikpLFxuXHRcdH07XG5cdH1cbn1cbiJdfQ==