import { ɵExpressionType } from '../../enums';
import { ɵBaseExpression } from '../base-expression';
export class ɵSubQueryExpression extends ɵBaseExpression {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵBaseExpression._instanceOfKeys, this._instanceOfKey];
    }
    constructor(config) {
        super(config);
        this.expressionType = ɵExpressionType.SubQuery;
        this.columnPath = config?.columnPath;
        const subFilter = config?.subFilters;
        this.subFilters = typeof subFilter?.clone === 'function' ? subFilter.clone() : subFilter;
        this.subOrderDirection = config.subOrderDirection;
        this.subOrderColumn = config.subOrderColumn;
    }
    /**
     * Parses expression from json.
     * @public
     */
    static fromJson(dto, filterParser) {
        const expression = new ɵSubQueryExpression({
            columnPath: dto['columnPath'],
            subFilters: filterParser.fromJson(dto['subFilters']),
            subOrderDirection: dto['subOrderDirection'],
            subOrderColumn: dto['subOrderColumn'],
        });
        return expression;
    }
    clone() {
        return new ɵSubQueryExpression(this);
    }
    toJson() {
        const result = super.toJson();
        if (this.subFilters) {
            result['subFilters'] = this.serializeItem(this.subFilters);
        }
        return result;
    }
}
/**
 * @internal
 * @dontChange
 */
ɵSubQueryExpression._instanceOfKey = 'devkit_SubQueryExpression';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLXF1ZXJ5LWV4cHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2RldmtpdC9iYXNlL3NyYy9saWIvcHVibGljL2VzcS9kYXRhLW1vZGVsL2V4cHJlc3Npb25zL3N1Yi1xdWVyaWVzL3N1Yi1xdWVyeS1leHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHOUMsT0FBTyxFQUFFLGVBQWUsRUFBcUIsTUFBTSxvQkFBb0IsQ0FBQztBQUt4RSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsZUFBZTtJQU92RDs7O09BR0c7SUFDTyxNQUFNLEtBQUssZUFBZTtRQUNuQyxPQUFPLENBQUMsR0FBRyxlQUFlLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBVUQsWUFBWSxNQUFpQztRQUM1QyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFUQyxtQkFBYyxHQUFvQixlQUFlLENBQUMsUUFBUSxDQUFDO1FBVTFFLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxFQUFFLFVBQVUsQ0FBQztRQUNyQyxNQUFNLFNBQVMsR0FBaUIsTUFBTSxFQUFFLFVBQVUsQ0FBQztRQUNuRCxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sU0FBUyxFQUFFLEtBQUssS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3pGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUM7UUFDbEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUNyQixHQUFnQixFQUNoQixZQUEyQjtRQUUzQixNQUFNLFVBQVUsR0FBRyxJQUFJLG1CQUFtQixDQUFDO1lBQzFDLFVBQVUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFXO1lBQ3ZDLFVBQVUsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQWdCLENBQWlCO1lBQ25GLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBVztZQUNyRCxjQUFjLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixDQUFXO1NBQy9DLENBQUMsQ0FBQztRQUNILE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFTSxLQUFLO1FBQ1gsT0FBTyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxNQUFNO1FBQ1osTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7O0FBMUREOzs7R0FHRztBQUN1QixrQ0FBYyxHQUFXLDJCQUEyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVKc29uT2JqZWN0IH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvanNvbi1kYXRhLnR5cGUnO1xuaW1wb3J0IHsgybVFeHByZXNzaW9uVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zJztcbmltcG9ydCB7IMm1RmlsdGVyR3JvdXAgfSBmcm9tICcuLi8uLi9maWx0ZXJzL2ZpbHRlci1ncm91cCc7XG5pbXBvcnQgeyDJtUJhc2VGaWx0ZXJQYXJzZXIgfSBmcm9tICcuLi8uLi9maWx0ZXJzL2ZpbHRlci1wYXJzZXIvYmFzZS1maWx0ZXItcGFyc2VyJztcbmltcG9ydCB7IMm1QmFzZUV4cHJlc3Npb24sIMm1RXhwcmVzc2lvbkNvbmZpZyB9IGZyb20gJy4uL2Jhc2UtZXhwcmVzc2lvbic7XG5cbmV4cG9ydCB0eXBlIMm1U3ViUXVlcnlFeHByZXNzaW9uQ29uZmlnID0gybVFeHByZXNzaW9uQ29uZmlnPMm1U3ViUXVlcnlFeHByZXNzaW9uPiAmXG5cdFBpY2s8ybVTdWJRdWVyeUV4cHJlc3Npb24sICdjb2x1bW5QYXRoJz47XG5cbmV4cG9ydCBjbGFzcyDJtVN1YlF1ZXJ5RXhwcmVzc2lvbiBleHRlbmRzIMm1QmFzZUV4cHJlc3Npb24ge1xuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9pbnN0YW5jZU9mS2V5OiBzdHJpbmcgPSAnZGV2a2l0X1N1YlF1ZXJ5RXhwcmVzc2lvbic7XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyBnZXQgX2luc3RhbmNlT2ZLZXlzKCk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gWy4uLsm1QmFzZUV4cHJlc3Npb24uX2luc3RhbmNlT2ZLZXlzLCB0aGlzLl9pbnN0YW5jZU9mS2V5XTtcblx0fVxuXG5cdHB1YmxpYyByZWFkb25seSBleHByZXNzaW9uVHlwZTogybVFeHByZXNzaW9uVHlwZSA9IMm1RXhwcmVzc2lvblR5cGUuU3ViUXVlcnk7XG5cblx0cHVibGljIGNvbHVtblBhdGg6IHN0cmluZztcblxuXHRwdWJsaWMgcmVhZG9ubHkgc3ViRmlsdGVyczogybVGaWx0ZXJHcm91cDtcblx0cHVibGljIHJlYWRvbmx5IHN1Yk9yZGVyRGlyZWN0aW9uPzogbnVtYmVyO1xuXHRwdWJsaWMgcmVhZG9ubHkgc3ViT3JkZXJDb2x1bW4/OiBzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnOiDJtVN1YlF1ZXJ5RXhwcmVzc2lvbkNvbmZpZykge1xuXHRcdHN1cGVyKGNvbmZpZyk7XG5cdFx0dGhpcy5jb2x1bW5QYXRoID0gY29uZmlnPy5jb2x1bW5QYXRoO1xuXHRcdGNvbnN0IHN1YkZpbHRlciA9IDzJtUZpbHRlckdyb3VwPmNvbmZpZz8uc3ViRmlsdGVycztcblx0XHR0aGlzLnN1YkZpbHRlcnMgPSB0eXBlb2Ygc3ViRmlsdGVyPy5jbG9uZSA9PT0gJ2Z1bmN0aW9uJyA/IHN1YkZpbHRlci5jbG9uZSgpIDogc3ViRmlsdGVyO1xuXHRcdHRoaXMuc3ViT3JkZXJEaXJlY3Rpb24gPSBjb25maWcuc3ViT3JkZXJEaXJlY3Rpb247XG5cdFx0dGhpcy5zdWJPcmRlckNvbHVtbiA9IGNvbmZpZy5zdWJPcmRlckNvbHVtbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZXhwcmVzc2lvbiBmcm9tIGpzb24uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZnJvbUpzb248VEZpbHRlclBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VGaWx0ZXJQYXJzZXI+KFxuXHRcdGR0bzogybVKc29uT2JqZWN0LFxuXHRcdGZpbHRlclBhcnNlcjogVEZpbHRlclBhcnNlcixcblx0KTogybVTdWJRdWVyeUV4cHJlc3Npb24ge1xuXHRcdGNvbnN0IGV4cHJlc3Npb24gPSBuZXcgybVTdWJRdWVyeUV4cHJlc3Npb24oe1xuXHRcdFx0Y29sdW1uUGF0aDogZHRvWydjb2x1bW5QYXRoJ10gYXMgc3RyaW5nLFxuXHRcdFx0c3ViRmlsdGVyczogZmlsdGVyUGFyc2VyLmZyb21Kc29uKGR0b1snc3ViRmlsdGVycyddIGFzIMm1SnNvbk9iamVjdCkgYXMgybVGaWx0ZXJHcm91cCxcblx0XHRcdHN1Yk9yZGVyRGlyZWN0aW9uOiBkdG9bJ3N1Yk9yZGVyRGlyZWN0aW9uJ10gYXMgbnVtYmVyLFxuXHRcdFx0c3ViT3JkZXJDb2x1bW46IGR0b1snc3ViT3JkZXJDb2x1bW4nXSBhcyBzdHJpbmcsXG5cdFx0fSk7XG5cdFx0cmV0dXJuIGV4cHJlc3Npb247XG5cdH1cblxuXHRwdWJsaWMgY2xvbmUoKTogybVTdWJRdWVyeUV4cHJlc3Npb24ge1xuXHRcdHJldHVybiBuZXcgybVTdWJRdWVyeUV4cHJlc3Npb24odGhpcyk7XG5cdH1cblxuXHRwdWJsaWMgdG9Kc29uKCk6IMm1SnNvbk9iamVjdCB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gc3VwZXIudG9Kc29uKCk7XG5cdFx0aWYgKHRoaXMuc3ViRmlsdGVycykge1xuXHRcdFx0cmVzdWx0WydzdWJGaWx0ZXJzJ10gPSB0aGlzLnNlcmlhbGl6ZUl0ZW0odGhpcy5zdWJGaWx0ZXJzKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxufVxuIl19