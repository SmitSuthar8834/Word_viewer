import { ɵSingleFilter } from './single-filter';
import { ɵComparisonType, ɵFilterType } from '../enums';
export class ɵExistsFilter extends ɵSingleFilter {
    /**
     * @internal
     * @dontChange
     */
    static get _instanceOfKeys() {
        return [...ɵSingleFilter._instanceOfKeys, this._instanceOfKey];
    }
    constructor(leftExpression, subFilters, comparisonType = ɵComparisonType.Exists, isAggregative = true) {
        super(ɵFilterType.Exists, comparisonType, leftExpression);
        this.subFilters = subFilters?.clone();
        this.isAggregative = isAggregative;
    }
    /**
     * Parses filter from json.
     * @public
     */
    static fromJson(dto, filterParser, expressionParser) {
        const leftExpression = expressionParser.fromJson(dto['leftExpression'], filterParser);
        const subFilters = filterParser.fromJson(dto['subFilters']);
        return new ɵExistsFilter(leftExpression, subFilters, dto['comparisonType'], dto['isAggregative']);
    }
    clone() {
        return new ɵExistsFilter(this.leftExpression, this.subFilters, this.comparisonType, this.isAggregative);
    }
    toJson() {
        const result = super.toJson();
        if (this.subFilters) {
            result['subFilters'] = this.serializeItem(this.subFilters);
        }
        return result;
    }
}
/**
 * @internal
 * @dontChange
 */
ɵExistsFilter._instanceOfKey = 'devkit_ExistsFilter';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3RzLWZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvZGV2a2l0L2Jhc2Uvc3JjL2xpYi9wdWJsaWMvZXNxL2RhdGEtbW9kZWwvZmlsdGVycy9leGlzdHMtZmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUl4RCxNQUFNLE9BQU8sYUFBYyxTQUFRLGFBQWE7SUFPL0M7OztPQUdHO0lBQ08sTUFBTSxLQUFLLGVBQWU7UUFDbkMsT0FBTyxDQUFDLEdBQUcsYUFBYSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQU1ELFlBQ0MsY0FBK0IsRUFDL0IsVUFBeUIsRUFDekIsaUJBQWtDLGVBQWUsQ0FBQyxNQUFNLEVBQ3hELGFBQWEsR0FBRyxJQUFJO1FBRXBCLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FHcEIsR0FBZ0IsRUFBRSxZQUEyQixFQUFFLGdCQUFtQztRQUNuRixNQUFNLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQy9DLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBZ0IsRUFDcEMsWUFBWSxDQUNPLENBQUM7UUFDckIsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFnQixDQUFpQixDQUFDO1FBQzNGLE9BQU8sSUFBSSxhQUFhLENBQ3ZCLGNBQWMsRUFDZCxVQUFVLEVBQ1YsR0FBRyxDQUFDLGdCQUFnQixDQUFvQixFQUN4QyxHQUFHLENBQUMsZUFBZSxDQUFZLENBQy9CLENBQUM7SUFDSCxDQUFDO0lBRU0sS0FBSztRQUNYLE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7SUFFTSxNQUFNO1FBQ1osTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7O0FBNUREOzs7R0FHRztBQUN1Qiw0QkFBYyxHQUFXLHFCQUFxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVGaWx0ZXJHcm91cCB9IGZyb20gJy4vZmlsdGVyLWdyb3VwJztcbmltcG9ydCB7IMm1QmFzZUZpbHRlclBhcnNlciB9IGZyb20gJy4vZmlsdGVyLXBhcnNlci9iYXNlLWZpbHRlci1wYXJzZXInO1xuaW1wb3J0IHsgybVTaW5nbGVGaWx0ZXIgfSBmcm9tICcuL3NpbmdsZS1maWx0ZXInO1xuaW1wb3J0IHsgybVKc29uT2JqZWN0IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgybVDb21wYXJpc29uVHlwZSwgybVGaWx0ZXJUeXBlIH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHsgybVCYXNlRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb25zJztcbmltcG9ydCB7IMm1QmFzZUV4cHJlc3Npb25QYXJzZXIgfSBmcm9tICcuLi9leHByZXNzaW9ucy9leHByZXNzaW9uLXBhcnNlci9iYXNlLWV4cHJlc3Npb24tcGFyc2VyJztcblxuZXhwb3J0IGNsYXNzIMm1RXhpc3RzRmlsdGVyIGV4dGVuZHMgybVTaW5nbGVGaWx0ZXIge1xuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqIEBkb250Q2hhbmdlXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9pbnN0YW5jZU9mS2V5OiBzdHJpbmcgPSAnZGV2a2l0X0V4aXN0c0ZpbHRlcic7XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAZG9udENoYW5nZVxuXHQgKi9cblx0cHJvdGVjdGVkIHN0YXRpYyBnZXQgX2luc3RhbmNlT2ZLZXlzKCk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gWy4uLsm1U2luZ2xlRmlsdGVyLl9pbnN0YW5jZU9mS2V5cywgdGhpcy5faW5zdGFuY2VPZktleV07XG5cdH1cblxuXHRwdWJsaWMgcmVhZG9ubHkgc3ViRmlsdGVycz86IMm1RmlsdGVyR3JvdXA7XG5cblx0cHVibGljIHJlYWRvbmx5IGlzQWdncmVnYXRpdmU6IGJvb2xlYW47XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0bGVmdEV4cHJlc3Npb246IMm1QmFzZUV4cHJlc3Npb24sXG5cdFx0c3ViRmlsdGVycz86IMm1RmlsdGVyR3JvdXAsXG5cdFx0Y29tcGFyaXNvblR5cGU6IMm1Q29tcGFyaXNvblR5cGUgPSDJtUNvbXBhcmlzb25UeXBlLkV4aXN0cyxcblx0XHRpc0FnZ3JlZ2F0aXZlID0gdHJ1ZSxcblx0KSB7XG5cdFx0c3VwZXIoybVGaWx0ZXJUeXBlLkV4aXN0cywgY29tcGFyaXNvblR5cGUsIGxlZnRFeHByZXNzaW9uKTtcblx0XHR0aGlzLnN1YkZpbHRlcnMgPSBzdWJGaWx0ZXJzPy5jbG9uZSgpO1xuXHRcdHRoaXMuaXNBZ2dyZWdhdGl2ZSA9IGlzQWdncmVnYXRpdmU7XG5cdH1cblxuXHQvKipcblx0ICogUGFyc2VzIGZpbHRlciBmcm9tIGpzb24uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZnJvbUpzb248XG5cdFx0VEZpbHRlclBhcnNlciBleHRlbmRzIHR5cGVvZiDJtUJhc2VGaWx0ZXJQYXJzZXIsXG5cdFx0VEV4cHJlc3Npb25QYXJzZXIgZXh0ZW5kcyB0eXBlb2YgybVCYXNlRXhwcmVzc2lvblBhcnNlcixcblx0PihkdG86IMm1SnNvbk9iamVjdCwgZmlsdGVyUGFyc2VyOiBURmlsdGVyUGFyc2VyLCBleHByZXNzaW9uUGFyc2VyOiBURXhwcmVzc2lvblBhcnNlcik6IMm1RXhpc3RzRmlsdGVyIHtcblx0XHRjb25zdCBsZWZ0RXhwcmVzc2lvbiA9IGV4cHJlc3Npb25QYXJzZXIuZnJvbUpzb24oXG5cdFx0XHRkdG9bJ2xlZnRFeHByZXNzaW9uJ10gYXMgybVKc29uT2JqZWN0LFxuXHRcdFx0ZmlsdGVyUGFyc2VyLFxuXHRcdCkgYXMgybVCYXNlRXhwcmVzc2lvbjtcblx0XHRjb25zdCBzdWJGaWx0ZXJzID0gZmlsdGVyUGFyc2VyLmZyb21Kc29uKGR0b1snc3ViRmlsdGVycyddIGFzIMm1SnNvbk9iamVjdCkgYXMgybVGaWx0ZXJHcm91cDtcblx0XHRyZXR1cm4gbmV3IMm1RXhpc3RzRmlsdGVyKFxuXHRcdFx0bGVmdEV4cHJlc3Npb24sXG5cdFx0XHRzdWJGaWx0ZXJzLFxuXHRcdFx0ZHRvWydjb21wYXJpc29uVHlwZSddIGFzIMm1Q29tcGFyaXNvblR5cGUsXG5cdFx0XHRkdG9bJ2lzQWdncmVnYXRpdmUnXSBhcyBib29sZWFuLFxuXHRcdCk7XG5cdH1cblxuXHRwdWJsaWMgY2xvbmUoKTogybVFeGlzdHNGaWx0ZXIge1xuXHRcdHJldHVybiBuZXcgybVFeGlzdHNGaWx0ZXIodGhpcy5sZWZ0RXhwcmVzc2lvbiwgdGhpcy5zdWJGaWx0ZXJzLCB0aGlzLmNvbXBhcmlzb25UeXBlLCB0aGlzLmlzQWdncmVnYXRpdmUpO1xuXHR9XG5cblx0cHVibGljIHRvSnNvbigpOiDJtUpzb25PYmplY3Qge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHN1cGVyLnRvSnNvbigpO1xuXHRcdGlmICh0aGlzLnN1YkZpbHRlcnMpIHtcblx0XHRcdHJlc3VsdFsnc3ViRmlsdGVycyddID0gdGhpcy5zZXJpYWxpemVJdGVtKHRoaXMuc3ViRmlsdGVycyk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cbn1cbiJdfQ==